 
"                              
"\  /o._ _  |\/|o._ o._ _  _.| 
" \/ || | | |  ||| ||| | |(_|| 
"       _   _  _ _____  _      
"|_    /\_/|_)|_|_)||_)/ \|\ | 
"|_)\/ \_| |_)|_| \|| \\_/| \| 
"   /                          
                              

" help {
":h --> show the whole help manual
":h i_^n --> show what Ctrl-n does in insert mode
":h c_^n --> show what Ctrl-n does in command mode
":h v_^c --> show what Ctrl-n does in visual mode
":helpgrep $windows --> find help about windows - e.g.
" etc (...)
" }

" Vim minimal setup {
" How to use this basic config:
" (g)vim -u ~/.vimrc_vanilla
" You can make an alias to that and put in your
" $HOME/.bashrc
" alias vimmin="vim -u ~/.vimrc_vanilla"
" alias gvimmin="vim -u ~/.vimrc_vanilla"
" alias svimmin="sudo vim -u ~/.vimrc_vanilla"
" alias sgvimmin="sudo vim -u ~/.vimrc_vanilla"

" For loading naked vim vanilla you can do:
" vim -u NONE
" alias vimva="vim -u NONE"
" alias gvimva="vim -u NONE"
" alias svimva="sudo vim -u NONE"
" alias sgvimva="sudo vim -u NONE"
" }

" Set commands {
    set autowrite                       " Automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    "set spell                           " Spell checking on
    set spell spelllang=en_gb,pt_br,es_es "set languages
    set hidden                          " Allow buffer switching without saving
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    "set iskeyword-=-                    " '-' is an end of word designator
    set showcmd
    set cursorline
    set clipboard=unnamedplus
    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code

    setlocal formatoptions=1 
    setlocal noexpandtab 
    set complete+=s
    set formatprg=par\ -w85         " Sets 85 column
    setlocal wrap 
    setlocal linebreak 
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
" }

" last position in file {
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" } 

" Buffer name {
 let current_file = @%
 "}

" Quiting {
cab W  w
cab Wq wq
cab wQ wq
cab WQ wq
cab Q  q
" }

" Visualbell {
 set visualbell
" }

" Nocompatible {
set nocompatible
" }

" Syntax and plugins (for netrw) {
syntax enable
filetype plugin on
" }

" Finding files {
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**
" }

" Display all matching files when we tab complete {
set wildmenu

" Now we can:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" - e.g. :find *.vim

" Things to consider:
" :b lets you autocomplete any open buffer
" }

" Tag jumping: {
" Create the `tags` file (may need to install ctags first)

" command! MakeTags !ctags -R .

" Now we can:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack

" Things to consider:
" - This doesn't help if you want a visual list of tags
" }

" Autocomplete: {
" The good stuff is documented in |ins-completion|
" :h ins-completion

" Highlights:
" - ^x^n for just this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option
" - / (insert mode) for finding files

" Now we can:
" - Use ^n and ^p to go back and forth in the suggestion list
" }

" Tweaks for browsing {
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_altv=1
let g:netrw_winsize=25

" let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings
" }

" Snippets: {

" Read an empty HTML template and move cursor to title
"" nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jcit>a

" Now we can:
" - Take over the world!
"   (with much fewer keystrokes)
" }

" Build integration: {

" sudo apt install ruby-rspec ruby-bundler

" Steal Mr. Bradley's formatter & add it to our spec_helper
" http://philipbradley.net/rspec-into-vim-with-quickfix

" Configure the `make` command to run RSpec
set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter

" Now we can:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back
" }

" Copying and pasting {
" Use registers
" --> "*(a-z) etc... --> copy
" --> "*p --> paste
" Select the text (visual-mode) --> yank it (:y). Then, paste it with (p)
" Ctrl + shift + v	paste from clipboard
" }

" Thesaurus {
" https://smileykrish.wordpress.com/2011/09/24/enable-thesaurus-in-vim/
" http://www.drbunsen.org/writing-in-vim/ 
" Usage --> Ctrl-x Ctrl-t (insert mode)

set thesaurus+=$HOME/thesaurus/mthesaur.txt
set thesaurus+=$HOME/thesaurus/brazilian-synonyms.txt
" }

"" source: https://github.com/changemewtf/no_plugins/blob/master/no_plugins.vim


""""""""""""""""""""""""""""""""""""

""" FROM HERE, THIS PART IS DISABLED!
"
"" Supetab {
" let g:SuperTabDefaultCompletionType = "<c-n>"
"" }
"
"" YouCompleteMe {
"" You have to compile this plugin inside its folder
""
"    " let g:ycm_min_num_of_chars_for_completion = 3
"" }
"
"" VimCompleteMe {
"
    autocmd FileType vim let b:vcm_tab_complete = 'vim'
    autocmd FileType vim let b:vcm_tab_complete = 'omini'
"
"" }
"
""Neocomplete {
"
"    "https://github.com/Shougo/neocomplete.vim
"
     let g:neocomplete#enable_at_startup = 1
"
"" }

" FastFold {
  set sessionoptions-=folds
" }

" vim-stay [cursor,folds,slash,unix] {
 set viewoptions=folds 
" }

"
"" Plugins {
"
"" for all configuration using ".vimrc" with PlugInstall, see: "~/OrionRandD/vim-files_mine/_.vimrc" - note that thera are hidden files there
"
"" Plugins will be downloaded under the specified directory.
"
call plug#begin('~/.dotfiles/vim/.vim_minimal/plugged/')

"" Declare the list of plugins.
"
"    " General
        Plug 'ervandew/supertab'
        Plug 'ajh17/VimCompletesMe'
        Plug 'Shougo/neocomplete.vim'
	Plug 'Konfekt/FastFold'
	Plug 'zhimsel/vim-stay'
"        "Plug 'gmarik/vundle'
"        "Plug 'MarcWeber/vim-addon-mw-utils'
"        "Plug 'tomtom/tlib_vim'
"        "Plug 'mileszs/ack.vim'
"        "Plug 'mileszs/ack.vim'
"        "Plug 'mileszs/ack.vim'
        Plug 'scrooloose/nerdtree'
        Plug 'altercation/vim-colors-solarized'
        Plug 'spf13/vim-colors'
        Plug 'tpope/vim-surround'
"        "Plug 'tpope/vim-repeat'
"        "Plug 'rhysd/conflict-marker.vim'
"        "Plug 'jiangmiao/auto-pairs'
"        "Plug 'ctrlpvim/ctrlp.vim'
"        "Plug 'tacahiroy/ctrlp-funky'
"        "Plug 'terryma/vim-multiple-cursors'
"         "Plug 'l04m33/vlime'
"        "Plug 'vim-scripts/sessionman.vim'
"        "Plug 'matchit.zip'
"        "Plug 'Lokaltog/powerline'
"	"Plug 'vim-airline/vim-airline'
"        "Plug 'vim-airline/vim-airline-themes'
"        "Plug 'powerline/fonts'
"        "Plug 'bling/vim-bufferline'
"        "Plug 'easymotion/vim-easymotion'
"        "Plug 'jistr/vim-nerdtree-tabs'
        Plug 'flazz/vim-colorschemes'
"        "Plug 'mbbill/undotree'
"        "Plug 'nathanaelkane/vim-indent-guides'
"        "Plug 'vim-scripts/restore_view.vim'
"        "Plug 'mhinz/vim-signify'
"        "Plug 'mhinz/vim-startify'
"        "Plug 'hobbestigrou/vimtips-fortune'
"        "Plug 'tpope/vim-abolish.git'
"        "Plug 'osyo-manga/vim-over'
"        "Plug 'kana/vim-textobj-user'
"        "Plug 'kana/vim-textobj-indent'
        Plug 'gcmt/wildfire.vim'
"        "Plug 'suan/vim-instant-markdown'
          Plug 'vimwiki/vimwiki'
        Plug 'xolox/vim-colorscheme-switcher'
        Plug 'xolox/vim-misc'
"        "Plug 'blindFS/vim-translator'
"        "Plug 'soimort/translate-shell'
"        "Plug 'sheerun/vim-polyglot'
"        "Plug 'emmanuelgrognet/vim-cobol-syntax-checker'
"        "Plug 'vim-scripts/Conque-GDB'
"        "Plug 'WolfgangMehner/awk-support'
        Plug 'WolfgangMehner/bash-support'
"        "Plug 'WolfgangMehner/c-support'
"        "Plug 'WolfgangMehner/latex-support'
"        "Plug 'WolfgangMehner/lua-support'
"        "Plug 'WolfgangMehner/matlab-support'
"        "Plug 'WolfgangMehner/perl-support'
"        "Plug 'WolfgangMehner/vim-support'
"        "Plug 'trevordmiller/nova-vim'
"        "Plug 'vifm/vifm'
"        "Plug 'vifm/vifm-colors'
"        "Plug 'francoiscabrol/ranger.vim'
"        "Plug 'felipec/notmuch-vim'
"        "Plug 'VincentCordobes/vim-translate'
"        "Plug 'jeffkreeftmeijer/vim-numbertoggle'
"        "Plug 'falstro/ghost-text-vim'
"        "Plug 'morhetz/gruvbox'
        Plug 'ap/vim-buftabline'
"
"    " Writing
"         "Plug 'lifepillar/vim-mucomplete'
"         "Plug 'reedes/vim-litecorrect'
"         "Plug 'reedes/vim-textobj-sentence'
"         "Plug 'reedes/vim-textobj-quote'
"         "Plug 'reedes/vim-wordy'
         Plug 'vim-scripts/loremipsum'
         Plug 'jceb/vim-orgmode'
         Plug 'tpope/vim-speeddating'
"         "Plug 'chrisbra/NrrwRgn'
"         "Plug 'mattn/calendar-vim'
"         "Plug 'inkarkat/vim-SyntaxRange'
"
"    " General Programming
"         "Plug 'scrooloose/syntastic'
"         "Plug 'tpope/vim-fugitive'
"         "Plug 'mattn/webapi-vim'
"         "Plug 'mattn/gist-vim'
"         "Plug 'scrooloose/nerdcommenter'
"         "Plug 'tpope/vim-commentary'
"         "Plug 'godlygeek/tabular'
"         "Plug 'luochen1990/rainbow'
         Plug 'christoomey/vim-tmux-navigator'
"         "Plug 'majutsushi/tagbar'
"
"    " Snippets & AutoComplete
"         "Plug 'garbas/vim-snipmate'
"         "Plug 'honza/vim-snippets'
"         "Plug 'Valloric/YouCompleteMe'
"         "Plug 'SirVer/ultisnips'
"         "Plug 'honza/vim-snippets'
"         "Plug 'Shougo/neocomplcache'
"         "Plug 'Shougo/neosnippet'
"         "Plug 'Shougo/neosnippet-snippets'
"         "Plug 'honza/vim-snippets'
"         Plug 'Shougo/neocomplete.vim.git'
"         "Plug 'Shougo/neosnippet'
"         "Plug 'Shougo/neosnippet-snippets'
"         "Plug 'honza/vim-snippets'
"
"        " PHP
"         "Plug 'spf13/PIV'
"         "Plug 'arnaud-lb/vim-php-namespace'
"         "Plug 'beyondwords/vim-twig'
"
"         " Python
"         " Pick either python-mode or pyflakes & pydoc
"         " Plug 'klen/python-mode'
"         " Plug 'yssource/python.vim'
"          "Plug 'python_match.vim'
"          "Plug 'pythoncomplete'
"
"    " Javascript
"         " Plug 'elzr/vim-json'
"         " Plug 'groenewege/vim-less'
"         " Plug 'pangloss/vim-javascript'
"         " Plug 'briancollins/vim-jst'
"         " Plug 'kchmck/vim-coffee-script'
"
"    " Scala 
"         " Plug 'derekwyatt/vim-scala'
"         " Plug 'derekwyatt/vim-sbt'
"          "Plug 'xptemplate'
"
"    " Haskell
"         " Plug 'travitch/hasksyn'
"         " Plug 'dag/vim2hs'
"         " Plug 'Twinside/vim-haskellConceal'
"         " Plug 'Twinside/vim-haskellFold'
"         " Plug 'lukerandall/haskellmode-vim'
"         " Plug 'eagletmt/neco-ghc'
"         " Plug 'eagletmt/ghcmod-vim'
"         " Plug 'Shougo/vimproc.vim'
"         " Plug 'adinapoli/cumino'
"         " Plug 'bitc/vim-hdevtools'
"
"    " HTML
"          "Plug 'amirh/HTML-AutoCloseTag'
"         " Plug 'hail2u/vim-css3-syntax'
"         " Plug 'gorodinskiy/vim-coloresque'
"         " Plug 'tpope/vim-haml'
"         " Plug 'mattn/emmet-vim'
"
"    " Ruby
"         " Plug 'tpope/vim-rails'
"         " let g:rubycomplete_buffer_loading = 1
"         "let g:rubycomplete_classes_in_global = 1
"         "let g:rubycomplete_rails = 1
"
"    " Puppet 
"         " Plug 'rodjek/vim-puppet'
"
"    " Go Lang 
"       
"           " Plug 'Blackrush/vim-gocode'
"           " Plug 'fatih/vim-go'
"
"    " Elixir
             Plug 'elixir-lang/vim-elixir'
             Plug 'carlosgaldino/elixir-snippets'
"             Plug 'mattreduce/vim-mix'
"
"    " Misc
"            "Plug 'rust-lang/rust.vim'
            Plug 'tpope/vim-markdown'
"            "Plug 'spf13/vim-preview'
"            "Plug 'tpope/vim-cucumber'
"            "Plug 'cespare/vim-toml'
"            "Plug 'quentindecock/vim-cucumber-align-pipes'
"            "Plug 'saltstack/salt-vim'
"
"
"        "Plug 'tpope/vim-sensible'
"        "Plug 'junegunn/seoul256.vim'
"
"" List ends here. Plugins become visible to Vim after this call.
call plug#end()
"}
