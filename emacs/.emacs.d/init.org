# -*- after-save-hook: (org-babel-tangle); -*-
# Local IspellDict: en
# Created 2017-07-15 Sat 19:15
#+TITLE: Emacs init file
#+AUTHOR: Vagner Rener
#+PROPERTY: header-args:emacs-lisp :exports code :tangle init.el :comments yes :results silent

The keyword ":tangle yes" will automatically create a better
"emacs.el" which is good for debugging emacs

Note: for removing a package, delete it from the init.el and from the org file, delete the build-cache.el file, delete it from the build and repos directories

* straight

#+BEGIN_SRC emacs-lisp

      ;;; Code:

      (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa"))

      (setq package-archives '(("gnu"           . "http://elpa.gnu.org/packages/")
                                ("melpa-stable" . "http://stable.melpa.org/packages/")
                                ("melpa"        . "http://melpa.org/packages/")
                                ("org"          . "http://orgmode.org/elpa/")))

      (package-initialize)


      (let ((bootstrap-file
               (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
              (bootstrap-version 4))
          (unless (file-exists-p bootstrap-file)
            (with-current-buffer
                (url-retrieve-synchronously
                 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                 'silent 'inhibit-cookies)
              (goto-char (point-max))
              (eval-print-last-sexp)))
          (load bootstrap-file nil 'nomessage))

      (setq straight-enable-use-package-integration t
        straight-use-package-by-default t
        use-package-always-defer t)

      (straight-use-package 'use-package)

#+END_SRC

* use-package
  
#+BEGIN_SRC emacs-lisp

  (defun cyber/use-package-if-prehook (name _keyword pred rest state)
    (unless pred (error "predicated failed; skipping package")))

  (advice-add 'use-package-handler/:if :before 'cyber/use-package-if-prehook)

  (use-package f
    :ensure t)  ;; this will force use package keyword ":ensure" when using "use-package" 

;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/

   (customize-set-variable 'use-package-always-defer t)

#+END_SRC
 
* speed up Emacs
  
#+BEGIN_SRC emacs-lisp

(setq gc-cons-threshold (* 100 1024 1024))

#+END_SRC

* Configurations 
** preamble 

*** small configs
    
 #+BEGIN_SRC emacs-lisp

     (custom-set-variables
          '(initial-frame-alist (quote ((fullscreen . maximized)))))
    
     ;;(setq inhibit-startup-screen t)
     (visual-line-mode 1)
     (global-visual-line-mode 1)
     (load-theme 'misterioso)
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (show-paren-mode 1)
     (toggle-truncate-lines nil) ;; you have to set truncate-partial-width-windows to non-nil for this to work
     (ido-mode 1) ;; this shows minibuffer options
     (blink-cursor-mode 0)
     (setq org-src-wind-setup 'current-window)
     (global-subword-mode 1)

     (defalias 'yes-or-no-p 'y-or-n-p)
	(setq confirm-kill-processes nil)
   (add-hook 'prog-mode-hook 'turn-on-auto-fill)
      (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; http://folk.uio.no/simenheg/init.el.html

(set-language-environment "UTF-8") ; Set up UTF-8 multilingual environment

(setq
 comint-input-ignoredups        t  ; Ignore duplicates in Comint history
 compare-ignore-whitespace      t  ; Ignore whitespace differences
;; default-input-method       "TeX"  ; TeX is the default toggled input method
;; disabled-command-function    nil  ; Enable disabled commands
 eshell-hist-ignoredups         t  ; Ignore duplicates in Eshell history
 history-delete-duplicates      t  ; Delete duplicate history entries
 inhibit-startup-screen         t  ; No startup screen
;; initial-scratch-message      nil  ; No scratch message
 iswitchb-prompt-newbuffer    nil  ; Create new buffers without confirmation
;; kill-read-only-ok              t  ; Killing read-only text is OK
;; password-cache-expiry        nil  ; Cache TRAMP passwords forever
 show-paren-delay               0) ; Don't delay the paren update

(setq-default
;; fill-column                   76  ; Lines break at column 76
;; frame-background-mode      'dark  ; My theme is dark
 indent-tabs-mode             nil  ; Use spaces for indentation
;; major-mode            'text-mode ; text-mode as the default for new buffers
)

;; (blink-cursor-mode              0) ; No blinking cursor
(column-number-mode             1) ; Show column number
(delete-selection-mode          1) ; Delete selection when typing
(fset 'yes-or-no-p      'y-or-n-p) ; Make "yes/no" prompts "y/n"
(global-auto-revert-mode        1) ; Reload files after modification
(iswitchb-mode                  1) ; Neat buffer switching
(menu-bar-mode                  1) ; Menu bar
(prefer-coding-system      'utf-8) ; Always prefer UTF-8
(scroll-bar-mode               -1) ; And no scroll bar either
(show-paren-mode                1) ; Highlight matching parenthesis
(tool-bar-mode                 -1) ; No tool bar, please

 #+END_SRC

**** smart-hungry-delete

#+BEGIN_SRC emacs-lisp

 (use-package smart-hungry-delete
   :ensure t
   :bind (("<backspace>" . smart-hungry-delete-backward-char)
		  ("C-d" . smart-hungry-delete-forward-char))
   :defer nil ;; dont defer so we can add our functions to hooks 
   :config (smart-hungry-delete-add-default-hooks)
   )

#+END_SRC

**** always murder current buffer

Doing C-x k should kill the current buffer at all times, we have ibuffer for more sophisticated thing.

#+BEGIN_SRC emacs-lisp

(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)

#+END_SRC

**** kill it now

Do not ask for confirmation when killing a buffer

#+BEGIN_SRC emacs-lisp

;; (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

#+END_SRC

**** ibuffer

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC

**** expert-mode

#+BEGIN_SRC emacs-lisp

(setq ibuffer-expert t)

#+END_SRC

**** close-all-buffers

#+BEGIN_SRC emacs-lisp

(defun close-all-buffers ()
  "Kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'close-all-buffers)

#+END_SRC

**** switch-window

when you have many windows, you can change around with
"C-x o"

#+BEGIN_SRC emacs-lisp

(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))

#+END_SRC

**** follow window splits

#+BEGIN_SRC emacs-lisp

(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+END_SRC

**** battery indicator

#+BEGIN_SRC emacs-lisp

(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))

#+END_SRC

**** symon 

system monitor

#+BEGIN_SRC emacs-lisp

(use-package symon
  :ensure t
  :bind
  ("s-h" . symon-mode))

#+END_SRC

**** mark-multiple

#+begin_src emacs-lisp

(use-package mark-multiple
  :ensure t
  :bind ("C-$" . 'mark-next-like-this))

#+END_SRC

**** kill-word improved

#+BEGIN_SRC emacs-lisp

(defun cyber/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c i w") 'cyber/kill-inner-word)

#+END_SRC

**** copy-word improved

#+BEGIN_SRC emacs-lisp

(defun cyber/copy-whole-word ()
  (interactive)
  (save-excursion
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (yank)))
(global-set-key (kbd "C-c w c") 'cyber/copy-whole-word)

#+END_SRC

**** copy-line

#+BEGIN_SRC emacs-lisp

(defun cyber/copy-whole-line ()
  "Copies a line without regard for cursor position."
  (interactive)
  (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
(global-set-key (kbd "C-c l c") 'cyber/copy-whole-line)

#+END_SRC

**** kill-line

#+BEGIN_SRC emacs-lisp 

(global-set-key (kbd "C-c l k") 'kill-whole-line)

#+END_SRC

**** pretty-mode

#+BEGIN_SRC emacs-lisp :tangle yes

(when window-system
      (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))

#+END_SRC

**** rainbow

#+BEGIN_SRC emacs-lisp

(use-package rainbow-mode
 :ensure t
 :init
  (add-hook 'prog-mode-hook 'rainbow-mode))

#+END_SRC

**** rainbow delimiters

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC

**** zapping to char

#+BEGIN_SRC emacs-lisp 

(use-package zzz-to-char
  :ensure t
  :bind ("M-z" . zzz-up-to-char))

#+END_SRC

**** kill-ring

#+BEGIN_SRC emacs-lisp

(setq kill-ring-max 100)

#+END_SRC

**** popup-kill-ring

#+BEGIN_SRC emacs-lisp 

(use-package popup-kill-ring
  :ensure t
  :bind ("M-K" . popup-kill-ring))

#+END_SRC

**** persistent scratch buffer

#+BEGIN_SRC emacs-lisp 

(use-package persistent-scratch
  :config
  (persistent-scratch-setup-default))

;; a function to recreate the scratch buffer
(defun scratch ()
   "create a scratch buffer"
   (interactive)
   (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
   (insert initial-scratch-message)
   (org-mode))

;; https://alhassy.github.io/init/
;; initial-scratch-message
(setq initial-scratch-message (concat
 "#+Title: 'Vagner Rener' @ 'Cyberwarrior"
    "\n# This buffer is for text that is not saved, and for Lisp evaluation."
    "\n# To create a file, visit it with 'C-x C-f' e and enter text in its buffer.\n"))

#+END_SRC

*** scratch org-mode

disabled -> I spend more time in Org-mode than I do writing Elisp.

 #+BEGIN_SRC emacs-lisp

;;   (setq initial-major-mode 'org-mode)

 #+END_SRC

*** centered-window 

  #+BEGIN_SRC emacs-lisp

    (straight-use-package 'centered-window)
      (centered-window-mode 1)
  
  #+END_SRC

*** portuguese-prefix

#+BEGIN_SRC emacs-lisp

(set-input-method "portuguese-prefix")

(defadvice switch-to-buffer (after activate-input-method activate)
(activate-input-method "portuguese-prefix"))

(add-hook 'text-mode-hook
  (lambda () (set-input-method "portuguese-prefix")))

#+END_SRC

*** theme and theme-looper 

#+BEGIN_SRC emacs-lisp

    (dolist (pkgname '(theme-looper
  alect-themes
  base16-theme
  color-theme-modern
  doom-themes
  moe-theme
  ))
(straight-use-package pkgname))

  (global-set-key (kbd "<f8>") 'theme-looper-enable-random-theme)

 #+END_SRC

*** wrap lines

#+BEGIN_SRC emacs-lisp

  ;; Wrap lines without breaking the last word
  (add-hook 'org-mode-hook #'toggle-word-wrap)

#+END_SRC

*** TODO brazilian-holidays

#+BEGIN_SRC emacs-lisp

(load "~/.emacs.d/elpa/emacs-brazilian-holidays/brazilian-holidays.el")

#+END_SRC

** org-mode

#+BEGIN_SRC emacs-lisp

(setq org-ellipsis " ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-confirm-babel-evaluate nil)
(setq org-export-with-smart-quotes t)
(setq org-src-window-setup 'current-window)
(add-hook 'org-mode-hook 'org-indent-mode)

(global-set-key (kbd "C-c '") 'org-edit-src-code)

#+END_SRC

** tab on console 

  tab fold on console
  put this before evil

#+BEGIN_SRC emacs-lisp

    (setq evil-want-keybinding nil)
 ;; (setq evil-want-C-i-jump nil)
    (unless (display-graphic-p) (setq evil-want-C-i-jump nil))
    
;; (when evil-want-C-i-jump
  ;; (define-key evil-motion-state-map (kbd "C-i") 'evil-jump-forward))

#+END_SRC

** evil  

#+BEGIN_SRC emacs-lisp

  (straight-use-package 'evil)
;;    (evil-mode 1)

#+END_SRC

** evil-collection

#+BEGIN_SRC emacs-lisp

  (straight-use-package 'evil-collection)
;;  (evil-collection-init t)

#+END_SRC

** evil-org

#+BEGIN_SRC emacs-lisp

;;  (straight-use-package 'evil-org)
  
#+END_SRC

*** evil-leader 

#+BEGIN_SRC emacs-lisp

 (global-evil-leader-mode)
 (evil-leader/set-key
   "e" 'find-file
   "b" 'switch-to-buffer
   "k" 'kill-buffer)

  ;; Configure leader key

  (evil-leader/set-key-for-mode 'org-mode
	 "." 'hydra-org-state/body
	 "t" 'org-todo
	 "T" 'org-show-todo-tree
	 "v" 'org-mark-element
	 "a" 'org-agenda
	 "c" 'org-archive-subtree
	 "l" 'evil-org-open-links
	 "C" 'org-resolve-clocks)

#+END_SRC

** org-evil

 #+BEGIN_SRC emacs-lisp

(straight-use-package 'org-evil)

 #+END_SRC

** flyspell

#+BEGIN_SRC emacs-lisp 

(defun my-turn-spell-checking-on ()
  "Turn flyspell-mode on."
  (flyspell-mode 1))
(add-hook 'text-mode-hook 'my-turn-spell-checking-on)

#+END_SRC

** icicles

#+BEGIN_SRC emacs-lisp

  ;; (require 'icicles)
  ;; (icy-mode 1) 
 
#+END_SRC

** company

 source: https://github.com/company-mode/company-mode/wiki/Switching-from-AC 

#+BEGIN_SRC emacs-lisp

   (straight-use-package 'company)
   (require 'company)
   (add-hook 'after-init-hook 'global-company-mode)
   (setq company-minimum-prefix-length 3)
   (setq company-idle-delay 0.1)

 (eval-after-load 'company
   '(progn
      (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
      (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))
     
 (eval-after-load 'company
   '(progn
      (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
      (define-key company-active-map (kbd "<backtab>") 'company-select-previous)))
     
 (setq company-frontends
       '(company-pseudo-tooltip-unless-just-one-frontend
         company-preview-frontend
         company-echo-metadata-frontend))
	
 (setq company-require-match 'never)

 (setq company-auto-complete t)

  (defun my-company-visible-and-explicit-action-p ()
     (and (company-tooltip-visible-p)
          (company-explicit-action-p)))

   (defun company-ac-setup ()
     "Sets up `company-mode' to behave similarly to `auto-complete-mode'."
     (setq company-require-match nil)
     (setq company-auto-complete #'my-company-visible-and-explicit-action-p)
     (setq company-frontends '(company-echo-metadata-frontend
                               company-pseudo-tooltip-unless-just-one-frontend-with-delay
                               company-preview-frontend))
     (define-key company-active-map [tab]
       'company-select-next-if-tooltip-visible-or-complete-selection)
     (define-key company-active-map (kbd "TAB")
       'company-select-next-if-tooltip-visible-or-complete-selection))

    (company-ac-setup)
   
  (custom-set-faces
      '(company-preview
	((t (:foreground "darkgray" :underline t))))
      '(company-preview-common
	((t (:inherit company-preview))))
      '(company-tooltip
	((t (:background "lightgray" :foreground "black"))))
      '(company-tooltip-selection
	((t (:background "steelblue" :foreground "white"))))
      '(company-tooltip-common
	((((type x)) (:inherit company-tooltip :weight bold))
         (t (:inherit company-tooltip))))
      '(company-tooltip-common-selection
	((((type x)) (:inherit company-tooltip-selection :weight bold))
         (t (:inherit company-tooltip-selection)))))

#+END_SRC
 
** org-bullets
   
#+BEGIN_SRC emacs-lisp

  (straight-use-package 'org-bullets)
   (org-bullets-mode 1)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

 #+END_SRC

** emacs-w3m

 #+BEGIN_SRC emacs-lisp

         (setq w3m-display-inline-images t) 
	(setq w3m-fill-column 80) ;; if this does not work, modify the file w3m.el itself
	(setq w3m-default-display-inline-images t) 
	(setq w3m-default-save-directory "~/Downloads")

 #+END_SRC

** bug-hunter

#+BEGIN_SRC emacs-lisp

  (straight-use-package 'bug-hunter)

#+END_SRC

** emacspeak eloud

if you want to use eloud, call it with:
M-x eloud-mode RET    

 you have to setup eloud-speech-rate and eloud-voice in
 "~/.emacs.d/straight/repos/eloud/eloud.el"
 file and compile that - eloud-speech-rate was setup to 269

  #+BEGIN_SRC emacs-lisp
   
    (use-package eloud
     :ensure t
     :load-path "~/.emacs.d/straight/repos/eloud"
     :config
          (setq eloud-espeak-path "/usr/bin/espeak"))

    (require 'eloud)

;; (add-to-list 'load-path "~/.emacs.d/straight/repos/eloud/")
;; (eloud-espeak-path "/usr/bin/espeak")
;; (setq eloud-espeak-path "/usr/bin/espeak-ng -ven-gb -s 160")
;; (setq eloud-espeak-path "/usr/bin/espeak -vpt -s 150")

;; if you want to set espeak voice default pitch, you have to
;; edit the file "/usr/lib/x86_64-linux-gnu/espeak-data/voices/en"

  #+END_SRC

** hydra  
  
#+BEGIN_SRC emacs-lisp

    (straight-use-package 'hydra)

#+END_SRC

** cyber hydra 
   
   Window manipulation
   
#+BEGIN_SRC emacs-lisp

  (defhydra cyber-hydra-window (global-map "C-c w")
         "Commands relating to window manipulation"
         ("h" windmove-left "move left")
         ("l" windmove-right "move right")
         ("j" windmove-down "move down")
         ("k" windmove-up "move up")
         ("q" delete-window "delete window")
         ("Q" kill-buffer-and-window "kill buffer, delete window")
         ("H" cyber-move-splitter-left "move splitter left")
         ("L" cyber-move-splitter-right "move splitter right")
         ("J" cyber-move-splitter-down "move splitter down")
         ("K" cyber-move-splitter-up "move splitter up")
         ("b" balance-windows)
         ("|" cyber-window-toggle-split-direction)
         ("s" split-window-below "split window (below)")
         ("v" split-window-right "split window (right)")
         (";" ace-window "select window" :exit t))

#+END_SRC

** org hydra  
  
   org hydra function

 #+BEGIN_SRC emacs-lisp

 (defhydra hydra-org-state ()
	  ;; basic navigation
	  ("i" org-cycle)
	  ("I" org-shifttab)
	  ("h" org-up-element)
	  ("l" org-down-element)
	  ("j" org-forward-element)
	  ("k" org-backward-element)
	  ;; navigating links
	  ("n" org-next-link)
	  ("p" org-previous-link)
	  ("o" org-open-at-point)
	  ;; navigation blocks
	  ("N" org-next-block)
	  ("P" org-previous-block)
	  ;; updates
	  ("." org-ctrl-c-ctrl-c)
	  ("*" org-ctrl-c-star)
	  ("-" org-ctrl-c-minus)
	  ;; change todo state
	  ("H" org-shiftleft)
	  ("L" org-shiftright)
	  ("J" org-shiftdown)
	  ("K" org-shiftup)
	  ("t" org-todo))

 #+END_SRC

** yasnippets

;; yasnippet code 'optional', before auto-complete

   if it complains, copy make a snippet directory inside the
   complaining yasnippet error

#+BEGIN_SRC emacs-lisp

(dolist (pkgname '(snippet
yasnippet
yasnippet-snippets
yasnippet-classic-snippets))
  (straight-use-package pkgname))

  (yas-global-mode 1)

#+END_SRC

** counsel - ivy - swiper

#+BEGIN_SRC emacs-lisp

(use-package counsel
 :straight t
 :bind
 (("M-y" . counsel-yank-pop)
 :map ivy-minibuffer-map
 ("M-y" . ivy-next-line)))

 (setq counsel-fzf-cmd "~/.fzf/bin/fzf -f %s")

(use-package ivy
:straight t
:diminish (ivy-mode)
:bind (("C-x b" . ivy-switch-buffer))
:config
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "%d/%d ")
(setq ivy-display-style 'fancy))

(use-package swiper
:straight t
:bind (("C-s" . swiper)
       ("C-r" . swiper)
       ("C-c C-r" . ivy-resume)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file))
:config
(progn
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ))

#+END_SRC

** abbreviations

#+BEGIN_SRC emacs-lisp

(setq-default abbrev-mode t)
     (read-abbrev-file "~/.emacs.d/abbrev_defs")
     (setq save-abbrevs t)
     (setq save-abbrevs 'silently)

   (define-key ctl-x-map "\C-i"
  #'endless/ispell-word-then-abbrev)

    ;; "it remaps to 'C-x TAB'"
    ;; Because "C-i" is the Stumpwm TM prefix-key

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'. You can edit the abbreviation
file with `edit-abbrevs`"
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
		 ;; Word was corrected or used quit.
		 (if (ispell-word nil 'quiet)
		     nil ; End the loop.
		   ;; Also end if we reach `bob'.
		   (not (bobp)))
	       ;; If there's no word at point, keep looking
	       ;; until `bob'.
	       (not (bobp)))
	(backward-word)
	(backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
	(let ((aft (downcase aft))
	      (bef (downcase bef)))
	  (define-abbrev
	    (if p local-abbrev-table global-abbrev-table)
	    bef aft)
	  (message "\"%s\" now expands to \"%s\" %sally"
		   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))

#+END_SRC

** TODO Dired

   install dired+ with
   el-get-install RET dired+

#+BEGIN_SRC emacs-lisp 

;; (add-to-list 'load-path "~/.emacs.d/local-repo/dired+")
;; (require 'dired+)

(setq dired-dwim-target t)
;; Hide details by default
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
;; Not spawn endless amount of dired buffers
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

#+END_SRC

** all-the-icons 

  M-x all-the-icons-install-fonts RET

#+BEGIN_SRC emacs-lisp

  (use-package all-the-icons
   :straight t)

  (use-package all-the-icons-dired
   :straight t)

  (use-package dired-rainbow
   :straight t)

  (use-package all-the-icons-ivy
   :straight t)


#+END_SRC

*** async

#+BEGIN_SRC emacs-lisp

(use-package async
  :ensure t
  :init (dired-async-mode 1))

#+END_SRC

** eyebrowse
  
#+BEGIN_SRC emacs-lisp

(use-package eyebrowse
  :straight t
  :config
  (progn
    (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
    (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
    (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
    (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
    (define-key eyebrowse-mode-map (kbd "M-5") 'eyebrowse-switch-to-window-config-5)

    (eyebrowse-mode t)
    (setq eyebrowse-new-workspace t)))

#+END_SRC

** TODO helm

https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org#helm

#+BEGIN_SRC emacs-lisp

  ;;  (use-package helm
  ;;    :straight t)

    ;; helm

       (use-package helm)
          (helm-mode 1)

       (define-key helm-map (kbd "s-j") 'helm-next-line)
       (define-key helm-map (kbd "s-k") 'helm-previous-line)

    ;; helm-swoop


  (use-package helm-swoop)

       (global-set-key (kbd "M-x") 'helm-M-x)
       (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
       (global-set-key (kbd "C-x C-f") 'helm-find-files)

#+END_SRC

** beacon

#+BEGIN_SRC emacs-lisp

(use-package beacon
  :straight t
  :defer 10
  :diminish beacon-mode
  :custom
  (beacon-push-mark 10)
  :config
  (beacon-mode +1))

#+END_SRC

** bidi

#+BEGIN_SRC emacs-lisp

(setq-default bidi-display-reordering nil)

 (defun bidi-reordering-toggle ()
 "Toggle bidirectional display reordering."
 (interactive)
 (setq bidi-display-reordering (not bidi-display-reordering))
 (message "bidi reordering is %s" bidi-display-reordering))

 (defun bidi-display-reordering-on ()
 "Sets bidi-display-reordering-on"
 (setq-local bidi-display-reordering t))

 (add-hook 'text-mode-hook 'bidi-display-reordering-on)

 (setq-default bidi-paragraph-direction 'left-to-right)

 (defun bidi-direction-toggle ()
 "Will switch the explicit direction of text for current
 buffer. This will set BIDI-DISPLAY-REORDERING to T"
 (interactive "")
 (setq bidi-display-reordering t)
 (if (equal bidi-paragraph-direction 'right-to-left)
 (setq bidi-paragraph-direction 'left-to-right)
 (setq bidi-paragraph-direction 'right-to-left))
 (message "%s" bidi-paragraph-direction))

#+END_SRC

** auctex

#+BEGIN_SRC emacs-lisp

(setq TeX-parse-self t); Enable parse on load.
  (setq TeX-auto-save t); Enable parse on save.
  (setq-default TeX-master nil)

  (setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

  (add-hook 'TeX-mode-hook 'flyspell-mode); Enable Flyspell mode for TeX modes such as AUCTeX. Highlights all misspelled words.
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode); Enable Flyspell program mode for emacs lisp mode, which highlights all misspelled words in comments and strings.
  (setq ispell-dictionary "english"); Default dictionary. To change do M-x ispell-change-dictionary RET.
  (add-hook 'TeX-mode-hook
	    (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
  (setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.

  ;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
  (setq LaTeX-csquotes-close-quote "}"
	LaTeX-csquotes-open-quote "\\enquote{")

  ;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
  (add-hook 'TeX-mode-hook 'LaTeX-math-mode)

(use-package org-ref
  :straight t)

  ;; RefTeX
  ;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html

   (add-hook 'TeX-mode-hook 'turn-on-reftex)

  (eval-after-load 'reftex-vars; Is this construct really needed?
    '(progn
       (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite macros.
       ;; Make RefTeX interact with AUCTeX, http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html

       (setq reftex-plug-into-AUCTeX t)
       ;; So that RefTeX also recognizes \addbibresource. Note that you
       ;; can't use $HOME in path for \addbibresource but that "~"
       ;; works.
       (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
;;     (setq reftex-default-bibliography '("~/latex_projects/references.bib/")); So that RefTeX in Org-mode knows bibliography
;;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
       (setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"); Recognize \subcaptions, e.g. reftex-citation
       (setq reftex-cite-format; Get ReTeX with biblatex, see https://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992

	     '((?t . "\\textcite[]{%l}")
	       (?a . "\\autocite[]{%l}")
	       (?c . "\\cite[]{%l}")
	       (?s . "\\smartcite[]{%l}")
	       (?f . "\\footcite[]{%l}")
	       (?n . "\\nocite{%l}")
	       (?b . "\\blockcquote[]{%l}{}")))))

;; Fontification (remove unnecessary entries as you notice them) http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html

  (setq font-latex-match-reference-keywords
	'(
	  ;; biblatex
	  ("printbibliography" "[{")
	  ("addbibresource" "[{")
	  ;; Standard commands
	  ;; ("cite" "[{")
	  ("Cite" "[{")
	  ("parencite" "[{")
	  ("Parencite" "[{")
	  ("footcite" "[{")
	  ("footcitetext" "[{")
	  ;; ;; Style-specific commands
	  ("textcite" "[{")
	  ("Textcite" "[{")
	  ("smartcite" "[{")
	  ("Smartcite" "[{")
	  ("cite*" "[{")
	  ("parencite*" "[{")
	  ("supercite" "[{")
	  ; Qualified citation lists
	  ("cites" "[{")
	  ("Cites" "[{")
	  ("parencites" "[{")
	  ("Parencites" "[{")
	  ("footcites" "[{")
	  ("footcitetexts" "[{")
	  ("smartcites" "[{")
	  ("Smartcites" "[{")
	  ("textcites" "[{")
	  ("Textcites" "[{")
	  ("supercites" "[{")
	  ;; Style-independent commands
	  ("autocite" "[{")
	  ("Autocite" "[{")
	  ("autocite*" "[{")
	  ("Autocite*" "[{")
	  ("autocites" "[{")
	  ("Autocites" "[{")
	  ;; Text commands
	  ("citeauthor" "[{")
	  ("Citeauthor" "[{")
	  ("citetitle" "[{")
	  ("citetitle*" "[{")
	  ("citeyear" "[{")
	  ("citedate" "[{")
	  ("citeurl" "[{")
	  ;; Special commands
	  ("fullcite" "[{")))

  (setq font-latex-match-textual-keywords
	'(
	  ;; biblatex brackets
	  ("parentext" "{")
	  ("brackettext" "{")
	  ("hybridblockquote" "[{")
	  ;; Auxiliary Commands
	  ("textelp" "{")
	  ("textelp*" "{")
	  ("textins" "{")
	  ("textins*" "{")
	  ;; supcaption
	  ("subcaption" "[{")))

  (setq font-latex-match-variable-keywords
	'(
	  ;; amsmath
	  ("numberwithin" "{")
	  ;; enumitem
	  ("setlist" "[{")
	  ("setlist*" "[{")
	  ("newlist" "{")
	  ("renewlist" "{")
	  ("setlistdepth" "{")
	  ("restartlist" "{")))

#+END_SRC

** init.el

#+BEGIN_SRC emacs-lisp

(defun find-user-init-file ()
  "Edit the `user-init-file', in another window."
  (interactive)
  (find-file-other-window user-init-file)
  (rotate-frame-clockwise))

(global-set-key (kbd "C-c I") 'find-user-init-file)

#+END_SRC

** avy

#+BEGIN_SRC emacs-lisp

  (use-package avy
    :ensure t
    :bind
      ("M-s" . avy-goto-char))

#+END_SRC

** plantuml

#+BEGIN_SRC emacs-lisp

  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")

  (dolist (pkgname '(plantuml-mode
flycheck-plantuml))
  (straight-use-package pkgname))

#+END_SRC

** org-babel 

#+BEGIN_SRC emacs-lisp

;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 (quote
  ((vala . t)
   (stan . t)
   (octave . t)
   (shen . t)
   (screen . t)
   (scheme . t)
   ;; (scala . t)
   (sass . t)
   (picolisp . t)
   (perl . t)
   (ocaml . t)
   (mscgen . t)
   (lilypond . t)
   (J . t)
   (ledger . t)
   (io . t)
   (hledger . t)
   (haskell . t)
   (fortran . t)
   (forth . t)
   (css . t)
   (maxima . t)
   (matlab . t)
   (emacs-lisp . t)
   (clojure . t)
   (awk . t)
   (makefile . t)
   (sqlite . t)
   (sql . t)
   (ruby . t)
   (R . t)
   (js . t)
   (java . t)
   (shell . t)
   (plantuml . t)
   (lisp . t)
   (latex . t)
   (gnuplot . t)
   (dot . t)
   (ditaa . t)
   (org . t)
   (calc . t)
   (C . t)
   (asymptote . t)
   (python . t)
   (emacs-lisp . t))))

   (setq org-confirm-babel-evaluate nil)
   (setq org-export-use-babel t)

#+END_SRC

** company-emoji

#+BEGIN_SRC emacs-lisp

    (defun --set-emoji-font (frame)

    "Adjust the font settings of FRAME so Emacs can display emoji properly."

  (if (eq system-type 'darwin)

      ;; For NS/Cocoa

      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)

    ;; For Linux

      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

    ;; For when Emacs is started in GUI mode:

    (--set-emoji-font nil)

    ;; Hook for when a frame is created with emacsclient
    ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html

    (add-hook 'after-make-frame-functions '--set-emoji-font)

#+END_SRC

** pdf-tools

#+BEGIN_SRC emacs-lisp

(use-package pdf-tools
 :straight t
 :config
  (pdf-tools-install))

(use-package org-pdfview
 :straight t)

#+END_SRC

** default browser 

#+BEGIN_SRC emacs-lisp

;; (setq browse-url-browser-function 'browse-url-generic
 ;; browse-url-generic-program "firefox")
 ;; browse-url-generic-program "chromium")

   (setq browse-url-browser-function 'w3m-browse-url)
    (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
  ;; optional keyboard short-cut
    (global-set-key "\C-xm" 'browse-url-at-point)

#+END_SRC

** Bible 

*** diatheke
    
#+BEGIN_SRC emacs-lisp

  (straight-use-package 'diatheke)
  (setq max-specpdl-size 2000)

  ;;  (use-package diatheke
  ;;    :straight t)

  ;; (setq diatheke-bible "KJVA -f plain")

  ;; (setq diatheke-bible "ESV -f plain -o s")

  ;; you can set the Bible inside the buffer with
  ;; (diatheke-set-bible) + C-x e

  ;; Keybindings already automatically loaded
  ;; C-c C-b: select a bible translation
  ;; C-c C-i: insert a passage
  ;; C-c C-p: search for a phrase
  ;; C-c C-m: search for multiple words
  ;; C-c C-r: search by regex


#+END_SRC

*** dtk

#+BEGIN_SRC emacs-lisp

   (use-package dtk
     :bind (("C-c B" . dtk-bible))
     :custom
     (dtk-default-module "KJVA")
     (dtk-default-module-category "Biblical Texts")
     (dtk-word-wrap t))

#+END_SRC

*** sword-to-org

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/elpa/sword-to-org/")
(require 'sword-to-org)

#+END_SRC

** telega

  https://github.com/zevlg/telega.el/blob/master/README.md
  https://medium.com/@ajsb85/building-the-telegram-library-80afe68054c9
  
  see the folder "~/Downloads/telega_setup"

#+BEGIN_SRC emacs-lisp

(use-package telega
 :straight t
 :bind 
  (:map telega-msg-button-map
    ("j" . nil)
    ("k" . nil)
    ("h" . nil)
    ("l" . nil))
    :custom (telega-notifications-mode t))

#+END_SRC

** text-scale

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-M-=") 'default-text-scale-increase)
(global-set-key (kbd "C-M--") 'default-text-scale-decrease)

#+END_SRC

** dtrt-indent

dtrt-indent guesses the indentation settings of files, and sets the buffer
local variables accordingly. This makes it pleasant to edit corresponding textfiles

#+BEGIN_SRC emacs-lisp

(use-package dtrt-indent
  :straight t
  :diminish t
  :config
  (dtrt-indent-mode +1))

#+END_SRC

** wgrep 

#+BEGIN_SRC emacs-lisp

(use-package wgrep
 :straight t)

#+END_SRC

** engine-mode

#+BEGIN_SRC emacs-lisp

(use-package engine-mode
  :straight t
  :config (engine-mode t))

  (defengine amazon
    "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s"
    :docstring "Mappin' it up.")

  (defengine project-gutenberg
    "http://www.gutenberg.org/ebooks/search/?query=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s")

  (defengine twitter
    "https://twitter.com/search?q=%s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"
    :docstring "Searchin' the wikis.")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine wolfram-alpha
    "http://www.wolframalpha.com/input/?i=%s")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s")

#+END_SRC

** erc

#+BEGIN_SRC emacs-lisp

(require 'erc)

(defun irc-maybe ()
     "Connect to IRC."
    (interactive)
    (when (y-or-n-p "IRC? ")
      (erc :server "irc.freenode.net" :port 6667
	   :nick "" :full-name "")
      (erc :server "irc.dalnet.net" :port 6667
	   :nick "" :full-name "")
      (erc :server "irc.oftc.net" :port 6667 :nick "")))

(use-package erc-hl-nicks
  :ensure t
  :config
    (erc-update-modules))

(use-package elcord
  :ensure t)

#+END_SRC

** flyspell

#+BEGIN_SRC emacs-lisp

(defun my-turn-spell-checking-on ()
  "Turn flyspell-mode on."
  (flyspell-mode 1))

(add-hook 'text-mode-hook 'my-turn-spell-checking-on)

 ;; enable flyspell in text mode (and derived modes)
 ;; (add-hook 'text-mode-hook 'flyspell-mode)

#+END_SRC

** gitlab 

#+BEGIN_SRC emacs-lisp

(use-package gitlab
 :straight t)
   (setq gitlab-host "https://gitlab.com"
	 gitlab-token-id "")

#+END_SRC

** TODO ggtags
   
https://github.com/leoliu/ggtags

you have to issue the command etags in the working directories

#+BEGIN_SRC emacs-lisp

(use-package ggtags
:straight t
:config 
 (add-hook 'c-mode-common-hook
      (lambda ()
	(when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'php-mode 'web-mode)
	  (ggtags-mode 1)))))

#+END_SRC

** translation 
*** ob-translate

  ;; https://github.com/alphapapa/ob-translate  
  ;; M-x package-install RET ob-translate
  ;; enclose your code between source and call

  ;; #+BEGIN_SRC translate :dest il,el,it,fr,ru,en (etc.)
  ;; or
  ;; #+BEGIN_SRC translate :src il (or 'auto' for auto detection)
  ;; $ContentsHere
  ;; #+END_SRC
  ;; Example: 
  ;; #+BEGIN_SRC translate :src en  :dest he,el,la
  ;;   light
  ;; #+END_SRC
  ;; then you can hit "C-c C-v e" to execute the code
  ;; org-babel-execute-src-block

#+BEGIN_SRC emacs-lisp

      (use-package ob-translate
       :straight t)
      (define-key org-mode-map (kbd "C-c C-v e") 'org-babel-execute-src-block)

;; https://orgmode.org/manual/Evaluating-code-blocks.html#DOCF142
;; I don't want to execute code blocks with C-c C-c
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)

#+END_SRC

*** google-translate 

#+BEGIN_SRC emacs-lisp

(use-package google-translate
:straight t
:config
  (bind-keys*
  ("C-c t" . google-translate-at-point)
  ("C-c T" . google-translate-at-point-reverse)))

(defun google-translate--get-b-d1 ()
      (list 432928 274893998))

#+END_SRC

** grasp 

#+BEGIN_SRC emacs-lisp

#+END_SRC

** hippie-expand

#+BEGIN_SRC emacs-lisp

(fset 'my-complete-file-name
   (make-hippie-expand-function '(try-complete-file-name-partially
					try-complete-file-name)))
   (global-set-key "\M-/" 'my-complete-file-name)
   (global-set-key "\M-\\" 'comint-dynamic-complete-filename)

#+END_SRC

** helm-mu 

#+BEGIN_SRC emacs-lisp

(use-package helm-mu
  :straight t)

#+END_SRC

** image-magick 

#+BEGIN_SRC emacs-lisp

(autoload 'eimp-mode "eimp" "Emacs Image Manipulation Package." t)
      (add-hook 'image-mode-hook 'eimp-mode)

(defun do-org-show-all-inline-images ()
  (interactive)
  (org-display-inline-images t t))
(global-set-key (kbd "C-c C-x C v")
		'do-org-show-all-inline-images)

  ;; apt install aview
  (defun asciiview (imagefile)
    ;; use asciiview (part of aatools) to render image file as text to buffer
    (interactive "fChoose image file: ")
    (save-excursion
      (with-current-buffer (pop-to-buffer (format "*asciiview %s*" imagefile))
	(insert
	 (car (last (butlast
		 (split-string
		  (shell-command-to-string
		   (format
		    "echo q | asciiview -driver stdout -kbddriver stdin %s 2>/dev/null"
		    (shell-quote-argument imagefile)))
		  "^L")))))
	(view-mode))))

   (autoload 'thumbs "thumbs" "Preview images in a directory." t)

   ;; then M-x thumbs

#+END_SRC

** imaxima 

#+BEGIN_SRC emacs-lisp

(defvar imaxima-fnt-size "Large")
(defvar imaxima-use-maxima-mode-flag t)

#+END_SRC 

** indent lisp

#+BEGIN_SRC emacs-lisp

(setq org-src-tab-acts-natively t)

  (defun my/org-cleanup ()
  (interactive)
  (org-edit-special)
  (indent-buffer)
  (org-edit-src-exit))

  (defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

#+END_SRC

** jabber

#+BEGIN_SRC emacs-lisp

(use-package jabber 
 :straight t)

#+END_SRC

** linum

#+BEGIN_SRC emacs-lisp

   (straight-use-package 'linum)

  ;; (setq linum-relative-current-symbol "")

  ;; (linum-relative-global-mode)
  ;; (eval-after-load "linum"
  ;;   '(set-face-attribute 'linum nil :height 100))

  ;; (autopair-global-mode)

  ;; (global-undo-tree-mode)

  ;; (defun linum-update-window-scale-fix (win)
  ;;   "fix linum for scaled text"
  ;;   (set-window-margins win
  ;; 		      (ceiling (* (if (boundp 'text-scale-mode-step)
  ;; 				      (expt text-scale-mode-step
  ;; 					    text-scale-mode-amount) 1)
  ;; 				  (if (car (window-margins))
  ;; 				      (car (window-margins)) 1)
  ;; 				  ))))
  ;; (advice-add #'linum-update-window :after #'linum-update-window-scale-fix)

#+END_SRC

** lyrics 

#+BEGIN_SRC emacs-lisp

(use-package lyrics
 :straight t)

#+END_SRC

** lispy

#+BEGIN_SRC emacs-lisp

(use-package lispy
   :straight t)

  (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))

  (defun conditionally-enable-lispy ()
    (when (eq this-command 'eval-expression)
      (lispy-mode 1)))
  (add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)

#+END_SRC

** lorem-ipsum

#+BEGIN_SRC emacs-lisp

(use-package lorem-ipsum
    :straight t)

;;(lorem-ipsum-use-default-bindings)

;;  (add-hook 'sgml-mode-hook (lambda ()
;;			    (setq Lorem-ipsum-paragraph-separator "<br><br>\n"
;;				  Lorem-ipsum-sentence-separator "&nbsp class="comment">;&nbsp;"
;;				  Lorem-ipsum-list-beginning "<ul>\n"
;;				  Lorem-ipsum-list-bullet "<li>"
;;				  Lorem-ipsum-list-item-end "</li>\n"
;;				  Lorem-ipsum-list-end "</ul>\n")))

#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp

  ;; (use-package magit 
  ;;  :straight t
  ;;  :config
  ;; (global-set-key (kbd "C-c g") 'magit-status))

(use-package magit
  :straight t
  :config
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  :bind
  ("M-g" . magit-status))

#+END_SRC

** TODO mplayer-mode 

#+BEGIN_SRC emacs-lisp

  (use-package mplayer-mode
    :straight t)

#+END_SRC

** message-mode 

#+BEGIN_SRC emacs-lisp

;; colorizing multiply-quoted lines

(add-hook 'message-mode-hook
          (lambda ()
            (font-lock-add-keywords nil
               '(("^[ \t]*>[ \t]*>[ \t]*>.*$"
                  (0 'message-multiply-quoted-text-face))
                 ("^[ \t]*>[ \t]*>.*$"
                  (0 'message-double-quoted-text-face))))))

 ;; email address
(setq user-mail-address "vagnerrener@gmail.com"
        user-full-name "Vagner Rener")

 ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

 ;; postponed message is put in the following draft file
  (setq message-auto-save-directory "~/Mail/drafts")

 ;; send the current buffer to a email list address  

(defun message-send-current-buffer (addr)
  (interactive (list (ido-completing-read "To: " known-email-addresses)))
  (let ((orig-buffer (current-buffer)))
    (message-mail addr
                  (if (equal 'eww-mode major-mode)
                      eww-current-url
                    (buffer-name orig-buffer)))
    (message-goto-body)
    (insert (save-excursion (set-buffer orig-buffer)
                            (buffer-substring (point-min) (point-max))))
    (message-send-and-exit)))

 ;; attach the content of a folder to a message

(defun message-attach-all-files-from-folder(&optional disposition dir-to-attach)
     "create the mml code to attach all files found in a given directory"
     (interactive)
  
     (if (eq disposition nil)
         (setq disposition (completing-read "Enter default disposition to use: " '(("attachment" 1) ("inline" 2)) nil t)))
  
     (if (eq dir-to-attach nil)
         (setq dir-to-attach (read-directory-name "Select a folder to attach: ")))
  
     (if (not (string-match "/$" dir-to-attach))
         (setq dir-to-attach (concat dir-to-attach "/")))
  
     (dolist (file (directory-files dir-to-attach))
       (when (and (not (string= "." file)) (not (string= ".." file)))
         (let (full-file-path mime-type)
           (setq full-file-path (concat dir-to-attach file))
           (if (file-readable-p full-file-path)
               (if (file-directory-p full-file-path)
                   (message-attach-all-files-from-folder disposition full-file-path)
  
                 (setq mime-type (substring (shell-command-to-string (concat "file --mime-type --brief " (shell-quote-argument (expand-file-name full-file-path)))) 0 -1))
                 (insert-string (concat "<#part type=\"" mime-type "\" filename=\"" full-file-path "\" disposition=" disposition ">\n")))))))) 

 ;; shortcuts

 ;; C-x m	brings a message buffer
 ;; C-h m	browse the full list
 ;; C-c C-c	send the message and exit the message buffer
 ;; C-c C-a	add an attachment
 ;; C-c C-k	cancel the message
 ;; C-c C-d	postpone the message
 ;; C-c C-s	send the message but don't exit the message buffer
 ;; C-c C-b	go to the start of the message
 ;; C-c C-z	kill text from point until end of buffer

#+END_SRC

** mingus

#+BEGIN_SRC emacs-lisp

(use-package mingus
 :straight t)

#+END_SRC

** emamux

 #+BEGIN_SRC emacs-lisp

 (use-package emamux
   :straight t
   :defer t)

#+END_SRC

** debian stuff

#+BEGIN_SRC emacs-lisp

 (use-package debian-el
   :straight t
   :defer t)

#+END_SRC

** more stuff

 #+BEGIN_SRC emacs-lisp

      ;;  ;;  (setq frame-title-format "emacs")
      ;;  ;;  (set-default 'cursor-type 'hbar)
      ;;      (ido-mode 1)
      ;;      (column-number-mode 1)
      ;;      (global-hl-line-mode 0)
      ;;      (delete-selection-mode +1)

   (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      ))
   (electric-pair-mode 1)

      ;;      (defalias 'yes-or-no-p 'y-or-n-p)
      ;;      (setq confirm-kill-processes nil)

      ;;    (add-hook 'prog-mode-hook 'turn-on-auto-fill)
      ;;    (add-hook 'text-mode-hook 'turn-on-auto-fill)

      ;; ;; Brent.Longborough's .emacs

      ;; (scroll-bar-mode -1) ; Disable hide scroll-bar
      ;; (tool-bar-mode 0) ; Disable tool bar
      ;; (blink-cursor-mode 0) ; Disable cursor blinking
      ;; (global-visual-line-mode 1); Proper line wrapping
      ;; (global-visual-line-mode 1); Proper line wrapping
      ;; ;; (if (display-graphic-p) (global-hl-line-mode t))
      ;; ;; (global-hl-line-mode 1); Highlight current row
      ;; (show-paren-mode 1); Matches parentheses and such in every mode
      ;; ;;(set-fringe-mode '(0 . 0)); Disable fringe because I use visual-line-mode
      ;; (set-fringe-mode '(4 . 0)) 
      ;; (set-face-background hl-line-face "#f2f1f0"); Same color as greyness in gtk
      ;; (setq inhibit-splash-screen t); Disable splash screen
      ;; (setq visible-bell t); Flashes on error
      ;; (setq calendar-week-start-day 1); Calender should start on Monday
      ;; (add-to-list 'default-frame-alist '(height . 59)); Default frame height.
      ;; (mapc 'global-unset-key [[up] [down] [left] [right]])

      ;; ;; Brent.Longborough upt to here

      ;;  ;;;; Uncomment up or down, but not the two parts

      ;;  (defun 1on1-set-cursor-type (cursor-type)
      ;;    "Set the cursor type of the selected frame to CURSOR-TYPE.
      ;;  When called interactively, prompt for the type to use.
      ;;  To get the frame's current cursor type, use `frame-parameters'."
      ;;    (interactive
      ;;     (list (intern (completing-read
      ;;  		   "Cursor type: "
      ;;  		   (mapcar 'list '("box" "hollow" "bar" "hbar" nil))))))
      ;;    (modify-frame-parameters (selected-frame) (list (cons 'cursor-type cursor-type))))

 #+END_SRC

** multilple-cursors

#+BEGIN_SRC emacs-lisp

  (straight-use-package 'multiple-cursors)
  (require 'multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+END_SRC

** mu4e

#+BEGIN_SRC emacs-lisp

(straight-use-package 'mu4e)

	 (global-set-key (kbd "C-<f10>") 'mu4e)

	 ;; default
	 (setq mu4e-maildir "~/gmail/")
	 (setq mu4e-sent-folder "/Sent")
	 ;; (setq mu4e-drafts-folder "/Drafts")
	 (setq mu4e-trash-folder   "/Junk")
	 (setq mu4e-trash-folder  "/Queue")
	 (setq mu4e-inbox-folder  "/Inbox")

	 ;; setup some handy shortcuts
	 ;; you can quickly switch to your Inbox -- press ``ji''
	 ;; then, when you want archive some messages, move them to
	 ;; the 'All Mail' folder by pressing ``ma''.

	 (setq mu4e-maildir-shortcuts
	  '( ("/Inbox"               . ?i)
	      ;; ("/Drafts"              . ?d)
		 ("/Junk"                . ?j)
		 ("/Sent"                . ?s)
		 ("/Queue"               . ?q)))

	 ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
	 (setq mu4e-sent-messages-behavior 'delete)

	 ;; allow for updating mail using 'U' in the main view:
	 ;; (setq mu4e-get-mail-command "offlineimap")
	 ;; (setq mu4e-get-mail-command "mbsync ~/gmail")

	 (setq mu4e-get-mail-command "mbsync -aV ~/gmail")

	 ;; something about ourselves

	 (setq
	  user-mail-address "vagnerrener@gmail.com"
	  user-full-name  "Vagner Rener"
	  message-signature
	 (concat
	   ;;"任文山 (Ren Wenshan)\n"
	   ;;"Email: renws1990@gmail.com\n"
	   ;;"Blog: wenshanren.org\n"
	   ;;"Douban: www.douban.com/people/renws"
	   "\n"))

 	 ;; sending mail -- replace USERNAME with your gmail username
	 ;; also, make sure the gnutls command line utils are installed
	 ;; package 'gnutls-bin' in Debian/Ubuntu

	 (require 'smtpmail)
	 ;; for sending a message, just hit "C-c C-s"

        (setq message-send-mail-function 'smtpmail-send-it
	 starttls-use-gnutls t
	 smtpmail-stream-type 'starttls
	 smtpmail-starttls-credentials
	 '(("smtp.gmail.com" 587 nil nil))
	 smtpmail-auth-credentials
	 (expand-file-name "~/.authinfo.gpg")
	 smtpmail-default-smtp-server "smtp.gmail.com"
	 smtpmail-smtp-server "smtp.gmail.com"
	 smtpmail-smtp-service 587
	 smtpmail-debug-info t)

	;; don't keep message buffers around
	(setq message-kill-buffer-on-exit t)

	;; https://github.com/bandresen/mu4e-send-delay

	(add-to-list 'load-path "~/.emacs.d/elpa/mu4e-send-delay")

	;; Recommended settings

        ;; Assigning the scheduled enabled send to C-c C-c

	(add-hook 'mu4e-main-mode-hook (lambda ()
	(define-key mu4e-compose-mode-map
	  (kbd "C-c C-c") 'mu4e-send-delay-send-and-exit)))

      ;; Now you can C-c C-c every mail
      ;; Defaults

      ;; mu4e-send-delay-default-delay is set to “3m”
      ;; mu4e-send-delay-timer is set to every 2 minutes
      ;; mu4e-send-delay-include-header-in-draft is true
      ;; mu4e-send-strip-header-before-send is true

      (setq mu4e-org-contacts-file  "~/org~/contacts.org") 

      (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines -1)))

      ;; I want my format=flowed thank you very much
      ;; mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
      ;; each paragraph is a single long line; at sending, emacs will add the
      ;; special line continuation characters.
      (setq mu4e-compose-format-flowed t)

      ;; every new email composition gets its own frame! (window)
      (setq mu4e-compose-in-new-frame t)

      ;; give me ISO(ish) format date-time stamps in the header list
      (setq mu4e-headers-date-format "%d-%m-%Y %H:%M")

      ;; show full addresses in view message (instead of just names)
      ;; toggle per name with M-RET
      (setq mu4e-view-show-addresses 't)

#+END_SRC

** my-save-word

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "<f5>") 'my-save-word)
       (defun my-save-word ()
      (interactive)
      (let ((current-location (point))
	     (word (flyspell-get-word)))
	(when (consp word)    
	  (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

#+END_SRC

** oauth2 

#+BEGIN_SRC emacs-lisp

  ;;  (straight-use-package 'oauth2)

  ;;    (use-package oauth2 
  ;;	   :config
  ;;	(eval-when-compile
  ;;	     (defvar oauth--token-data ())))

#+END_SRC

** org-agenda

#+BEGIN_SRC emacs-lisp

;; (require 'org)
;;       (setq org-directory "~/~org/")
;;       (define-key global-map "\C-cl" 'org-store-link)
;;       (define-key global-map "\C-ca" 'org-agenda)
;;       (setq org-log-done t)

(setq org-agenda-files (list "~/org~/appointments.org"
			     "~/org~/home.org"
			     "~/org~/studies.org"
			     "~/org~/work.org"))

#+END_SRC

** org-brain

#+BEGIN_SRC emacs-lisp

      (defun org-brain-insert-resource-icon (link)
	"Insert an icon, based on content of org-mode LINK."
	(insert (format "%s "
			(cond ((string-prefix-p "http" link)
			       (cond ((string-match "wikipedia\\.org" link)
				      (all-the-icons-faicon "wikipedia-w"))
				     ((string-match "github\\.com" link)
				      (all-the-icons-octicon "mark-github"))
				     ((string-match "vimeo\\.com" link)
				      (all-the-icons-faicon "vimeo"))
				     ((string-match "youtube\\.com" link)
				      (all-the-icons-faicon "youtube"))
				     (t
				      (all-the-icons-faicon "globe"))))
			      ((string-prefix-p "brain:" link)
			       (all-the-icons-fileicon "brain"))
			      (t
			       (all-the-icons-icon-for-file link))))))

      (add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)

  (straight-use-package 'org-brain)
    (setq org-brain-path "~/org~/brain")

    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    (setq org-id-track-globally t)
    (setq org-brain-file-entries-use-title nil)
    (setq org-id-locations-file "~/org~/brain/.org-id-locations")
    ;; (push '("b" "Brain" plain (function org-brain-goto-end)
    ;;     "* %i%?")
    ;; 	   org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12)

#+END_SRC

** org-capture with w3m or eww 

#+BEGIN_SRC emacs-lisp

;; org-eww and org-w3m should be in your org distribution, but see
;; note below on patch level of org-eww.

(require 'org-eww)
(require 'org-w3m)
(defvar org-website-page-archive-file "~/org~/capture.org")
(defun org-website-clipper ()
  "When capturing a website page, go to the right place in capture file,
   but do sneaky things. Because it's a w3m or eww page, we go
   ahead and insert the fixed-up page content, as I don't see a
   good way to do that from an org-capture template alone. Requires
   Emacs 25 and the 2017-02-12 or later patched version of org-eww.el."
 (interactive)

  ;; Check for acceptable major mode (w3m or eww) and set up a couple of
  ;; browser specific values. Error if unknown mode.

  (cond
   ((eq major-mode 'w3m-mode)
     (org-w3m-copy-for-org-mode))
   ((eq major-mode 'eww-mode)
     (org-eww-copy-for-org-mode))
   (t
     (error "Not valid -- must be in w3m or eww mode")))

  ;; Check if we have a full path to the archive file. 
  ;; Create any missing directories.

  (unless (file-exists-p org-website-page-archive-file)
    (let ((dir (file-name-directory org-website-page-archive-file)))
      (unless (file-exists-p dir)
	(make-directory dir))))

  ;; Open the archive file and yank in the content.
  ;; Headers are fixed up later by org-capture.

  (find-file org-website-page-archive-file)
  (goto-char (point-max))
  ;; Leave a blank line for org-capture to fill in
  ;; with a timestamp, URL, etc.
  (insert "\n\n")
  ;; Insert the web content but keep our place.
  (save-excursion (yank))
  ;; Don't keep the page info on the kill ring.
  ;; Also fix the yank pointer.
  (setq kill-ring (cdr kill-ring))
  (setq kill-ring-yank-pointer kill-ring)
  ;; Final repositioning.
  (forward-line -1))

#+END_SRC

** Org-cliplink

#+BEGIN_SRC emacs-lisp

  (use-package org-cliplink
   :straight t)

  (defun org-brain-cliplink-resource ()
    "Add a URL from the clipboard as an org-brain resource.
  Suggest the URL title as a description for resource."
    (interactive)
    (let ((url (org-cliplink-clipboard-content)))
      (org-brain-add-resource
       url
       (org-cliplink-retrieve-title-synchronously url)
       t)))

  (global-set-key (kbd "C-x p i") 'org-cliplink)

  ;; (define-key org-brain-visualize-mode-map (kbd "L") #'org-brain-cliplink-resource)

#+END_SRC

** origami

#+BEGIN_SRC emacs-lisp

;; (use-package origami
;; :straight t)

#+END_SRC

** ascii art to unicode

#+BEGIN_SRC emacs-lisp

(defface aa2u-face '((t . nil))
  "Face for aa2u box drawing characters")
(advice-add #'aa2u-1c :filter-return
            (lambda (str) (propertize str 'face 'aa2u-face)))
(defun aa2u-org-brain-buffer ()
  (let ((inhibit-read-only t))
    (make-local-variable 'face-remapping-alist)
    (add-to-list 'face-remapping-alist
                 '(aa2u-face . org-brain-wires))
    (ignore-errors (aa2u (point-min) (point-max)))))
(with-eval-after-load 'org-brain
  (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer))

#+END_SRC

** org-journal 

#+BEGIN_SRC emacs-lisp

;; https://github.com/bastibe/org-journal

(use-package org-journal
 :ensure t)

    (customize-set-variable 'org-journal-dir "~/org~/journal/")
    (customize-set-variable 'org-journal-date-format "%A, %d %B %Y")

    (customize-set-variable 'org-journal-enable-agenda-integration t)
    (customize-set-variable 'org-journal-carryover-items nil)
    (customize-set-variable 'org-journal-enable-agenda-integration t)

(setq org-journal-enable-agenda-integration t
      org-icalendar-store-UID t
      org-icalendar-include-todo "all"
      org-icalendar-combined-agenda-file "~/org~/org-journal.ics")

(global-set-key (kbd "C-c C-v") 'org-journal-search)
(global-set-key (kbd "C-c C-g") 'org-journal-open-next-entry)
(global-set-key (kbd "C-c C-h") 'org-journal-open-previous-entry)
(global-set-key (kbd "C-c j") 'org-journal-new-entry)

#+END_SRC

** org-mac-link

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook (lambda () 
  (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)))

#+END_SRC

** org-protocol

#+BEGIN_SRC emacs-lisp

(require 'org-protocol)

#+END_SRC

** orca

#+BEGIN_SRC emacs-lisp

;;    (require 'orca)

    (setq orca-handler-list
      '((orca-handler-match-url
	 "https://www.reddit.com/emacs/"
	 "~/Dropbox/org/wiki/emacs.org"
	 "Reddit")
	(orca-handler-match-url
	 "https://emacs.stackexchange.com/"
	 "~/Dropbox/org/wiki/emacs.org"
	 "\\* Questions")
	(orca-handler-current-buffer
	 "\\* Tasks")
	(orca-handler-file
	 "~/Dropbox/org/ent.org"
	 "\\* Articles")))

    (defcustom orca-handler-list
  ;; ...
  :type '(repeat
          (choice
           (list
            :tag "Current buffer"
            (const orca-handler-current-buffer)
            (string :tag "Heading"))
           (list
            :tag "URL matching regex"
            (const orca-handler-match-url)
            (string :tag "URL")
            (string :tag "File")
            (string :tag "Heading"))
           (list
            :tag "Default"
            (const orca-handler-file)
            (string :tag "File")
            (string :tag "Heading")))))

#+END_SRC

** epresent

#+BEGIN_SRC emacs-lisp

(use-package epresent
 :straight t)

#+END_SRC

** org-present

#+BEGIN_SRC emacs-lisp

(use-package org-present
 :straight t
 :config
  (setq org-present-text-scale 15)
  (add-hook 'org-present-mode-hook
  (defun org-present/start ()
  (org-present-big)
  (org-present-read-only)))
  (add-hook 'org-present-mode-quit-hook
  (defun org-present/start ()
  (org-present-small)
  (org-present-read-write))))

#+END_SRC

** org-present-remote

#+BEGIN_SRC emacs-lisp

(use-package org-present-remote
 :straight t)

(use-package fakir
 :straight t)

#+END_SRC

** emacs-reveal

#+BEGIN_SRC emacs-lisp

   (add-to-list 'load-path "/home/vagner/.emacs.d/elpa/emacs-reveal")

;; (setq oer-reveal-plugins nil)
;; (setq oer-reveal-plugins t)

#+END_SRC

** org-reveal

#+BEGIN_SRC emacs-lisp

;; Note: give the ABSOLUTE PATH to reveal.js
;; Otherwise it will not work

;; this work only with internet connection
;; (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
;; (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")

;; this work without internet connection
;; (setq org-reveal-root "file:/home/vagner/reveal-slides/reveal.js")

;; if it does not load, do:
;; Alt-x load-library RET ox-reveal

 (use-package ox-reveal
  :straight t
  :after org
  :custom
  (org-reveal-root "file:/home/vagner/reveal-slides/reveal.js"))

 (use-package htmlize
  :straight t
  :after ox-reveal
  :config
  (setq org-reveal-hlevel 2)
  (setq org-reveal-mathjax t))

    ;; To load Org-reveal, type “Alt-x load-library”, then type “ox-reveal”.
    ;; ~/reveal-slides/reveal.js$ npm start - you have to start the server
    ;; for viewing your slides and using the remote control
    ;; Now you can export this manual into Reveal.js presentation by typing “C-c C-e R B”.
    ;; Open the generated “Readme.html” in your browser and enjoy the cool slides.

#+END_SRC

** org-re-reveal

#+BEGIN_SRC emacs-lisp

(use-package org-re-reveal 
   :straight t
   :config
     (setq org-re-reveal-root "file:/home/vagner/reveal-slides/reveal.js")
     (require 'org-re-reveal)
;;     (setq oer-reveal-plugins t)
     (setq org-re-reveal-hlevel 2))

#+END_SRC

** org-re-reveal-ref

#+BEGIN_SRC emacs-lisp

(use-package org-re-reveal-ref
 :straight t
 :config
   (require 'org-re-reveal-ref))

#+END_SRC

** oer-reveal

#+BEGIN_SRC emacs-lisp

(use-package oer-reveal
 :straight t
 :config
   (require 'oer-reveal) 
   (setq oer-reveal-plugins t))

#+END_SRC

** ox-spectacle

#+BEGIN_SRC emacs-lisp

(use-package ox-spectacle
      :straight t)

#+END_SRC

** org-tree-slide

#+BEGIN_SRC emacs-lisp

(use-package org-tree-slide
     :straight t
     :config
     (add-hook 'org-tree-slide-mode-hook
	       (lambda ()
		 (if org-tree-slide-mode
		     ;; When mode is enabled
		     (progn (setq wolfe--enable-transient-map t)
			    (wolfe/org-tree-set-transient-map))
		   ;; When mode is disabled
		   (setq wolfe--enable-transient-map nil)))))

(defun wolfe/org-tree-set-transient-map ()
     (interactive)
     (if wolfe--enable-transient-map
	 (let ((map (make-sparse-keymap)))
	   (define-key map (kbd "<right>") 'org-tree-slide-move-next-tree)
	   (define-key map (kbd "<left>")  'org-tree-slide-move-previous-tree)
	   (define-key map (kbd "<up>")    'org-tree-slide-content)
	   (define-key map (kbd "<down>")  'org-tree-slide-display-header-toggle)
	   (set-transient-map map nil 'wolfe/org-tree-set-transient-map))
       (makeunbound wolfe--enable-transient-map)))

#+END_SRC

** ox-pandoc

#+BEGIN_SRC emacs-lisp

(use-package ox-pandoc 
	   :straight t)

#+END_SRC

** persistent-soft

#+BEGIN_SRC emacs-lisp

(use-package persistent-soft
  :straight t
  :config
(persistent-soft-store 'hundred 100 "mydatastore")
(persistent-soft-fetch 'hundred "mydatastore")    ; 100
(persistent-soft-fetch 'thousand "mydatastore"))   ; nil

;; quit and restart Emacs

(persistent-soft-fetch 'hundred "mydatastore")    ; 100

#+END_SRC

** poly-markdown

#+BEGIN_SRC emacs-lisp

(use-package poly-markdown
  :straight t
  :config 
(add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode)))

#+END_SRC

** poetry

#+BEGIN_SRC emacs-lisp

;; It is not the same poetry package for writing poetry
;; it is an interface for python poetry package tool

   (use-package poetry
    :straight t)

;; This is the poetry-rhyme for writing poetry
;; you need to install the rhyme cli 
;; you have to install "~/Downloand/rhyme_4_poetry.el

(add-to-list 'load-path "~/.emacs.d/local-repo/poetry")
(require 'poetry)

;; (load-library "~/.emacs.d/local-repo/poetry.elc")

#+END_SRC

** perspective

#+BEGIN_SRC emacs-lisp

 (use-package perspective
   :straight t)

#+END_SRC

** powerline

#+BEGIN_SRC emacs-lisp

   (use-package powerline 
    :straight t)

(require 'powerline)
(powerline-default-theme)

  ;; (powerline-center-theme)
  ;; (setq powerline-center-default-separator 'wave))

#+END_SRC

** prolog

#+BEGIN_SRC emacs-lisp

(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)
(setq prolog-system 'swi)
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
				("\\.m$" . mercury-mode))
			       auto-mode-alist))

#+END_SRC

** quelpa

 #+BEGIN_SRC emacs-lisp


   ;; (use-package quelpa-use-package
   ;;     :straight t
   ;;     :init
   ;;    (setq quelpa-update-melpa-p nil))

 #+END_SRC
 
** re-builder

#+BEGIN_SRC emacs-lisp

   (use-package re-builder
    :straight t
    :config
    (setq reb-re-syntax 'string))

#+END_SRC

** slime swank

#+BEGIN_SRC emacs-lisp

  ;; ;; Set your lisp system and, optionally, some contribs

  ;; ;; (setq inferior-lisp-program "/usr/bin/sbcl")
  ;; ;; Install sbcl from github sources and NOT with apt
  ;;     (setq inferior-lisp-program "/usr/local/bin/sbcl")

  ;;   ;; update this path to the correct location.

  ;;   ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa-src/slime-2.23/")

  ;;   ;; (add-to-list 'load-path "~/.emacs.d/elpa/slime-repl-ansi-color-20190426.1414/")

  ;;   (add-to-list 'load-path "~/.emacs.d/straight/repos/slime/")

  ;;   (require 'slime-autoloads)

  ;;   (defun cliki:start-slime ()
  ;; 	(unless (slime-connected-p)
  ;; 	  (save-excursion (slime))))
  ;;   (add-hook 'slime-mode-hook 'cliki:start-slime)

  ;;   (eval-after-load "slime"
  ;;     '(progn
  ;;       ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa-src/slime-3.23/contrib/")
  ;;       ;; (add-to-list 'load-path "~/.emacs.d/elpa/slime-20190319.930/contrib")
  ;;       (add-to-list 'load-path "~/.emacs.d/straight/build/slime/contrib/")
  ;;        (slime-setup '(slime-fancy slime-banner))
  ;;       (setq slime-complete-symbol*-fancy t)
  ;;       (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)))

  ;;   (require 'slime-autoloads)
  ;;   (setq slime-contribs '(slime-repl))

(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'company-mode)

(use-package slime
  :straight t
  :load-path
   ("~/.emacs.d/straight/repos/slime/")
  :config
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy)))
  (require 'slime-autoloads)

(use-package slime-company
  :straight t
  :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))

#+END_SRC

** smex

   if you enable this, you have to disable the helm global-key that is binded
   to "M-x" as well

#+BEGIN_SRC emacs-lisp

;;    (global-set-key (kbd "M-x") 'smex)
;;    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

#+END_SRC

** cyber-filelist

#+BEGIN_SRC emacs-lisp

(defvar cyber-filelist nil "alist for files i need to open frequently. Key is a short abbrev string, Value is file path string.")

(setq cyber-filelist
      '(
	("init.el" . "~/.emacs.d/init.el" )
	("init.org" . "~/.emacs.d/init.org")
	("dotfiles" . "~/.dotfiles/")
	("Documents" . "~/Documents/" )
	("org~" . "~/org~/" )
	("Download" . "~/Downloads/" )
	("Music" . "~/Music/")
	("Pictures" . "~/Pictures/" )
	;; more here
	) )

(defun cyber-open-file-fast ()
  "Prompt to open a file from `cyber-filelist'.
URL 'http://ergoemacs.org/emacs/emacs_hotkey_open_file_fast.html'
Version 2015-04-23"
  (interactive)
  (let ((ξabbrevCode
	 (ido-completing-read "Open:" (mapcar (lambda (ξx) (car ξx)) cyber-filelist))))
    (find-file (cdr (assoc ξabbrevCode cyber-filelist)))))

#+END_SRC

** TODO scheme 

#+BEGIN_SRC emacs-lisp

#+END_SRC

** shackle-rules

#+BEGIN_SRC emacs-lisp

  ;; (setq shackle-rules
  ;;      '(((svg-2048-mode circe-query-mode) :same t)
  ;;        ("*Help*" :align t :select t)
  ;;        ("\\`\\*helm.*?\\*\\'" :regexp t :align t)
  ;;        ((compilation-mode "\\`\\*firestarter\\*\\'"
  ;; 	 "\\`\\*magit-diff: .*?\\'") :regexp t :noselect t)
  ;;        ("\\`\\*cider-repl .*" :regexp t :align t :size 0.2)
  ;;        ((inferior-scheme-mode "*shell*" "*eshell*") :popup t))
  ;;       shackle-default-rule '(:select t)
  ;;       shackle-default-size 0.4
  ;;       shackle-inhibit-window-quit-on-same-windows t)

#+END_SRC

** synonyms and thesaurus

you have to comment 'disabled' keyword to use this package

#+BEGIN_SRC emacs-lisp

(use-package synonyms
  :straight t
  :disabled
  :init
  :config
  (setq synonyms-file "~/thesaurus/mthesaur.txt")
  (setq synonyms-file "~/thesaurus/brazilian-synonyms.txt")
  (setq synonyms-cache-file "~/thesaurus/thes.cache")
  (global-set-key (kbd "C-*") 'synonyms))

;;  (evil-leader/set-key "sy" 'synonyms))

(use-package powerthesaurus
  :straight t
  :config
  (defun powerthesaurus-lookup-word-at-point ()
    "Find the word at point synonyms at powerthesaurus.org."
    (interactive)
    (if (region-active-p)
	(powerthesaurus-lookup-word (region-beginning) (region-end))
      (save-mark-and-excursion
	(when (not (looking-at "\\<"))
	  (backward-word))
	(set-mark (point))
	(forward-word)
	(activate-mark)
	(powerthesaurus-lookup-word (region-beginning) (region-end)))))
    (global-set-key (kbd "C-M-x") 'powerthesaurus-lookup-word-at-point)
    (global-set-key (kbd "C-M-y") 'powerthesaurus-lookup-word))

;;  (evil-leader/set-key "s" 'powerthesaurus-lookup-word-at-point)
;;  (evil-leader/set-key "S" 'powerthesaurus-lookup-word))

#+END_SRC

** tramp

#+BEGIN_SRC emacs-lisp
  
 (use-package tramp
       :init
       (setq tramp-default-method "ssh")
       (setq password-cache-expiry nil)
       :config

       (add-to-list 'tramp-remote-path "~/"))

#+END_SRC

** treemacs

#+BEGIN_SRC emacs-lisp

(use-package treemacs
  :straight t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :straight t)

(use-package treemacs-projectile
  :after treemacs projectile
  :straight t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :straight t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :straight t)

#+END_SRC

** trident - lisp2javascript

#+BEGIN_SRC emacs-lisp

  ;; (add-to-list 'auto-mode-alist (cons "\\.paren\\'" 'lisp-mode))
  ;; (add-hook 'lisp-mode-hook
  ;; 	  #'(lambda ()
  ;; 	      (when (and buffer-file-name
  ;; 			 (string-match-p "\\.paren\\>" buffer-file-name))
  ;; 		(unless (slime-connected-p)
  ;; 		  (save-excursion (slime)))
  ;; 		(trident-mode +1))))

  ;;     ;; (use-package :parenscript)

  ;;     ;; issue this command in the REPl:
  ;;     ;; (ql:quickload :parenscript)
  ;;     ;; Then you can use "trident-expand-buffer" 
  ;;     ;; etc...

#+END_SRC

** Unicode-fonts

#+BEGIN_SRC emacs-lisp

(use-package unicode-fonts
 :straight t
 :config
 (unicode-fonts-setup))

#+END_SRC

** visual-regexp-steroids

;; you have to issue: Ctrl-x m RET vr/  to see the command
;; if the files are not already in the load path

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/elpa/visual-regexp-20170301.116/")
(add-to-list 'load-path "~/.emacs.d/elpa/visual-regexp-steroids-20170222.253")
(require 'visual-regexp)
(require 'visual-regexp-steroids)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; if you use multiple-cursors, this is for you:
(define-key global-map (kbd "C-c m") 'vr/mc-mark)
;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
(define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
(define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s

#+END_SRC

** wanderlust email-client

#+BEGIN_SRC emacs-lisp

(autoload 'wl "wl" "Wanderlust" t)

;; apt install bbdb 


;; (autoload 'wl "wl" "Wanderlust" t)

;;; bbbd for managing address book on wanderlust
;;; https://emacs-fu.blogspot.com.br/2009/08/managing-e-mail-addresses-with-bbdb.html

(setq bbdb-file "~/.emacs.d/bbdb")           ;; keep ~/ clean; set before loading
;; (bbdb-initialize)
(setq 
    bbdb-offer-save 1                        ;; 1 means save-without-asking

bbdb-use-pop-up t                        ;; allow popups for addresses
;; bbdb-electric-p t                        ;; be disposable with SPC
bbdb-popup-target-lines  1               ;; very small

bbdb-dwim-net-address-allow-redundancy t ;; always use full name
bbdb-quiet-about-name-mismatches 2       ;; show name-mismatches 2 secs

bbdb-always-add-address t                ;; add new addresses to existing...
					 ;; ...contacts automatically
bbdb-canonicalize-redundant-nets-p t     ;; x@foo.bar.cx => x@bar.cx

bbdb-completion-type nil                 ;; complete on anything

bbdb-complete-name-allow-cycling t       ;; cycle through matches
					 ;; this only works partially

bbbd-message-caching-enabled t           ;; be fast
bbdb-use-alternate-names t               ;; use AKA

bbdb-elided-display t                    ;; single-line addresses

;; auto-create addresses from mail
bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook   
bbdb-ignore-some-messages-alist ;; don't ask about fake addresses
;; NOTE: there can be only one entry per header (such as To, From)
;; http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html

'(( "From" . "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter"))
)

 (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)

#+END_SRC

** winner-mode

#+BEGIN_SRC emacs-lisp

(when (fboundp 'winner-mode)
     (winner-mode 1))

#+END_SRC

** youtube-dl

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/local-repo/youtube-dl-emacs")
(require 'youtube-dl)

#+END_SRC

** elisp

#+BEGIN_SRC emacs-lisp

;;    (use-package elisp
;;      :hook
;;      (after-save . check-parens)
;;      )

    (use-package highlight-defined
      :straight t
      :custom
      (highlight-defined-face-use-itself t)
      :hook
      (emacs-lisp-mode . highlight-defined-mode))

    (use-package highlight-quoted
      :straight t
      :hook
      (emacs-lisp-mode . highlight-quoted-mode))

    (use-package eros
      :straight t
      :hook
      (emacs-lisp-mode . eros-mode))

    (use-package suggest
      :straight t
      :defer t)

    (use-package ipretty
      :straight t
      :config
      (ipretty-mode 1))

    (use-package nameless
      :straight t
      :hook
      (emacs-lisp-mode .  nameless-mode)
      :custom
      (nameless-global-aliases '())
      (nameless-private-prefix t))

    ;; bind-key can't bind to keymaps
    (use-package erefactor
      :straight t
      :defer t)

    (use-package flycheck-package
      :straight t
      :defer t
      :after flycheck
      (flycheck-package-setup))

  ;; If emacs does not work because of 
  ;; Dash package complaint, install it with
  ;; apt install dash-el - then install it with
  ;; Alt-x package-reinstall RET dash RET and remove 
  ;; it again with "apt purge dash-el" 

 (use-package dash
   :straight t
   :custom
   (dash-enable-fontlock t))

#+END_SRC

** networking 

#+BEGIN_SRC emacs-lisp

(use-package net-utils
  :straight t
  :bind
  (:map mode-specific-map
	:prefix-map net-utils-prefix-map
	:prefix "n"
	("p" . ping)
	("i" . ifconfig)
	("w" . iwconfig)
	("n" . netstat)
	("p" . ping)
	("a" . arp)
	("r" . route)
	("h" . nslookup-host)
	("d" . dig)
	("s" . smbclient)
	("t" . traceroute)))

#+END_SRC

** save-place 

;; Keep point position between re-opening files with recentf/ido  

#+BEGIN_SRC emacs-lisp

   (require 'saveplace)
   (save-place-mode 1)

#+END_SRC

** shell-pop

#+BEGIN_SRC emacs-lisp

(use-package shell-pop
:straight t
  :bind (("C-t" . shell-pop))
  :config
  (setq shell-pop-shell-type (quote ("ehell" "eshell" (lambda nil (eshell)))))
  (setq shell-pop-term-shell "eshell")
  ;; need to do this manually or not picked up by `shell-pop'
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))

#+END_SRC

** simple-mpc 

#+BEGIN_SRC emacs-lisp

(use-package simple-mpc
 :straight t)

#+END_SRC

** command-log 

#+BEGIN_SRC emacs-lisp

  (use-package command-log-mode
     :ensure t
     :commands (command-log-mode global-command-log-mode)
     :bind ("C-c o" . clm/toggle-command-log-buffer))

#+END_SRC

** circe 

#+BEGIN_SRC emacs-lisp

  (use-package circe
      :straight t
      :bind ("<S-f2>" . circe-init))

      ;; (use-package sauron-circe
      ;; straight t quelpa
      ;; :quelpa (sauron-circe :repo "seblemaguer/sauron-circe" :fetcher github)
      ;; :after sauron
      ;; :config
      ;; (sauron-circe-start))

  (setq auth-sources '("~/.authinfo.gpg"))

  (defun my-fetch-password (&rest params)
    (require 'auth-source)
    (let ((match (car (apply 'auth-source-search params))))
      (if match
	  (let ((secret (plist-get match :secret)))
	    (if (functionp secret)
		(funcall secret)
	      secret))
	(error "Password not found for %S" params))))

  (defun my-nickserv-password (server)
    (my-fetch-password :login "" :machine "irc.freenode.net"))

  (setq circe-network-options
      '(("Freenode"
	 :nick ""

       ;;  :channels ("#alsa" "#bash" "#badrock" "#c" "#clnoobs" "#clojure" "#clojure-beginners" "#clschool" "#coreboot" "#debian" "#debian-offtopic" "#devuan" "#emacs" "#emacs-es" "#erc" "#evil-mode " "#filmsbykris" "#freebsd" "#freedos" "#git" "#gitlab" "#guix" "#hardware" "#haskell" "#i3" "#javascript" "#julia" "#latex" "#libreoffice" "#lisp" "#lisp-es" "#lispcafe" "#lispweb" "#maria" "#math" "#matrix"  "#maxima" "#mpd" "#mysql" "#neomutt" "#oauth" "#org-mode" "#pcbsd" "#physics" "#plasma" "#prolog" "#python" "#qtox" "#ranger" "#regex" "#ring" "#sbcl" "#scala" "#slime" "#startups" "#sword" "#tmux" "#trueos" "#vim" "#vimus" "#wanderlust" "#weechat" "#xfce" "#xiphos")

	 :nickserv-password my-nickserv-password)))

#+END_SRC

** emms-get-lyrics 

#+BEGIN_SRC emacs-lisp

(use-package emms
 :straight t)

(add-to-list 'load-path "~/.emacs.d/local-repo/emms-get-lyrics/")
(require 'emms-get-lyrics)

#+END_SRC

** emms-player 

#+BEGIN_SRC emacs-lisp

(use-package emms-player-simple-mpv
   :straight t
   :after emms
   :config

  ;; Subpackages
;;  (use-package emms-player-simple-mpv-e.g.time-display)
;;  (use-package emms-player-simple-mpv-e.g.playlist-fname)
;;  (use-package emms-player-simple-mpv-e.g.hydra)
;;  (use-package emms-player-simple-mpv)
;;  (use-package emms-player-simple-mpv-control-functions)

  (define-emms-simple-player-mpv my-mpv '(file url streamlist playlist)
    (concat "\\`\\(http[s]?\\|mms\\)://\\|"
	     (apply #'emms-player-simple-regexp
		    "aac" "pls" "m3u"
		    emms-player-base-format-list))
    "mpv" "--no-terminal" "--force-window=no" "--audio-display=no")

  (emms-player-simple-mpv-add-to-converters
   'emms-player-my-mpv "." '(playlist)
   (lambda (track-name) (format "--playlist=%s" track-name)))

  (add-to-list 'emms-player-list 'emms-player-my-mpv))

  (use-package emms-mark-ext :straight t)

#+END_SRC

** memacs

#+BEGIN_SRC emacs-lisp

#+END_SRC

** genealogy 

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/local-repo/gedcom")

(autoload 'gedcom-mode "gedcom")
(setq auto-mode-alist (cons '("\\.ged$" . gedcom-mode) auto-mode-alist))

#+END_SRC

** org-chef 

#+BEGIN_SRC emacs-lisp

(use-package org-chef
  :straight t)

#+END_SRC

** blog apps

*** Ox-hugo

#+BEGIN_SRC emacs-lisp

(use-package ox-hugo
  :straight t   
  :after ox)

 (require 'ox-hugo)
 (require 'org-hugo-auto-export-mode)

;;  (use-package org-capture
;;    straight t nil
;;    :config
;;     (defun org-hugo-new-subtree-post-capture-template ()
;; ;;      "Returns `org-capture' template string for new Hugo post.
;; ;;    See `org-capture-templates' for more information."

;;      (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
;; 	 (fname (org-hugo-slug title)))
;;        (mapconcat #'identity
;; 	       `(,(concat "* TODO " title)
;; 		 ":PROPERTIES:"
;; 		 ,(concat ":EXPORT_HUGO_BUNDLE: " fname)
;; 		 ":EXPORT_FILE_NAME: index"
;; 		 ":END:"
;; 		 "%?\n")                ;Place the cursor here finally
;; 	       "\n")))
;;    (add-to-list 'org-capture-templates
;; 	     '("o"                ;`org-capture' binding + o
;; 	       "Post"
;; 	       entry
;; 	       ;; It is assumed that below file is present in `org-directory'
;; 	       ;; and that it has an "Ideas" heading. It can even be a
;; 	       ;; symlink pointing to the actual location of all-posts.org!
;; 	       (file+datetree (concat org-directory "~/blog/content/posts/my-post.org")
;; "* TODO %^{Description}  %^g\n%?\nAdded: %U")
;; 	       (function org-hugo-new-subtree-post-capture-template))))

#+END_SRC

*** easy-hugo 

#+BEGIN_SRC emacs-lisp

;; (use-package easy-hugo
;;   :custom
;;   (easy-hugo-basedir "~/Personal/devel/zzamboni.org/zzamboni.org/")
;;   (easy-hugo-url "http://zzamboni.org/")
;;   (easy-hugo-previewtime "300")
;;   ;;(define-key global-map (kbd "C-c C-e") 'easy-hugo)
;;   )

#+END_SRC

** org-refile

#+BEGIN_SRC emacs-lisp

(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling

#+END_SRC

** org-capture

#+BEGIN_SRC emacs-lisp

  ;; https://cestlaz.github.io/posts/using-emacs-24-capture-2/
    ;; This function pops up Capture templates options in a new emacs frame
    ;; You have to bound it to a desktop key to make it pops up wherever you 
    ;; need 

    (defun org-capture-popup ()
      "Create a new frame and run `org-capture'."
      (interactive)
      (select-frame (make-frame '((org-capture-popup . t))))
      (delete-other-windows)
      (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
	(condition-case err
	    (org-capture)
	  ;; `org-capture' signals (error "Abort") when "q" is typed, so
	  ;; delete the newly-created frame in this scenario.
	  (error (when (equal err '(error "Abort"))
		   (delete-frame))))))

    (defadvice org-capture-finalize (after my-delete-capture-frame activate)
      "Delete the frame after `capture-finalize'."
      (when (frame-parameter nil 'org-capture-popup)
	(delete-frame)))

    (defadvice org-capture-destroy (after my-delete-capture-frame activate)
      "Delete the frame after `capture-destroy'."
      (when (frame-parameter nil 'org-capture-popup)
	(delete-frame)))

  ;; Capture templates start from here

	(global-set-key (kbd "C-c c") 'org-capture)

	(setq org-capture-templates

	  '(

    ("a" "Appointments" entry (file+headline "~/org~/my-appointments.org" "Calendar")
     "* APPT %^{Description} %^g\n%?\nAdded: %U")

       ("b" "Books" entry (file+headline "~/org~/books.org" "books to read")
     "* TODO %\\1 - %\\2%?\n%U\n:PROPERTIES:\n:NAME: %^{NAME}\n:TITLE: %^{TITLE}\n:END:\n")

      ;; you have to set up a template for this 
      ;; ("c" "Contacts" entry (file+headline "~/org~/contacts.org" "Contacts"), my/org-contacts-template :empty-lines 1)

       ("d" "Dreams" entry (file+datetree "~/org~/my-dreams.org") "* %^{Description} %^g %?\nAdded: %U")

       ("e" "Cookbook" entry (file "~/org~/cookbook.org")
	   "%(org-chef-get-recipe-from-url)"
	   :empty-lines 1)

       ("f" "Manual Cookbook" entry (file "~/org~/cookbook.org")
	   "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")

       ("j" "Journal" entry (file+datetree "~/org~/journal.org") "* %?\nEntered on %U\n  %i\n  %a")

       ("k" "Cliplink capture" entry (file "")
            "* TODO %(org-cliplink-capture) \n  SCHEDULED: %t\n" :empty-lines 1)

       ("l" "Log Time" entry (file+datetree "~/org~/timelog.org") "** %U - %^{Activity}  :TIME:")

       ("m" "Brain" entry (function org-brain-goto-end) "* %i%?" :empty-lines 1)

       ("n" "Notes" entry (file+datetree "~/org~/my-notes.org") "* %^{Description} %^g %?\nAdded: %U")

       ;; you have to set hugo up for this
       ;; ("o" "Posts" (file+datetree "~/org~/my-post.org") "* TODO %^{Description} %^g\n%?\nAdded: %U")

       ("t" "Tasks" entry (file+datetree "~/org~/tasks.org")
     "* TODO %^{Description} %^g\n%?\nAdded: %U")

       ;; example is in:
       ;; ~/.emacs.d/elpa/org-plus-contrib-20190520/org-contacts.el
       ("c" "Contacts" entry (file "~/org~/contacts.org")
	  "* %(org-contacts-template-name)

       :PROPERTIES:
       :WEBADDRESS:
       :EMAIL: 
       :PHONE:
       :FAX:
       :MOBILE:
       :BIRTHDAY:
       :ADDRESS:
       :NAME:
       :NICKNAME:
       :ALIAS:
       :ICON:
       :IGNORE:
       :NOTE:
       :END:")

       ("w" "Website" plain (function org-website-clipper) "* %a\n%T\n" :immediate-finish t)))

#+END_SRC

** hyperbole

#+BEGIN_SRC emacs-lisp

  ;; (unless (package-installed-p 'hyperbole)
  ;;   (package-refresh-contents)	
  ;;   (package-install 'hyperbole))
  ;; (require 'hyperbole)

#+END_SRC

** gtklp printer app

#+BEGIN_SRC emacs-lisp

(setq lpr-command "gtklp")
(setq ps-lpr-command "gtklp")

#+END_SRC

** Emacs server

#+BEGIN_SRC emacs-lisp

(load "server")
 (unless (server-running-p)
 (server-start))

#+END_SRC

** epg-gpg2

#+BEGIN_SRC emacs-lisp

(setq epg-gpg-program "usr/bin/gpg2")
(setq epa-file t)
(epa-file-enable)
(setq epa-file-select-keys nil)
(setq epa-pinentry-mode 'loopback)
(setq pinentry-start t)

#+END_SRC

** bbdb-database

#+BEGIN_SRC emacs-lisp

    (setq bbdb-north-american-phone-numbers-p nil)
    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
    (setq bbdb-file "~/.emacs.d/bbdb")
    (setq bbdb-send-mail-style 'gnus)
    (setq bbdb-complete-name-full-completion t)
    (setq bbdb-completion-type 'primary-or-name)
    (setq bbdb-complete-name-allow-cycling t)
    (setq
    bbdb-offer-save 1
    bbdb-use-pop-up t
    bbdb-electric-p t
    bbdb-popup-target-lines  1
    )

#+END_SRC

** ipp printer

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/local-repo/ipp")
(require 'ipp)

#+END_SRC

** linguistic

#+BEGIN_SRC emacs-lisp

(use-package linguistic 
 :straight t)

#+END_SRC

** Org-drill

#+BEGIN_SRC emacs-lisp

(use-package org-drill
  :straight t)

#+END_SRC

** Org-drill-table

 #+BEGIN_SRC emacs-lisp

 (use-package org-drill-table
   :straight t)

 #+END_SRC

** memrise

#+BEGIN_SRC emacs-lisp

  ;; (use-package memrise
  ;;   :quelpa (memrise
  ;; 	   :fetcher github
  ;; 	   :repo "SavchenkoValeriy/memrise.el"))

  ;; (setq memrise-sync-requests t)

#+END_SRC

** gnutls-fix-bug

#+BEGIN_SRC emacs-lisp

;;   (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3/")
;;     (setq gnutls-verify-error t)
;;     (setq tls-checktrust t)

       (toggle-debug-on-error)

#+END_SRC

** emacs-wget 

#+BEGIN_SRC emacs-lisp

;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/emacs-wget")

;; (require 'w3m-wget)
;;   (load "w3m-wget")
;;  (autoload 'wget "wget" "wget interface for Emacs." t)
;;  (autoload 'wget-web-page "wget" "wget interface to download whole web page." t)
;;  (autoload 'w3-wget "w3-wget" "wget interface for Emacs/W3." t)
;;  (setq wget-basic-options (cons "-equiet=off" wget-basic-options))
;;  (setq wget-basic-options (cons "-P." wget-basic-options))
;;  (setq wget-process-buffer nil)
;;  (setq wget-command "/usr/bin/wget")

#+END_SRC

** more niceties

#+BEGIN_SRC emacs-lisp

;; Mouse scrolling
  (setq mouse-wheel-scroll-amount '(1)
	mouse-wheel-progressive-speed nil 
	scroll-conservatively 101
	hscroll-margin 1
	hscroll-step 1
	scroll-preserve-screen-position t) 

;; gtk-tooltipos
      (setq x-gtk-use-system-tooltips nil
	    use-dialog-box nil)

   ;; Desktop mode
   ;; (desktop-save-mode t)

    ;; Save minibuffer history.
    (savehist-mode 1)

    ;; Each file in a new window.
    ;; (setq pop-up-frames t)

  ;; Disk space is cheap. Save lots. (c) Sacha Chua
  ;; Backups

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
	delete-old-versions -1
	version-control t
	vc-make-backup-files t
	auto-save-list-file-prefix "~/.emacs.d/autosave/"
	auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t))
	undo-tree-auto-save-history t
	undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo/")))

  ;; But don't create stupid lockfiles
  (setq create-lockfiles nil)

  ;; History
  (setq savehist-file "~/.emacs.d/history"
	history-length t
	history-delete-duplicates t
	savehist-save-minibuffer-history 1
	savehist-additional-variables
	'(kill-ring
	  search-ring
	  regexp-search-ring)
	recentf-max-saved-items 50)
  (savehist-mode 1)
  (recentf-mode 1)

;; Which-key
;; C-x to access it

    (use-package which-key
     :straight t
     :config
      (which-key-mode t))

#+END_SRC

** better-shell 

#+BEGIN_SRC emacs-lisp

(use-package better-shell
:straight t
:bind (("C-'" . better-shell-shell)
("C-;" . better-shell-remote-open)))

#+END_SRC

** virtualenvwrapper

#+BEGIN_SRC emacs-lisp

(use-package virtualenvwrapper
:straight t
:config
(venv-initialize-interactive-shells)
(venv-initialize-eshell))

#+END_SRC

** time in modeline

#+BEGIN_SRC emacs-lisp

(setq display-time-default-load-average nil)
(setq display-time-interval 1)
(setq display-time-format "%d|%m-%a|%r")
(display-time-mode +1)

#+END_SRC

** toggle-truncate-lines 

truncate-partial-width-windows is a variable defined in ‘C source
code’.
A value of nil means to respect the value of ‘truncate-lines’.
You can customize this variable

#+BEGIN_SRC emacs-lisp

(setq truncate-partial-width-windows 1)
(setq truncate-lines 1)
(global-set-key (kbd "C-x t") 'toggle-truncate-lines)

#+END_SRC

** evil-macro keys

#+BEGIN_SRC emacs-lisp

  ;; (evil-define-key 'normal 'global
  ;;   ;; select the previously pasted text
  ;;   "gp" "`[v`]"
  ;;   ;; run the macro in the q register
  ;;   "Q" "@q")

  ;; (evil-define-key 'visual 'global
  ;;   ;; run macro in the q register on all selected lines
  ;;   "Q" (kbd ":norm @q RET")
  ;;   ;; repeat on all selected lines
  ;;   "." (kbd ":norm . RET"))

  ;; ;; alternative command version
  ;; (defun my-norm@q ()
  ;;   "Apply macro in q register on selected lines."
  ;;   (interactive)
  ;;   (evil-ex-normal (region-beginning) (region-end) "@q"))

  ;;   (evil-define-key 'visual 'global "Q" #'my-norm@q)

#+END_SRC

** TODO emacros

#+BEGIN_SRC emacs-lisp

#+END_SRC 

** zoom-frm for hycontrol

#+BEGIN_SRC emacs-lisp

  ;; (add-to-list 'load-path "~/.emacs.d/local-repo/zoom-frm")
  ;; (require 'zoom-frm)

#+END_SRC

** openwith

#+BEGIN_SRC emacs-lisp

(use-package openwith
 :straight t
 :config
(setq openwith-associations '(("\\.mp4\\'" "smplayer" (file)))))

#+END_SRC

** org-mind-map

#+BEGIN_SRC emacs-lisp

;; (use-package org-mind-map
;;   :init
;;   (require 'ox-org)
;;   :straight t
;;   ;; Uncomment the below if 'ensure-system-packages` is installed
;;   ensure-system-package (gvgen . graphviz)
;;   :config
;;      (setq org-mind-map-engine "dot")    ; Default. Directed Graph
;;   ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
;;   ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
;;      (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
;;   ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
;;   ;; (setq org-mind-map-engine "circo")  ; Circular Layout
;;      )

 (use-package org-mind-map
     :straight t
     :init
     (require 'ox-org))

#+END_SRC

** php-mode 

#+BEGIN_SRC emacs-lisp

(use-package php-mode
    :straight t)

  (use-package ac-php
    :straight t)

(use-package phpunit  
    :straight t
    :config
    (setq phpunit-configuration-file "phpnit.xml")
    (setq phpunit-root-directory "./"))

  (use-package php-auto-yasnippets
    :straight t)

#+END_SRC

** php-ext

#+BEGIN_SRC emacs-lisp

(setq php-ext-path "~/.emacs.d/local-repo/php-ext/")
(load (concat php-ext-path "php-ext.el"))

   ;; (add-to-list 'load-path "~/.emacs.d/local-repo/php-ext")
   ;; (require 'php-ext)

#+END_SRC

** web-mode 

#+BEGIN_SRC emacs-lisp

(use-package web-mode
  :straight t
  :mode
  ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
  "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'")

  :init
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2

        web-mode-enable-auto-pairing t
        web-mode-enable-auto-expanding t
        web-mode-enable-css-colorization t)

  :config
  ;; Template
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\."))
        )

  )

(use-package web-beautify
  :straight t
  :commands (web-beautify-css
             web-beautify-css-buffer
             web-beautify-html
             web-beautify-html-buffer
             web-beautify-js
             web-beautify-js-buffer))

(use-package web-completion-data :straight t)
(use-package web-mode-edit-element :straight t)

#+END_SRC

** impatient-mode

#+BEGIN_SRC emacs-lisp

(use-package impatient-mode 
:straight t)

#+END_SRC

** emmet-mode

#+BEGIN_SRC emacs-lisp

(use-package emmet-mode 
:straight t)

#+END_SRC

** xah modes

#+BEGIN_SRC emacs-lisp

  ;; (dolist (package '(xah-lookup xah-elisp-mode xah-find xah-get-thing xah-math-input xah-reformat-code xah-replace-pairs xahk-mode xah-css-mode))
  ;;  (unless (package-installed-p package)
  ;;    (package-install package))
  ;;    (require package))

;; manipulationg resgisters
;; https://ftp.gnu.org/old-gnu/Manuals/emacs-21.2/html_chapter/emacs_12.html

(defun xah-copy-to-register-1 ()
  "Copy current line or text selection to register 1.
See also: `xah-paste-from-register-1', `copy-to-register'.

URL `http://ergoemacs.org/emacs/elisp_copy-paste_register_1.html'
Version 2017-01-23"
  (interactive)
  (let ($p1 $p2)
    (if (region-active-p)
        (progn (setq $p1 (region-beginning))
               (setq $p2 (region-end)))
      (progn (setq $p1 (line-beginning-position))
             (setq $p2 (line-end-position))))
    (copy-to-register ?1 $p1 $p2)
    (message "Copied to register 1: 「%s」." (buffer-substring-no-properties $p1 $p2))))

(defun xah-paste-from-register-1 ()
  "Paste text from register 1.
See also: `xah-copy-to-register-1', `insert-register'.
URL `http://ergoemacs.org/emacs/elisp_copy-paste_register_1.html'
Version 2015-12-08"
  (interactive)
  (when (use-region-p)
    (delete-region (region-beginning) (region-end)))
  (insert-register ?1 t))

(global-set-key (kbd "s-1") 'xah-copy-to-register-1) ; win-1
(global-set-key (kbd "s-2") 'xah-paste-from-regester-1) ; win-2

;; you can set  files to registers, like so:
;; (set-register ?2 '(file . "~/.emacs.d/init.org"))
;; sets file "init.org" to register 2
;; see the gnu manual link above

#+END_SRC

** Ripgrep

#+BEGIN_SRC emacs-lisp

     (use-package ripgrep
       :straight t)

#+END_SRC

** bash

#+BEGIN_SRC emacs-lisp :tangle yes

(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))

#+END_SRC

** sudo-editing

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package sudo-edit
  :ensure t
  :bind
    ("s-e" . sudo-edit))

#+END_SRC

** diminishing modes

#+BEGIN_SRC emacs-lisp

(use-package diminish
  :ensure t
  :init
  (diminish 'which-key-mode)
  (diminish 'linum-relative-mode)
  (diminish 'hungry-delete-mode)
  (diminish 'visual-line-mode)
  (diminish 'subword-mode)
  (diminish 'beacon-mode)
  (diminish 'centered-window-mode)
  (diminish 'irony-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'auto-revert-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'yas-minor-mode)
  (diminish 'flycheck-mode)
  (diminish 'helm-mode)
  (diminish 'abbrev-mode)
  (diminish 'text-scale-mode)
  (diminish 'eldoc-mode)
  (diminish 'undo-tree-mode)
  (diminish 'auto-fill-mode)
  (diminish 'org-indent-mode)
  (diminish 'company-mode)
  (diminish 'flycheck-mode)
  (diminish 'flyspell-mode))

#+END_SRC

** pastbin

#+BEGIN_SRC emacs-lisp :tangle yes

(straight-use-package 'debpaste)
(straight-use-package 'ix)

#+END_SRC

** free-keys

Show unbound keys available for bounding 

#+BEGIN_SRC emacs-lisp

(straight-use-package 'free-keys)

#+END_SRC

* People with great emacs configs

 List of people with nice emacs dotfiles files
 and some video tutorials:

 https://www.gtrun.org/custom/init.html
 https://github.com/daedreth/UncleDavesEmacs
 https://github.com/dakra/dmacs
 https://github.com/valignatev/dotfiles
 https://invidio.us/latest_version?id=FYPE0dIoq1I&itag=43
 [[https://cestlaz.github.io/stories/emacs/]] 
 http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
 https://zzamboni.org/post/my-emacs-configuration-with-commentary/
 https://github.com/caisah/emacs.dz
 https://github.com/DiegoVicen/my-emacs#my-blog-publishing-configuration
 https://github.com/myTerminal/super-emacs

#+BEGIN_SRC emacs-lisp 

#+END_SRC

* Org-mode tutorials 

  https://orgmode.org/worg/org-tutorials/

#+BEGIN_SRC emacs-lisp

#+END_SRC

* TODO Emacs commands

#+BEGIN_VERSE

Commands 

Important note	do NOT run emacs in terminal inside tmux
http://ergoemacs.org/emacs/emacs_package_system.html - for melpa, see this link
http://www.ergoemacs.org/emacs/emacs_basics.html - emacs tutorial 

C-h t	emacs tutorial
C-h a	apropos-command find commands 
M-x helm-man-women	manpages from within emacs
C-c i w	kill internal word
C-x z	repeat the previous command. Then hit 'z' again and again
org-shifttab	folds everything (non-evil-mode)
org-cycle	unfolds everything (non-evil-mode)
backtab (S-TAB)	unfolds everything (evil-mode)
z B	folds everything (evil-mode)
gpg -c file	encrypts a file with a given password. Issue it on eshell/term
M-x async-shell-command RET $command	then write, e.g. diatheke -b KJVA -f plain -k 1John 1
M-x epa-sign-file	encrypts a file with the gpg default password - you have to enter it
M-x epa-encrypt-file	encrypts a file with a symmetric password you type
M-x epa-dencrypt-file	decrepit a file with a symmetric password you gave
bug-hunter	for debugging emacs.el
M-x lisp-interaction-mode RET	lisp auto-completion programming   
(flyspell-mode)	activates automatic spelling 
\b or M-x switch-to-buffer	switches to another buffer
C-c I	find-user-init-file
Ctrl-Alt Alt Shift	for inserting a bullet and changing levels
Ctrl-c c	org-capture
Ctrl-c Ctrl-c for activating the above line
Ctrl-c Ctrl-c	for "X" ticking brackets
Ctrl-c Ctrl-l	inserts a link
Ctrl-c Ctrl-o	opens a link
Ctrl-c Ctrl-o	opens a link 
Ctrl-c Ctrl-q	also for clearing tags and other options
Ctrl-c Ctrl-q or Ctrl-c Ctrl-c	inserts a tags. Then press TAB if you want to add more non-predefined tags
Ctrl-c Ctrl-t for inserting keywords - you have to place the cursor on the bullets
Ctrl-c Ctrl-x Ctrl-a	for archiving a subtree
Ctrl-c Ctrl-x Ctrl-c	column view - q to leave column view - inside column
Ctrl-h a (apropos): buffer	shows all buffer related commands 
Ctrl-h b	shows all your keybindings 
Ctrl-h i	opens the /usr/share/info file and show all documentation available
Ctrl-h k Ctrl-x b	shows the help about "Ctrl-x b" keybinding
Ctrl-h t	opens up a tutorial window
Ctrl-space Ctrt-space	sets a mark (position) on the text - Ctrl-u Ctrl-space goes back to the mark (position)
Ctrl-u Ctrl-c . for getting date and time - you can configure it on the minibuffer as you like and you can edit other dates with it - if this does not work, you have to set it manually in your "init.el" with "(global-set-key (kbd "C-c .") 'org-time-stamp)"
Ctrl-x 2	split frame horizontally 
Ctrl-x 3	split frame vertically
Ctrl-x b	switches back to the previous buffer
Ctrl-x c	close emacs
M-x customize-themes	customize the themes
M-x customize-variable RET org-file-apps	customize browse options and other apps
Ctrl-h v or describe-variable	custom-enabled-themes - shows the current theme
M-x	helm-google-suggest	finds suggestions on google
M-x load-library RET ox-reveal	loads ox-reveal library
M-x menu-set-font	sets the font to whatever you want
M-x shell	opens up a shell session
M-x	tetris	opens up a game tetris frame
M-x visual-line-mode	adjusts the words to the frame size without breaking words 
Ctrl-x n s	focus to a section
Ctrl-x n w	unfocus the section
Ctrl-x s	save file
Ctrl-x u or Ctrl-x /	undo
Alt-x auto-complete-mode
Alt-x count-words
Alt-x eval-buffer - evaluates the buffer, so that you do not need to restart emacs
Alt-x global-auto-complete-mode
Alt-x linum-mode
Alt-x linum-relative-mode
Alt-x linum-relative-toggle
Alt-x list-packages C-s packageName i x
Alt-x list-packages - then install with "i-x"
Alt-x load-theme <RET> name-of-theme
Alt-x package-install RET package-name
Alt-x package-refresh-content
Alt-x package-safe-delete RET package-name
Alt-x RET slime 
Alt-x RET speedbar
M-x w3m-print-this-url	prints the current url. Then you can paste on email messages 
C-x m	compose-mail
C-x 5 m	compose-mail-other-frame
C-x 4 m	compose-mail-other window
Alt-x electric-pair-mode	regulates the ugly parens in emacs
Alt-x set-frame-font RET (font name, font size, etc...) 
C-x m RET ispell-change-dictionary RET (brasileiro/english/espanish/espanol/ etc...)
C-x m RET ispell-change-dictionary RET (brasileiro/english/espanish/espanol/ etc...)
C-x r j r	Jump to the position (a mark) and buffer saved in register r (jump-to-register)
C-x r <SPC> r	Record the position (a mark) of point and the current buffer in register r (point-to-register)
M-x m RET org-pandoc-export-to (...)
pwdcp.sh	copies a local path to clipboard - this is a shell command
guu	downcase line
gUU	upercase line
qd (to begin) (commands) q (to stop)	defines a macro called "d" - to play it type @d - to view the registers, ":reg" - shows all registers; ":reg abc" - shows registers ab and c
(maximize-window)
(minimize-windows)
(new-frame )
(rotate-frame-clockwise)
visual setection :!sort	alphabetically sorts a selected area

mbsync -V gmail
mu index --maildir=(G)gmail
C-x m	compose-mail
C-x 5 m	compose-mail-other-frame
C-x 4 m	compose-mail-other window
mu4e-org-mode	opens mu4e-org-mode
message-send	sends a message in  mu4e-org-mode
message-send-and-exit	sends a message and exits in  mu4e-org-mode
helm-mu-contacts	look for contacts to send an email

M-x org-insert-structure-template RET TAB or (C-c C-,)	then write the template you want, e.g. (python sh emacs-lisp etc.)

org-insert-link	if you want to insert images
org-toggle-inline-images	if you want to toogle them 

Vim-like completion inside buffers

Call them with "M-x"
commint-dynamic-complete
commint-dynamic-complete-filename
commint-completion-at-point
icicle-commint-dynamic-complete-filename
helm-commint-prompts
C-u M! diatheke -b $BibleVersion -f plain -k John 3:15	insert a Bible text inside a buffer (emacs normal-mode)
:r!diatheke -b $BibleVersion -f plain -k John 3:15	insert a Bible text inside a buffer (evil-mode)
w3m-browser-url	opens a url in w3m

Snippets
sbel	source-block-emacs-lisp
sbupkg	source-block-use-package
time	insert current time and date in the buffer
C-u C-c .	insert current time and date in the buffer
C-q TAB	insert a TAB in the buffer
M-x calculator	opens a calculator in emacs
M-x calendar	opens a calendar in emacs 
M-x butterfly	unleashes the power of the butterfly

Installed packages

in evil-mode:
M-x list-packages; /installed (they will be highlighted); v (for visual-mode); j (to select them); y (to copy them); open a new buffer and paste them.

Tutorial workflow 
M-s ! inv_Win.sh	for compton compositor 
M-s ! screenkey	for showing keys
Then you can record your screen

Emacs customization 

M-x customize-option <RET> option <RET>
M-x customize-variable <RET> option <RET>
    Set up a customization buffer for just one user option, option.
M-x customize-face <RET> face <RET>
    Set up a customization buffer for just one face, face.
M-x customize-group <RET> group <RET>
    Set up a customization buffer for just one group, group.
M-x customize-apropos <RET> regexp <RET>
    Set up a customization buffer for all the settings and groups that match
    regexp.
M-x customize-changed <RET> version <RET>
    Set up a customization buffer with all the settings and groups whose
    meaning has changed since Emacs version version.
M-x customize-changed-options <RET> version <RET>
    Set up a customization buffer with all the options whose meaning or
    default values have changed since Emacs version version.
M-x customize-saved
    Set up a customization buffer containing all settings that you have saved
    with customization buffers.
M-x customize-unsaved
    Set up a customization buffer containing all settings that you have set
    but not saved.

#+END_VERSE
