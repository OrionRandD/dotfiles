# Created 2017-07-15 Sat 19:15
#+TITLE: Emacs init file
#+AUTHOR: Vagner Rener
#+PROPERTY: header-args :tangle yes :comments yes :results silent

":tangle yes" will automatically create a better
"emacs.el" which is good for debugging emacs

* TODO Emacs commands

Commands 

Important note	do NOT run emacs in terminal inside tmux
http://ergoemacs.org/emacs/emacs_package_system.html - for melpa, see this link
http://www.ergoemacs.org/emacs/emacs_basics.html - emacs tutorial 

C-h t	emacs tutorial
M-x helm-man-women	manpages from within emacs
org-shifttab	folds everything (non-evil-mode)
org-cycle	unfolds everything (non-evil-mode)
backtab (S-TAB)	unfolds everything (evil-mode)
z B	folds everything (evil-mode)
gpg -c file	encrypts a file with a given password. Issue it on eshell/term
M-x async-shell-command RET $command	then write, e.g. diatheke -b KJVA -f plain -k 1John 1
M-x epa-sign-file	encrypts a file with the gpg default password - you have to enter it
M-x epa-encrypt-file	encrypts a file with a symmetric password you type
M-x epa-dencrypt-file	decrepit a file with a symmetric password you gave
bug-hunter	for debugging emacs.el
(flyspell-mode)	activates automatic spelling 
\b or Ctrl-x Ctrl-m switch-to-buffer	switches to another buffer
C-c I	find-user-init-file
Ctrl-Alt Alt Shift	for inserting a bullet and changing levels
Ctrl-c c	org-capture
Ctrl-c Ctrl-c for activating the above line
Ctrl-c Ctrl-c	for "X" ticking brackets
Ctrl-c Ctrl-l	inserts a link
Ctrl-c Ctrl-o	opens a link
Ctrl-c Ctrl-o	opens a link 
Ctrl-c Ctrl-q	also for clearing tags and other options
Ctrl-c Ctrl-q or Ctrl-c Ctrl-c	inserts a tags. Then press TAB if you want to add more non-predefined tags
Ctrl-c Ctrl-t for inserting keywords - you have to place the cursor on the bullets
Ctrl-c Ctrl-x Ctrl-a	for archiving a subtree
Ctrl-c Ctrl-x Ctrl-c	column view - q to leave column view - inside column
Ctrl-h a (apropos): buffer	shows all buffer related commands 
Ctrl-h b	shows all your keybindings 
Ctrl-h i	opens the /usr/share/info file and show all documentation available
Ctrl-h k Ctrl-x b	shows the help about "Ctrl-x b" keybinding
Ctrl-h t	opens up a tutorial window
Ctrl-space Ctrt-space	sets a mark (position) on the text - Ctrl-u Ctrl-space goes back to the mark (position)
Ctrl-u Ctrl-c . for getting date and time - you can configure it on the minibuffer as you like and you can edit other dates with it - if this does not work, you have to set it manually in your "init.el" with "(global-set-key (kbd "C-c .") 'org-time-stamp)"
Ctrl-x 2	split frame horizontally 
Ctrl-x 3	split frame vertically
Ctrl-x b	switches back to the previous buffer
Ctrl-x c	close emacs
Ctrl-x Ctrl-m customize-themes	customize the themes
Ctrl-h v or describe-variable	custom-enabled-themes - shows the current theme
Ctrl-x Ctrl-m	helm-google-suggest	finds suggestions on google
Ctrl-x Ctrl-m load-library RET ox-reveal	loads ox-reveal library
Ctrl-x Ctrl-m menu-set-font	sets the font to whatever you want
Ctrl-x Ctrl-m shell	opens up a shell session
Ctrl-x Ctrl-m	tetris	opens up a game tetris frame
Ctrl-x Ctrl-m visual-line-mode	adjusts the words to the frame size without breaking words 
Ctrl-x n s	focus to a section
Ctrl-x n w	unfocus the section
Ctrl-x s	save file
Ctrl-x u or Ctrl-x /	undo
Alt-x auto-complete-mode
Alt-x count-words
Alt-x eval-buffer - evaluates the buffer, so that you do not need to restart emacs
Alt-x global-auto-complete-mode
Alt-x linum-mode
Alt-x linum-relative-mode
Alt-x linum-relative-toggle
Alt-x list-packages C-s packageName i x
Alt-x list-packages - then install with "i-x"
Alt-x load-theme <RET> name-of-theme
Alt-x package-install RET package-name
Alt-x package-refresh-content
Alt-x package-safe-delete RET package-name
Alt-x RET slime 
Alt-x RET speedbar
M-x w3m-print-this-url	prints the current url. Then you can paste on email messages 
C-x m	compose-mail
C-x 5 m	compose-mail-other-frame
C-x 4 m	compose-mail-other window
Alt-x electric-pair-mode	regulates the ugly parens in emacs
Alt-x set-frame-font RET (font name, font size, etc...) 
C-x m RET ispell-change-dictionary RET (brasileiro/english/espanish/espanol/ etc...)
C-x m RET ispell-change-dictionary RET (brasileiro/english/espanish/espanol/ etc...)
C-x r j r	Jump to the position (a mark) and buffer saved in register r (jump-to-register)
C-x r <SPC> r	Record the position (a mark) of point and the current buffer in register r (point-to-register)
M-x m RET org-pandoc-export-to (...)
pwdcp.sh	copies a local path to clipboard - this is a shell command
guu	downcase line
gUU	upercase line
qd (to begin) (commands) q (to stop)	defines a macro called "d" - to play it type @d - to view the registers, ":reg" - shows all registers; ":reg abc" - shows registers ab and c
(maximize-window)
(minimize-windows)
(new-frame )
(rotate-frame-clockwise)
visual setection :!sort	alphabetically sorts a selected area

mbsync -V gmail
mu index --maildir=(G)gmail
C-x m	compose-mail
C-x 5 m	compose-mail-other-frame
C-x 4 m	compose-mail-other window
mu4e-org-mode	opens mu4e-org-mode
message-send	sends a message in  mu4e-org-mode
message-send-and-exit	sends a message and exits in  mu4e-org-mode
helm-mu-contacts	look for contacts to send an email

M-x org-insert-structure-template RET TAB or (C-c C-,)	then write the template you want, e.g. (python sh emacs-lisp etc.)

org-insert-link	if you want to insert images
org-toggle-inline-images	if you want to toogle them 

Vim-like completion inside buffers

Call them with "M-x"
commint-dynamic-complete
commint-dynamic-complete-filename
commint-completion-at-point
icicle-commint-dynamic-complete-filename
helm-commint-prompts
C-u M! diatheke -b $BibleVersion -f plain -k John 3:15	insert a Bible text inside a buffer (emacs normal-mode)
:r!diatheke -b $BibleVersion -f plain -k John 3:15	insert a Bible text inside a buffer (evil-mode)
w3m-browser-url	opens a url in w3m

Snippets
sbel	source-block-emacs-lisp
sbupkg	source-block-use-package
time	insert current time and date in the buffer
C-u C-c .	insert current time and date in the buffer
C-q TAB	insert a TAB in the buffer
M-x calculator	opens a calculator in emacs
M-x calendar	opens a calendar in emacs 


Tutorial workflow 
M-s ! inv_Win.sh	for compton compositor 
M-s ! screenkey	for showing keys
Then you can record your screen

* Emacspeak
https://tvraman.github.io/emacspeak/manual/Emacspeak-Commands-And-Options.html#Emacspeak-Commands-And-Options
see https://tvraman.github.io/emacspeak/manual/emacspeak_002dwizards.html#emacspeak_002dwizards
M-x emacs-learn-emacs-mode	asks and speaks commands for you to hear

eloud-mode is a good option for emacspeak

#+BEGIN_SRC emacs-lisp 

#+END_SRC

* Bind M-(Alt)-x to "C-x C-m"
  
#+BEGIN_SRC emacs-lisp 

  ;; Bind M-(Alt)-x to "C-x C-m" 

  ;; (global-set-key "\C-x\C-m" 'execute-extended-command) (global-set-key "\C-c\C-m" 'execute-extended-command)

#+END_SRC

* Emacs Config

;;;;;;;;;;;;;;;;;;;;;;;;;

;; $HOME/.emacs file
;; Create a file with this content to your $HOME/.emacs
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;; See package "auto-install" bellow, if you have no internet access

;; Speed up emacs
   (setq gc-cons-threshold (* 100 1024 1024))

;; use-package

(package-initialize)

;; (require 'package)

(setq package-enable-at-startup nil)
;; (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://mirrors.163.com/elpa/gnu/"))
(add-to-list 'package-archives
 	     '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
 	     '("melpa2" . "http://www.mirrorservice.org/sites/melpa.org/packages/"))
(add-to-list 'package-archives
 	     '("melpa3" . "http://www.mirrorservice.org/sites/stable.melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(org-babel-load-file (expand-file-name "~/.emacs.d/emacs.org"))

;; Ace-windown
(global-set-key (kbd "M-p") 'ace-window)

;; eloud
(add-to-list 'load-path "~/.emacs.d/elpa/eloud-20190706.1707")
(require 'eloud)

;; you have to setup eloud-speech-rate and eloud-voice in
;; "/home/vagner/.emacs.d/elpa/eloud-20190706.1707/eloud.el"
;; file and compile that - eloud-speech-rate was setup to 269

(setq eloud-espeak-path "/usr/bin/espeak")
;;(setq eloud-espeak-path "/usr/bin/espeak-ng -ven-gb -s 160")
;;(setq eloud-espeak-path "/usr/bin/espeak -vpt -s 150")

;; if you want to set espeak voice default pitch, you have to
;; edit the file "/usr/lib/x86_64-linux-gnu/espeak-data/voices/en"
;; and other voices

(package-initialize)
(org-babel-load-file "~/.emacs.d/emacs.org")

;;;;;;;;;;;;;;;;;;;;;;;;;

* Emacs tutorials

C-h t	emacs tutorial
http://ergoemacs.org/emacs/elisp.html#float98228  - Xah Lee
https://cestlaz.github.io/stories/emacs/
https://github.com/zamansky/using-emacs/blob/master/myinit.org
http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/

* Org-mode tutorials 

  https://orgmode.org/worg/org-tutorials/

#+BEGIN_SRC 

#+END_SRC
  
* Package 
  
 this config is already in $HOME/.emacs
  
#+BEGIN_SRC emacs-lisp 

;;(require 'package)
;;(package-initialize)

#+END_SRC

* Use-package

#+BEGIN_SRC emacs-lisp

     (use-package use-package-ensure-system-package :ensure t)
  ;; (setq use-package-always-ensure t)

#+END_SRC

* Speed up Emacs

#+BEGIN_SRC emacs-lisp

  (setq gc-cons-threshold (* 100 1024 1024))

#+END_SRC

* Buffer

have your emacs window to always show your system-name and the full
path of the buffer your currently editing :

#+BEGIN_SRC emacs-lisp

  (setq frame-title-format (list (format "%s %%S: %%j " (system-name)) '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   
#+END_SRC

* Auto-completion
** TODO Auto-complete - global
  
   Use auto-complete or company-mode, but NOT the two of them

 #+BEGIN_SRC emacs-lisp 

 ;;(require 'auto-complete)
 ;;(global-auto-complete-mode t) 
   (ac-config-default)
   (defun auto-complete-mode-maybe ()
    "No maybe for you. Only AC!"
    (auto-complete-mode 1))

   (ac-set-trigger-key "RET")

   (with-eval-after-load 'auto-complete
     (ac-flyspell-workaround))

 #+END_SRC

** DONE Completion 
    CLOSED: [2019-05-19 dom 16:01]

	    (global-set-key [tab] 'indent-or-expand)
	    (defun indent-or-expand ()
	      "Either indent according to mode, or expand the word preceding point."
	      (interactive)
	      (if (or
	    	   (eq last-command 'self-insert-command)
	    	   (eq last-command 'dabbrev-expand))
	    	  (progn
	    	 (setq this-command 'dabbrev-expand)
	    	 (dabbrev-expand nil))
	     	(indent-according-to-mode)))

  #+END_SRC

** Company-mode

 Use company-mode or auto-complete, but NOT the two of them
 apt install clang8 libclang1-8
 company-mode and company-shell
 C-c C-m list-packages - then install with "i-x"
 You have to enable the below add-hook, if you want company-mode auto-complete

https://github.com/company-mode/company-mode/wiki/Switching-from-AC
 https://emacs.stackexchange.com/questions/14955/my-company-package-cant-auto-complete-the-keywords-of-c-c

 #+BEGIN_SRC emacs-lisp 

   ;;   (require 'company)

   ;;   (add-hook 'after-init-hook 'global-company-mode)

   ;;   (setq company-minimum-prefix-length 3)
   ;;   (setq company-idle-delay 0.1)


   ;;    (defun company-ac-setup ()
   ;;      "Sets up `company-mode' to behave similarly to `auto-complete-mode'."
   ;;      (setq company-require-match nil)
   ;;      (setq company-auto-complete #'my-company-visible-and-explicit-action-p)
   ;;      (setq company-frontends '(company-echo-metadata-frontend
   ;;       			 company-pseudo-tooltip-unless-just-one-frontend-with-delay
   ;;       			 company-preview-frontend))
   ;;      (define-key company-active-map [tab]
   ;;        'company-select-next-if-tooltip-visible-or-complete-selection)
   ;;      (define-key company-active-map (kbd "TAB")
   ;;        'company-select-next-if-tooltip-visible-or-complete-selection))


   ;; (eval-after-load 'company
   ;;      '(progn
   ;;       	(define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
   ;;       	(define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))

   ;;        (eval-after-load 'company
   ;;    '(progn
   ;;       (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
   ;;       (define-key company-active-map (kbd "<backtab>") 'company-select-previous)))

   ;;        (setq company-frontends
   ;;      '(company-pseudo-tooltip-unless-just-one-frontend
   ;;        company-preview-frontend
   ;;        company-echo-metadata-frontend))

   ;;        (setq company-require-match 'never)

   ;;        (defun my-company-visible-and-explicit-action-p ()
   ;;       (and (company-tooltip-visible-p)
   ;;       (company-explicit-action-p)))

   ;;        (company-ac-setup)

   ;;        (eval-after-load 'company
   ;;     (lambda ()
   ;;       (set-face-attribute
   ;;        'company-preview
   ;;       	nil
   ;;       	:background (face-attribute 'company-preview-common :background))))

   ;;        (custom-set-faces
   ;;      '(company-preview
   ;;        ((t (:foreground "darkgray" :underline t))))
   ;;      '(company-preview-common
   ;;        ((t (:inherit company-preview))))
   ;;      '(company-tooltip
   ;;        ((t (:background "lightgray" :foreground "black"))))
   ;;      '(company-tooltip-selection
   ;;        ((t (:background "steelblue" :foreground "white"))))
   ;;      '(company-tooltip-common
   ;;        ((((type x)) (:inherit company-tooltip :weight bold))
   ;;       	(t (:inherit company-tooltip))))
   ;;      '(company-tooltip-common-selection
   ;;        ((((type x)) (:inherit company-tooltip-selection :weight bold))
   ;;       	(t (:inherit company-tooltip-selection)))))

   ;; ;; If you use Company, uncomment the upper bit OR the down bit 

   ;;     (add-hook 'after-init-hook 'global-company-mode)

   ;;       (use-package company
   ;;       :ensure t
   ;;       :config
   ;;       (setq company-idle-delay 0)
   ;;       (setq company-minimum-prefix-length 3))
   ;;       (with-eval-after-load 'company
   ;;       (add-hook 'c-mode-hook 'company-mode)
   ;;       (add-hook 'c++-mode-hook 'company-mode))

   ;;       (use-package irony
   ;;       :ensure t
   ;;       :config
   ;;       (add-hook 'c-mode-hook 'irony-mode)
   ;;       (add-hook 'c++-mode-hook 'irony-mode)
   ;;       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

   ;;       (use-package company-irony
   ;;       :ensure t
   ;;       :config
   ;;       (require 'company)
   ;;       (add-to-list 'company-backends 'company-irony))

 #+END_SRC

* Org-mode 

https://orgmode.org/worg/org-tutorials/orgtutorial_dto-pt.html
https://orgmode.org/manual/index.html

The new way of adding easy-templates is by calling them with
C-c C-,	org-insert-structure-template

org-auto-complete
M-x org-ac/setup-current-buffer

 #+BEGIN_SRC emacs-lisp

   (require 'org)
   (require 'org-ac)
   (require 'org-tempo)
   (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

 #+END_SRC

* TAB completion on emacs console
  
 ;; you have to put this BEFORE (require 'evil)

#+BEGIN_SRC emacs-lisp 

   (setq evil-want-C-i-jump nil)

#+END_SRC

* DONE Evil collection
  CLOSED: [2019-05-20 seg 11:30]

  ;; you have to put this BEFORE (require 'evil)
  ;; then you use vim-modes (normal, insert) in the minibuffer
  ;; evil-collection makes possible to use EWW keybindings with
  ;; evil-mode and corrects other emacs keybindings in evil

#+BEGIN_SRC emacs-lisp

;; (use-package evil-collection
;;  :after evil
;;  :config
;;  (evil-collection-init))

   (setq evil-want-keybinding nil)
      (use-package evil-collection
       :custom (evil-collection-setup-minibuffer t)
       :init (evil-collection-init))

#+END_SRC

* TODO Evil mode

#+BEGIN_SRC emacs-lisp 

  ;; for using TAB with emacs -nw in terminal 
  ;; you have to load it before calling evil-mode

    (unless (display-graphic-p) (setq evil-want-C-i-jump nil))
    (use-package evil
      :config (require 'evil)
      (progn (evil-mode 1)))

     ;; evil-leader 
	(global-evil-leader-mode)
	(evil-leader/set-key
	  "e" 'find-file
	  "b" 'switch-to-buffer
	  "k" 'kill-buffer)

     ;;    ;; http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
     ;;    ;; http://wikemacs.org/wiki/Evil

(use-package evil-surround
  :after evil
  :hook (evil-mode . global-evil-surround-mode))

(use-package evil-numbers
  :after evil
  :bind (
         :map evil-normal-state-map
         ("C-c +" . evil-numbers/inc-at-pt)
         ("C-c -" . evil-numbers/dec-at-pt)))

(with-eval-after-load 'evil-vars
  (setq evil-want-C-w-in-emacs-state t))

(use-package evil-nerd-commenter
  :ensure t
  :config
  (evilnc-default-hotkeys))

     ;;    (require 'evil-mark-replace)

     ;;    (require 'evil-matchit)
     ;;    (global-evil-matchit-mode 1)
     ;;    (require 'evil-exchange)

     ;;  ;; change default key bindings (if you want) HERE
     ;;    (setq evil-exchange-key (kbd "zx"))
     ;;    (evil-exchange-install)

     ;;  ;; change default key bindings (if you want) HERE
     ;;    (setq evil-extra-operator-eval-key (kbd "ge"))
     ;;    (require 'evil-extra-operator)
     ;;    (global-evil-extra-operator-mode 1)
     ;;    (require 'evil-visualstar)
     ;;    (global-evil-visualstar-mode 1)

         (require 'evil-org)

     ;;  ;; evil-minibuffer
     ;;  ;; https://gist.github.com/ccdunder/5816865

     ;;  ;; option for enabling vi keys in the minibuffer
     ;;  ;; Addresses evil-core.el:163 TODO

     ;;   (mapcar (lambda (keymap)
     ;;     	 (evil-define-key 'insert (eval keymap) [escape] 'abort-recursive-edit)
     ;;     	 (evil-define-key 'normal (eval keymap) [escape] 'abort-recursive-edit)
     ;;     	 (evil-define-key 'insert (eval keymap) [return] 'exit-minibuffer)
     ;;     	 (evil-define-key 'normal (eval keymap) [return] 'exit-minibuffer)
     ;;     	 (evil-define-key 'insert (eval keymap) "\C-t" 'evil-normal-state))

     ;; ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/
     ;; ;; Text-from-Minibuffer.html#Definition of minibuffer-local-map

     ;;     '(minibuffer-local-map
     ;;     	 minibuffer-local-ns-map
     ;;     	 minibuffer-local-completion-map
     ;;     	 minibuffer-local-must-match-map
     ;;     	 minibuffer-local-isearch-map))

     ;;    (add-hook 'minibuffer-setup-hook 
     ;;     	      '(lambda () 
     ;;     		 (set (make-local-variable 'evil-echo-state) nil)

     ;;    ;; (evil-set-initial-state 'mode 'insert) is the evil-proper
     ;;    ;; way to do this, but the minibuffer doesn't have a mode.
     ;;    ;; The alternative is to create a minibuffer mode (here), but
     ;;    ;; then it may conflict with other packages' if they do the same.

     ;;     	    (evil-insert 1)))

#+END_SRC

* TODO Eyebrowse
  
  this has to be placed after evil-mode
  call it with eyebrowse-mode
  https://github.com/wasamasa/eyebrowse

  Maybe change eyebrowse configuration with the pragmaticemacs
  http://pragmaticemacs.com/emacs/easily-manage-emacs-workspaces-with-eyebrowse/
 http://pragmaticemacs.com/emacs/use-your-digits-and-a-personal-key-map-for-super-shortcuts/

#+begin_src emacs-lisp 

    (use-package eyebrowse 
      :ensure t
      :config 
       (eyebrowse-setup-opinionated-keys)
        (add-to-list 'window-persistent-parameters '(window-side . writable))
        (add-to-list 'window-persistent-parameters '(window-slot . writable)))

#+end_src

* Yasnippets

M-x package-install yasnippet-snippets
M-x package-install yasnippet-classic-snippets
    you can see their abbrevs with:
    M-x yas/describe-tables
    or you can access YASnippet <-> insert at point

#+BEGIN_SRC emacs-lisp 

  ;; yasnippet code 'optional', before auto-complete

  (require 'yasnippet)
  (yas-global-mode 1)

#+END_SRC

* DONE Counsel Ivy and Swiper
   CLOSED: [2019-05-19 dom 16:02]

 #+BEGIN_SRC emacs-lisp 

    (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))

   (use-package ivy
   :ensure t
   :diminish (ivy-mode)
   :bind (("C-x b" . ivy-switch-buffer))
   :config
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "%d/%d ")
   (setq ivy-display-style 'fancy))

   (use-package swiper
   :ensure t
   :bind (("C-s" . swiper)
	  ("C-r" . swiper)
	  ("C-c C-r" . ivy-resume)
	  ("M-x" . counsel-M-x)
	  ("C-x C-f" . counsel-find-file))
   :config
   (progn
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy)
     (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
     ))


 #+END_SRC

* DONE COMMENT Smartparens
  CLOSED: [2019-05-19 dom 15:56]

 To get out from the parens pair,
 Just type another closing parent 

#+BEGIN_SRC emacs-lisp

    (use-package smartparens
      :ensure t
      :config
      (use-package smartparens-config)
      (use-package smartparens-html)
      (use-package smartparens-python)
      (use-package smartparens-latex)
      (smartparens-global-mode t)
      (show-smartparens-global-mode t))

      :bind
      ( ("C-<down>" . sp-down-sexp)
       ("C-<up>"   . sp-up-sexp)
       ("M-<down>" . sp-backward-down-sexp)
       ("M-<up>"   . sp-backward-up-sexp)
      ("C-M-a" . sp-beginning-of-sexp)
       ("C-M-e" . sp-end-of-sexp)

       ("C-M-f" . sp-forward-sexp)
       ("C-M-b" . sp-backward-sexp)

       ("C-M-n" . sp-next-sexp)
       ("C-M-p" . sp-previous-sexp)

       ("C-S-f" . sp-forward-symbol)
       ("C-S-b" . sp-backward-symbol)

       ("C-<right>" . sp-forward-slurp-sexp)
       ("M-<right>" . sp-forward-barf-sexp)
       ("C-<left>"  . sp-backward-slurp-sexp)
       ("M-<left>"  . sp-backward-barf-sexp)

       ("C-M-t" . sp-transpose-sexp)
       ("C-M-k" . sp-kill-sexp)
       ("C-k"   . sp-kill-hybrid-sexp)
       ("M-k"   . sp-backward-kill-sexp)
       ("C-M-w" . sp-copy-sexp)

       ("C-M-d" . delete-sexp)

       ("M-<backspace>" . backward-kill-word)
       ("C-<backspace>" . sp-backward-kill-word)
       ([remap sp-backward-kill-word] . backward-kill-word)

       ("M-[" . sp-backward-unwrap-sexp)
       ("M-]" . sp-unwrap-sexp)

       ("C-x C-t" . sp-transpose-hybrid-sexp)

       ("C-c ("  . wrap-with-parens)
       ("C-c ["  . wrap-with-brackets)
       ("C-c {"  . wrap-with-braces)
       ("C-c '"  . wrap-with-single-quotes)
       ("C-c \"" . wrap-with-double-quotes)
       ("C-c _"  . wrap-with-underscores)
      ("C-c `"  . wrap-with-back-quotes)
      ))

#+END_SRC

* DONE El-get
  CLOSED: [2019-05-19 dom 15:56]
  
#+BEGIN_SRC emacs-lisp

     (add-to-list 'load-path "/home/vagner/.emacs.d/el-get/el-get")
     (require 'el-get)

  ;; (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get/el-get/recipes")
  ;; (add-to-list 'el-get-recipe-path "~/.emacs.d/elpa/el-get-20181006.225/recipes")

#+END_SRC  

* DONE Auto-package-update
  CLOSED: [2019-05-19 dom 15:56]

#+BEGIN_SRC emacs-lisp

    ;; (require 'auto-package-update)  
    ;; (setq auto-package-update-prompt-before-update t)
    ;; (setq auto-package-update-delete-old-versions t)

#+END_SRC

* TODO Abbreviations
 http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
 https://www.oreilly.com/library/view/learning-gnu-emacs/1565921526/ch04s04.html

#+BEGIN_SRC emacs-lisp 

	   (setq-default abbrev-mode t)
	   (read-abbrev-file "~/.emacs.d/abbrev_defs")
	   (setq save-abbrevs t)
	   (setq save-abbrevs 'silently)

	 (define-key ctl-x-map "\C-i"
	#'endless/ispell-word-then-abbrev)

	  ;; "it remaps to 'C-x TAB'"
	  ;; Because "C-i" is the Stumpwm TM prefix-key

      (defun endless/simple-get-word ()
	(car-safe (save-excursion (ispell-get-word nil))))

      (defun endless/ispell-word-then-abbrev (p)
	"Call `ispell-word', then create an abbrev for it.
      With prefix P, create local abbrev. Otherwise it will
      be global.
      If there's nothing wrong with the word at point, keep
      looking for a typo until the beginning of buffer. You can
      skip typos you don't want to fix with `SPC', and you can
      abort completely with `C-g'. You can edit the abbreviation
      file with `edit-abbrevs`"
	(interactive "P")
	(let (bef aft)
	  (save-excursion
	    (while (if (setq bef (endless/simple-get-word))
		       ;; Word was corrected or used quit.
		       (if (ispell-word nil 'quiet)
			   nil ; End the loop.
			 ;; Also end if we reach `bob'.
			 (not (bobp)))
		     ;; If there's no word at point, keep looking
		     ;; until `bob'.
		     (not (bobp)))
	      (backward-word)
	      (backward-char))
	    (setq aft (endless/simple-get-word)))
	  (if (and aft bef (not (equal aft bef)))
	      (let ((aft (downcase aft))
		    (bef (downcase bef)))
		(define-abbrev
		  (if p local-abbrev-table global-abbrev-table)
		  bef aft)
		(message "\"%s\" now expands to \"%s\" %sally"
			 bef aft (if p "loc" "glob")))
	    (user-error "No typo at or before point"))))

#+END_SRC

* DONE All-the-icons
  CLOSED: [2019-05-19 dom 15:57]

  M-x all-the-icons-install-fonts

  #+BEGIN_SRC emacs-lisp

    (use-package all-the-icons
     :ensure t)

    (defun org-brain-insert-resource-icon (link)
      "Insert an icon, based on content of org-mode LINK."
      (insert (format "%s "
		      (cond ((string-prefix-p "http" link)
			     (cond ((string-match "wikipedia\\.org" link)
				    (all-the-icons-faicon "wikipedia-w"))
				   ((string-match "github\\.com" link)
				    (all-the-icons-octicon "mark-github"))
				   ((string-match "vimeo\\.com" link)
				    (all-the-icons-faicon "vimeo"))
				   ((string-match "youtube\\.com" link)
				    (all-the-icons-faicon "youtube"))
				   (t
				    (all-the-icons-faicon "globe"))))
			    ((string-prefix-p "brain:" link)
			     (all-the-icons-fileicon "brain"))
			    (t
			     (all-the-icons-icon-for-file link))))))

    (add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)

  #+END_SRC

* DONE Bug-hunter
  CLOSED: [2019-05-19 dom 15:57]

  #+BEGIN_SRC emacs-lisp

  (use-package bug-hunter
   :ensure t)

  #+END_SRC

* DONE Eshell
  CLOSED: [2019-05-19 dom 15:57]

https://invidio.us/watch?v=RhYNu6i_uY4
http://howardism.org/Technical/Emacs/eshell-present.html
Globbin filters
C-c M-q	(eshell-display-predicate-help)
C-c M-m	(eshell-display-modifier-help)

#+BEGIN_SRC emacs-lisp

(use-package eshell
  :commands eshell
  :init
  (setq
   eshell-cmpl-ignore-case t
   eshell-cmpl-cycle-completions nil
   eshell-history-size 10000
   eshell-hist-ignoredups t
   eshell-error-if-no-glob t
   eshell-glob-case-insensitive t
   eshell-scroll-to-bottom-on-input 'all)
  :config
  (defun jcf-eshell-here ()
    (interactive)
    (eshell "here"))

  (defun pcomplete/sudo ()
    (let ((prec (pcomplete-arg 'last -1)))
      (cond ((string= "sudo" prec)
             (while (pcomplete-here*
                     (funcall pcomplete-command-completion-function)
                     (pcomplete-arg 'last) t))))))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-mode-map
                [remap eshell-pcomplete]
                'helm-esh-pcomplete)
              (define-key eshell-mode-map
                (kbd "M-p")
                'helm-eshell-history)
              (eshell/export "NODE_NO_READLINE=1"))))

#+END_SRC

* DONE Helm 
  CLOSED: [2019-05-19 dom 15:58]

NOTE: REMOVE "~/.emacs.d/elpa/helm-201908(sth)" package, because it will yield an error:

"Symbol's value as variable is void: helm-left-margin-width"

So that, install helm with:

apt install elpa-helm elpa-helm-ag elpa-helm-projectile elpa-helm-rtags
    and its suggestions

https://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp

      ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa/helm-3.0/")
	;; (require 'helm-config)

	   (helm-mode 1)

	;; (global-set-key (kbd "C-x C-m") 'helm-M-x)
	;; (global-set-key (kbd "C-x C-f") 'helm-find-files)

	;; s is super or win
	;; (global-set-key (kbd "s-x") 'helm-M-x)
	 (global-set-key (kbd "M-x") 'helm-M-x)
	 (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
	;; (global-set-key (kbd "s-f") 'helm-find-files)
	 (global-set-key (kbd "C-x C-f") 'helm-find-files)

      ;;(global-set-key (kbd "Ctrl-x Ctrl-m") 'helm-M-x)
      ;;(global-set-key (kbd "C-x C-f") 'helm-find-files)

#+END_SRC

* DONE Helm-org-rifle 
  CLOSED: [2019-05-19 dom 15:59]

  #+BEGIN_SRC emacs-lisp

  (defun helm-org-rifle-brain ()
  "Rifle files in `org-brain-path'."
  (interactive)
  (helm-org-rifle-directories (list org-brain-path)))

  #+END_SRC

* DONE Beacon
  CLOSED: [2019-05-19 dom 15:59]

  #+BEGIN_SRC emacs-lisp 

    (use-package beacon
     :config
     (beacon-mode 1))

  #+END_SRC

* DONE Bidi - bidirectional text
  CLOSED: [2019-05-19 dom 15:59]

you have to install "emacs-bidi" in elpa
from github - it is not in MELPA
https://github.com/emacsmirror/bidi

Emacs Is Great - Ep 40, Hebrew/ Bidirectional text
https://invidio.us/watch?v=LxuNmeCNnqU
Emacs Is Great - Ep 40 pt 2, Hebrew/ Bidirectional
https://invidio.us/watch?v=y3oLG-6KTaE

#+BEGIN_SRC emacs-lisp 

  (setq-default bidi-display-reordering nil)

   (defun bidi-reordering-toggle ()
   "Toggle bidirectional display reordering."
   (interactive)
   (setq bidi-display-reordering (not bidi-display-reordering))
   (message "bidi reordering is %s" bidi-display-reordering))

   (defun bidi-display-reordering-on ()
   "Sets bidi-display-reordering-on"
   (setq-local bidi-display-reordering t))

   (add-hook 'text-mode-hook 'bidi-display-reordering-on)

   (setq-default bidi-paragraph-direction 'left-to-right)

   (defun bidi-direction-toggle ()
   "Will switch the explicit direction of text for current
   buffer. This will set BIDI-DISPLAY-REORDERING to T"
   (interactive "")
   (setq bidi-display-reordering t)
   (if (equal bidi-paragraph-direction 'right-to-left)
   (setq bidi-paragraph-direction 'left-to-right)
   (setq bidi-paragraph-direction 'right-to-left))
   (message "%s" bidi-paragraph-direction))

#+END_SRC

* DONE Byte-compiling
  CLOSED: [2019-05-19 dom 15:59]

https://www.emacswiki.org/emacs/AutoRecompile

Ignore byte-compile warnings

#+BEGIN_SRC emacs-lisp

	 (setq byte-compile-warnings '(not nresolved
					  free-vars
					  callargs
					  redefine
					  obsolete
					  noruntime
					  cl-functions
					  interactive-only
					  )) 

#+END_SRC

* DONE Bullets
  CLOSED: [2019-05-19 dom 15:59]
  
#+BEGIN_SRC emacs-lisp 

     (use-package org-bullets
      :ensure t
      :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC

* DONE Auctex  
  CLOSED: [2019-05-19 dom 15:59]

Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2

#+BEGIN_SRC emacs-lisp 

    (setq TeX-parse-self t); Enable parse on load.
    (setq TeX-auto-save t); Enable parse on save.
    (setq-default TeX-master nil)

    (setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

    (add-hook 'TeX-mode-hook 'flyspell-mode); Enable Flyspell mode for TeX modes such as AUCTeX. Highlights all misspelled words.
    (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode); Enable Flyspell program mode for emacs lisp mode, which highlights all misspelled words in comments and strings.
    (setq ispell-dictionary "english"); Default dictionary. To change do M-x ispell-change-dictionary RET.
    (add-hook 'TeX-mode-hook
	      (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
    (setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.

    ;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
    (setq LaTeX-csquotes-close-quote "}"
	  LaTeX-csquotes-open-quote "\\enquote{")

    ;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
    (add-hook 'TeX-mode-hook 'LaTeX-math-mode)

    ;; Org-ref
    ;; (setq org-ref-completion-library 'org-ref-ivy-cite)
    ;;(require 'org-ref)

    ;; Bibtex

    ;; (require 'ox-bibtex)

    ;; RefTeX
    ;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html

     (add-hook 'TeX-mode-hook 'turn-on-reftex)

    (eval-after-load 'reftex-vars; Is this construct really needed?
      '(progn
	 (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite macros.
	 ;; Make RefTeX interact with AUCTeX, http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html

	 (setq reftex-plug-into-AUCTeX t)
	 ;; So that RefTeX also recognizes \addbibresource. Note that you
	 ;; can't use $HOME in path for \addbibresource but that "~"
	 ;; works.
	 (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
  ;;     (setq reftex-default-bibliography '("/home/vagner/latex_projects/references.bib/")); So that RefTeX in Org-mode knows bibliography
  ;;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
	 (setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"); Recognize \subcaptions, e.g. reftex-citation
	 (setq reftex-cite-format; Get ReTeX with biblatex, see https://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992

	       '((?t . "\\textcite[]{%l}")
		 (?a . "\\autocite[]{%l}")
		 (?c . "\\cite[]{%l}")
		 (?s . "\\smartcite[]{%l}")
		 (?f . "\\footcite[]{%l}")
		 (?n . "\\nocite{%l}")
		 (?b . "\\blockcquote[]{%l}{}")))))

  ;; Fontification (remove unnecessary entries as you notice them) http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html

    (setq font-latex-match-reference-keywords
	  '(
	    ;; biblatex
	    ("printbibliography" "[{")
	    ("addbibresource" "[{")
	    ;; Standard commands
	    ;; ("cite" "[{")
	    ("Cite" "[{")
	    ("parencite" "[{")
	    ("Parencite" "[{")
	    ("footcite" "[{")
	    ("footcitetext" "[{")
	    ;; ;; Style-specific commands
	    ("textcite" "[{")
	    ("Textcite" "[{")
	    ("smartcite" "[{")
	    ("Smartcite" "[{")
	    ("cite*" "[{")
	    ("parencite*" "[{")
	    ("supercite" "[{")
	    ; Qualified citation lists
	    ("cites" "[{")
	    ("Cites" "[{")
	    ("parencites" "[{")
	    ("Parencites" "[{")
	    ("footcites" "[{")
	    ("footcitetexts" "[{")
	    ("smartcites" "[{")
	    ("Smartcites" "[{")
	    ("textcites" "[{")
	    ("Textcites" "[{")
	    ("supercites" "[{")
	    ;; Style-independent commands
	    ("autocite" "[{")
	    ("Autocite" "[{")
	    ("autocite*" "[{")
	    ("Autocite*" "[{")
	    ("autocites" "[{")
	    ("Autocites" "[{")
	    ;; Text commands
	    ("citeauthor" "[{")
	    ("Citeauthor" "[{")
	    ("citetitle" "[{")
	    ("citetitle*" "[{")
	    ("citeyear" "[{")
	    ("citedate" "[{")
	    ("citeurl" "[{")
	    ;; Special commands
	    ("fullcite" "[{")))

    (setq font-latex-match-textual-keywords
	  '(
	    ;; biblatex brackets
	    ("parentext" "{")
	    ("brackettext" "{")
	    ("hybridblockquote" "[{")
	    ;; Auxiliary Commands
	    ("textelp" "{")
	    ("textelp*" "{")
	    ("textins" "{")
	    ("textins*" "{")
	    ;; supcaption
	    ("subcaption" "[{")))

    (setq font-latex-match-variable-keywords
	  '(
	    ;; amsmath
	    ("numberwithin" "{")
	    ;; enumitem
	    ("setlist" "[{")
	    ("setlist*" "[{")
	    ("newlist" "{")
	    ("renewlist" "{")
	    ("setlistdepth" "{")
	    ("restartlist" "{")))

#+END_SRC

* DONE Auto-install
  CLOSED: [2019-05-19 dom 15:59]

Install auto-install.el and install-elisp.el and text-translation.el
https://www.emacswiki.org/emacs/AutoInstall
https://www.emacswiki.org/emacs/InstallElisp
https://www.emacswiki.org/emacs/TextTranslator


#+BEGIN_SRC emacs-lisp 
   
;; If you have no internet access and emacs refuses to load properly - with "evil-mode" on,
;; comment the lines bellow 

;; (require 'auto-install)
;; (auto-install-update-emacswiki-package-name t)
;; (auto-install-compatibility-setup)

#+END_SRC

* DONE _.emacs (init.el)
  CLOSED: [2019-05-19 dom 15:59]

  ~/.emacs (init.el)

#+BEGIN_SRC emacs-lisp 

(defun find-user-init-file ()
  "Edit the `user-init-file', in another window."
  (interactive)
  (find-file-other-window user-init-file)
  (rotate-frame-clockwise))

(global-set-key (kbd "C-c I") 'find-user-init-file)

#+END_SRC

* TODO Avy navegation

#+BEGIN_SRC emacs-lisp 

   (use-package avy
     :ensure t
     :config
     (avy-setup-default))

#+END_SRC

* TODO Agressive indent mode

http://emacsredux.com/
aggressive-indent-mode

#+BEGIN_SRC emacs-lisp 

  (global-aggressive-indent-mode 1)

#+END_SRC

* TODO Atomic chrome

#+BEGIN_SRC emacs-lisp

;;  (require 'atomic-chrome)
;;  (atomic-chrome-start-server)

#+END_SRC

* DONE Babel languages
  CLOSED: [2019-05-19 dom 16:00]

http://orgmode.org/worg/org-contrib/babel/languages.html#configure

if it does not evaluate languages, do: find ~/.emacs.d/elpa/org* -name "*elc" -delete  - bytecode cleaning 
to evaluate the code-block use "C-c C-c"

#+BEGIN_SRC emacs-lisp 

  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
  (clojure .t)
  (C . t)
  ;;(cpp . t)
  ;;(csharp . t)
  (haskell . t)
  (python . t)
  (org . t)
  ;; (scala . t)
  (scheme . t)
  (perl . t)
  (R . t)
  (gnuplot . t)
  (java . t)
  (js . t)
  ;;(julia . t)
  (lisp . t)
  (latex . t)
  (ruby . t)
  (emacs-lisp . t)
  (ditaa . t)
  (sed .t)
  (awk .t)
  (sql .t)
  (sqlite .t)
   ))

#+END_SRC

https://github.com/xboard/emacs-brazilian-holidays

* TODO Bind-chord

  #+BEGIN_SRC emacs-lisp

  ;;  (require 'bind-chord)

  #+END_SRC

* TODO Brazilian-holidays

#+BEGIN_SRC emacs-lisp

    (load "~/.emacs.d/elpa/emacs-brazilian-holidays/brazilian-holidays.el")

#+END_SRC

* DONE Cedilha in emacs and xemacs 
  CLOSED: [2019-05-19 dom 16:00]

Cedilha in Emacs and Xemacs

C-c C-m set-input-method RET portuguese-prefix
You need to setup your keyboard to "English (international AltGr dead keys)"
for typing cedilla
and "C-\" to toogle between input-methods
But for typing cedilla system-wide, you need  "English international with dead keys"

Then customize-variable 
Or "Alt-x customize-variable RET default-input-method
Value Menu String portuguese-prefix -> state - for future "

Per buffer
C-c C-m set-input-method -> portuguese-prefix
C-c C-m list-input-methods
C-c C-m describe-input-method

#+BEGIN_SRC emacs-lisp 

(set-input-method "portuguese-prefix")

(defadvice switch-to-buffer (after activate-input-method activate)
(activate-input-method "portuguese-prefix"))

(add-hook 'text-mode-hook
  (lambda () (set-input-method "portuguese-prefix")))

#+END_SRC

* DONE C++
  CLOSED: [2019-05-19 dom 16:01]

#+BEGIN_SRC emacs-lisp

;; (use-package ggtags
;; :ensure t 
;; :config 
;; (add-hook 'c-mode-common-hook
;;           (lambda ()
;;             (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;               (ggtags-mode 1))))
;; )

#+END_SRC

* DONE Compay-emoji
  CLOSED: [2019-05-19 dom 16:01]

#+BEGIN_SRC emacs-lisp

  ;;    (require 'company-emoji)
  ;;    (add-to-list 'company-backends 'company-emoji)

      (defun --set-emoji-font (frame)

      "Adjust the font settings of FRAME so Emacs can display emoji properly."

    (if (eq system-type 'darwin)

	;; For NS/Cocoa

	(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)

      ;; For Linux

	(set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

      ;; For when Emacs is started in GUI mode:

      (--set-emoji-font nil)

      ;; Hook for when a frame is created with emacsclient
      ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html

      (add-hook 'after-make-frame-functions '--set-emoji-font)

#+END_SRC

* DONE Centered-window
  CLOSED: [2019-05-19 dom 15:55]

#+BEGIN_SRC emacs-lisp

    ;; (use-package centered-window)

    ;;  (require 'centered-window)
    ;;  (centered-window-mode t)

  (use-package centered-window 
    :ensure t
    :config
     (centered-window-mode))

#+END_SRC

* DONE Csharp mode 
  CLOSED: [2019-05-19 dom 16:03]

#+BEGIN_SRC emacs-lisp 

(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
(setq auto-mode-alist
   (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))

;;(defun my-csharp-mode-hook ()
;; enable the stuff you want for C# here
;;  (electric-pair-mode 1))
;; (add-hook 'csharp-mode-hook 'my-csharp-mode-hook)

#+END_SRC

* TODO Custom themes 
   
   Console themes:  charcoal-black cobalt dark-blue
   dark-erc dark-font-lock dark-gnus dark-blue2
   dark-laptop doom-vibrant goldenrod graham granger gray30 green-phosphor  
   heroku hickey hober jonadabian jonadabian-slate
   jsc-dark late-night lavender lethe mano-dark matrix midnight
   misterioso mistyday occidental odersky oswald pierson pok-wob
   punpun-dark parus railscast renegade resolve retro-green retro-orange
   robin-hood ryerson salmon-diff salmon-font-lock simple1 sitaramv-solaris
   slime spolsky subdued subtle-blue suscolors tango-dark tsdh-dark zenburn  
   
   Also install "doom-themes" "color-theme-modern" and "theme-looper"

   you can use "theme-looper-enable-random-theme"
   use theme-looper to change emacs themes

#+BEGIN_SRC emacs-lisp 

    (use-package color-theme-modern :ensure color-theme-modern)
    (use-package doom-themes :ensure doom-themes)
    (use-package theme-looper :ensure theme-looper)
    (use-package base16-theme :ensure base16-theme)
    (use-package moe-theme :ensure moe-theme)
    (use-package alect-themes :ensure alect-themes)
    (use-package powerline
     :ensure t
     :config
     (powerline-moe-theme))

     (setq custom-safe-themes t)

     (global-set-key (kbd "<f8>") 'theme-looper-enable-random-theme)

  ;;(load-theme 'base16-flat t)
  ;;(load-theme 'monokai t)
  ;;(load-theme 'hydandata-light t)
  ;;(load-theme 'anti-zenburn t)
  ;; (add-hook 'after-init-hook (lambda () (load-theme 'julie)))
    (add-hook 'after-init-hook (lambda () (load-theme 'doom-vibrant)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'zenburn)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'anti-zenburn)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'hydandata-light)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'heroku-theme)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'lavender-theme)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'solarized-theme)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'sanityinc-solarized-dark)))
  ;;(add-hook 'after-init-hook (lambda () (load-theme 'base16-mexico-light)))
  ;; (add-hook 'after-init-hook (lambda () (load-theme 'monokai)))
  ;; (add-hook 'after-init-hook (lambda () (load-theme 'doom-opera)))
  ;; (add-hook 'after-init-hook (lambda () (load-theme 'poet)))

#+END_SRC

* Custom-set-faces

  #+BEGIN_SRC emacs-lisp 

  #+END_SRC

* TODO PDF tools

Using Emacs 44 - An Org mode and PDF-tools workflow
https://invidio.us/latest_version?id=LFO2UbzbZhA&itag=43
http://cestlaz.github.io/posts/using-emacs-44-pdf
https://github.com/zamansky/using-emacs

#+BEGIN_SRC emacs-lisp

   (use-package pdf-tools
    :ensure t
    :config
     (pdf-tools-install))

   (use-package org-pdfview
    :ensure t)

* TODO Deft

  #+BEGIN_SRC emacs-lisp

(defun org-brain-deft ()
  "Use `deft' for files in `org-brain-path'."
  (interactive)
  (let ((deft-directory org-brain-path)
        (deft-recursive t)
        (deft-extensions '("org")))
    (deft)))

  #+END_SRC

* TODO Dired

   install dired+ with
   el-get-install RET dired+

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/el-get/dired+")
 (require 'dired+)

(setq dired-dwim-target t)
;; Hide details by default
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
;; Not spawn endless amount of dired buffers
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

(use-package all-the-icons-dired
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))

#+END_SRC

* TODO Dired-ranger

  These bindings are not working

#+BEGIN_SRC emacs-lisp

;;  (use-package dired-ranger
;;    :ensure t
;;    :bind (:map dired-mode-map
;;		("W" . dired-ranger-copy)
;;		("X" . dired-ranger-move)
;;		("Y" . dired-ranger-paste)))

#+END_SRC

* Ranger 

#+BEGIN_SRC emacs-lisp

  ;; (use-package ranger 
  ;;   :ensure t 
  ;;   :config 
  ;;     (ranger-override-dired-mode nil)
  ;;       (setq helm-descbinds-window-style 'same-window)
  ;;       (setq ranger-cleanup-eagerly t)
  ;;       (setq ranger-show-dotfiles t)
  ;;       (setq ranger-modify-header t)
  ;;       (setq ranger-header-func 'ranger-header-line)
  ;;       (setq ranger-parent-header-func 'ranger-parent-header-line)
  ;;       (setq ranger-preview-header-func 'ranger-preview-header-line)
  ;;       (setq ranger-hide-cursor nil)
  ;;       (setq ranger-footer-delay 0.2)
  ;;       (setq ranger-preview-delay 0.040)
  ;;       (setq ranger-parent-depth 2)
  ;;       (setq ranger-width-parents 0.12)
  ;;       (setq ranger-max-parent-width 0.12)
  ;;       (setq ranger-preview-file t)
  ;;       (setq ranger-show-literal t)
  ;;       (setq ranger-width-preview 0.55)
  ;;       (setq ranger-excluded-extensions '("mkv" "iso" "mp4"))
  ;;       (setq ranger-max-preview-size 10)
  ;;       (setq ranger-dont-show-binary t))

#+END_SRC

* Default pdf-viwer

Default pdf-viwer
C-c C-m customize-variable RET org-file-apps RET (Extension pdf) under it Choose - Value Menu: Command and type "evince %s" - without quotes	change the default pdf-viewer
 
#+BEGIN_SRC emacs-lisp 

#+END_SRC

* DONE Default web-browser
  CLOSED: [2019-05-19 dom 16:17]

#+BEGIN_SRC emacs-lisp

  (setq browse-url-browser-function 'browse-url-generic

   ;; browse-url-generic-program "chromium-browser")
   browse-url-generic-program "firefox")

#+END_SRC

* TODO Dpaste

#+BEGIN_SRC emacs-lisp

;; (require 'dpaste nil)  ; Not needed if you use package.el
(global-set-key (kbd "C-c y") 'dpaste-region-or-buffer)
(setq dpaste-poster "Achylles")
;; or the preferred method of adding your `user-full-name variable
(setq user-full-name "Achylles")

#+END_SRC

* DONE Diatheke
  CLOSED: [2019-05-19 dom 16:31]

Install diatheke from here:
https://github.com/emacsmirror/diatheke
diatheke command-line
M-x diatheke-mode or
 
#+BEGIN_SRC emacs-lisp 

  (require 'diatheke)

  (setq diatheke-bible "KJVA -f plain")

  ;; (setq diatheke-bible "ESV -f plain -o s")

  ;; you can set the Bible inside the buffer with
  ;; (diatheke-set-bible) + C-x e

  ;; Keybindings already automatically loaded
  ;; C-c C-b: select a bible translation
  ;; C-c C-i: insert a passage
  ;; C-c C-p: search for a phrase
  ;; C-c C-m: search for multiple words
  ;; C-c C-r: search by regex

#+END_SRC

* TODO Pcre2el - fix regex 
  
  #+BEGIN_SRC emacs-lisp

 ;;   (use-package pcre2el
 ;;    :ensure t
 ;;    :config (pcre-mode))

  #+END_SRC
  
* DONE Wgrep for fuzy dired
  CLOSED: [2019-05-19 dom 18:51]

  #+BEGIN_SRC emacs-lisp

    (use-package wgrep
     :ensure t)
    (setq counsel-fzf-cmd "/home/vagner/.fzf/bin/fzf -f %s")

  #+END_SRC

* DONE Dtk - another better diatheke 
  CLOSED: [2019-05-19 dom 18:52]

 https://github.com/dtk01/dtk
 for accessing diatheke sword modules
 Install diatheke, xiphos and its modules
 apt install diatheke xiphos
 See also:
 https://github.com/JasonFruit/diatheke.el
 https://github.com/alphapapa/sword-converter
 https://github.com/alphapapa/sword-to-org

#+BEGIN_SRC emacs-lisp

 ;; (add-to-list 'load-path "~/.emacs.d/elpa/dtk")
 ;; (require 'dtk)

    (use-package dtk
      :bind (("C-c B" . dtk-bible))
      :custom
      (dtk-default-module "KJVA")
      (dtk-default-module-category "Biblical Texts")
      (dtk-word-wrap t)
      )

#+END_SRC

* DONE Disable Emacs-splash-screen 
  CLOSED: [2019-05-19 dom 18:53]

#+BEGIN_SRC emacs-lisp 

;; Disable Emacs-splash-screen

 (setq inhibit-splash-screen t)

#+END_SRC

* TODO edit-server
  
  M-x package-install RET edit-server
  https://www.emacswiki.org/emacs/Edit_with_Emacs

 #+BEGIN_SRC emacs-lisp

	 ;; (require 'edit-server) 
	 ;; (edit-server-start)

	 ;; Chromium/Chrome integration to edit text areas

   ;; (use-package edit-server
   ;;   :if window-system
   ;;   :init
   ;;   (add-hook 'after-init-hook 'server-start t)
   ;;   (add-hook 'after-init-hook 'edit-server-start t))
   ;; 	 (when (and (daemonp) (locate-library "edit-server"))

    	;;    (require '
	;;      edit-server)
	;;    (edit-server-start))

	;;    (add-hook 'edit-server-start-hook 'markdown-mode)

	 ;; Integrate with Gmail

	;;    (autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
	;;    (autoload 'edit-server-maybe-htmlize-buffer   "edit-server-htmlize" "edit-server-htmlize" t)
	;;    (add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
	;;    (add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)

 #+END_SRC

* TODO Eldoc  

  https://www.emacswiki.org/emacs/ElDoc

 #+begin_src emacs-lisp 

 #+end_src

* TODO elfeed 

  http://pragmaticemacs.com/category/elfeed/

#+begin_src emacs-lisp 

      ;;shortcut functions

      (defun bjm/elfeed-show-all ()
	(interactive)
	(bookmark-maybe-load-default-file)
	(bookmark-jump "elfeed-all"))
      (defun bjm/elfeed-show-emacs ()
	(interactive)
	(bookmark-maybe-load-default-file)
	(bookmark-jump "elfeed-emacs"))
      (defun bjm/elfeed-show-daily ()
	(interactive)
	(bookmark-maybe-load-default-file)
	(bookmark-jump "elfeed-daily"))

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching

  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting

  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

    (use-package elfeed
      :ensure t
      :bind (:map elfeed-search-mode-map
		  ("A" . bjm/elfeed-show-all)
		  ("E" . bjm/elfeed-show-emacs)
		  ("D" . bjm/elfeed-show-daily)
		  ("q" . bjm/elfeed-save-db-and-bury)))

#+end_src

** elfeed-goodies

  #+begin_src emacs-lisp 

    (use-package elfeed-goodies
      :ensure t
      :config
      (elfeed-goodies/setup))

  #+end_src

** elfeed-org

  #+begin_src emacs-lisp 

    ;; use an org file to organise feeds

    (use-package elfeed-org
      :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~vagner/org~/elfeed.org")))

  #+end_src

* TODO Emacs edit firefox-chromium plugin

#+BEGIN_SRC emacs-lisp 

#+END_SRC

* DONE Emacspeak
  CLOSED: [2019-05-19 dom 20:44]

 apt-get install emacspeak emacspeak-espeak-server emacspeak-ss
 https://tvraman.github.io/emacspeak/
 http://www.faqs.org/docs/Linux-HOWTO/Emacspeak-HOWTO.html
 If you have problems with emacspeak pitch sound, go to volumeicon/pasystray
 preferences and select "linear scale", instead of "logarithmic scale"
 M-x emacs-learn-emacs-mode	asks and speaks commands for you to hear 

#+BEGIN_SRC emacs-lisp 

 (when (featurep 'emacspeak)
   (require 'emacspeak-aumix)
   (setq emacspeak-auditory-icon-function 'emascpeak-play-auditory-icon)
   (setq emacspeak-aumix-multichannel-capable-p t)
   (emacspeak-toggle-auditory-icons 1))

#+END_SRC

* DONE Engine-mode for search the internet
  CLOSED: [2019-05-19 dom 21:15]

  engine-mode for search the web

#+BEGIN_SRC emacs-lisp 

  (use-package engine-mode
    :config (engine-mode t))

    (defengine amazon
      "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s")

    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g")

    (defengine google-images
      "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :docstring "Mappin' it up.")

    (defengine project-gutenberg
      "http://www.gutenberg.org/ebooks/search/?query=%s")

    (defengine rfcs
      "http://pretty-rfc.herokuapp.com/search?q=%s")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s")

    (defengine twitter
      "https://twitter.com/search?q=%s")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis.")

    (defengine wiktionary
      "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

    (defengine wolfram-alpha
      "http://www.wolframalpha.com/input/?i=%s")

    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s")

#+END_SRC

* TODO Ensime 

 https://www.47deg.com/blog/scala-development-with-emacs/ 

#+BEGIN_SRC emacs-lisp 

    ;;We have "sbt" and "scala" in /usr/bin so we add this path to the PATH environment

    (setq exec-path (append exec-path '("/usr/bin")))
    (setq exec-path (append exec-path '("/usr/bin")))
    (setenv "PATH" (shell-command-to-string "/bin/bash -c 'echo -n $PATH'"))

  (use-package ensime
    :ensure t)

  ;;  (require 'ensime)
   (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

#+END_SRC

* TODO Erc - irc client

  https://github.com/rememberYou

#+BEGIN_SRC emacs-lisp

  (require 'erc)

  (defun irc-maybe ()
       "Connect to IRC."
      (interactive)
      (when (y-or-n-p "IRC? ")
	(erc :server "irc.freenode.net" :port 6667
	     :nick "Achylles" :full-name "Achylles")
	(erc :server "irc.dalnet.net" :port 6667
	     :nick "Achylles" :full-name "Achylles")
	(erc :server "irc.oftc.net" :port 6667 :nick "Achylles")))

   #+END_SRC
   
* TODO Bitlbee
  
https://emacs-fu.blogspot.com/2012/03/social-networking-with-bitlbee-and-erc.html

#+begin_src emacs-lisp 

#+end_src

* DONE Eshell
  CLOSED: [2019-05-19 dom 21:17]

    https://www.emacswiki.org/emacs/EshellAlias

  #+BEGIN_SRC emacs-lisp

	;; run this script in terminal
	;; alias | sed -E "s/^alias ([^=]+)='(.*)'$/alias \1 \2 \$*/g; s/'\\\''/'/g;" >~/.emacs.d/eshell/alias 
	;; or better yet,
	;; (eshell/alias "$command" "$command_instructions $1") <-> run this in your eshell session
	;; (eshell/alias "rm" "rm -iv $1")
	;; then it will be saved in "~/.emacs.d/eshell/alias"

    (use-package eshell 
      :ensure t
      :config )

  #+END_SRC

* ESS 

or working with polymode and R code
Studio and ".Rmd" files for Academics

BEGIN_SRC emacs-lisp


(defun rmd-mode ()
  "ESS Markdown mode for rmd files"
  (interactive)
  (require 'poly-R)
  (require 'poly-markdown)     
  (poly-markdown+r-mode))

END_SRC

* TODO Expand region 

 use "C-S@" to mark set and move the cursor around,
 So that you can select the region you want - Then
 copy and paste 

#+BEGIN_SRC emacs-lisp 

;;  (require 'expand-region)
;;  (global-set-key (kbd "C-=") 'er/expand-region)

#+END_SRC

* TODO Figwheel-clojure

Figwheel-clojure
https://markhudnall.com/2016/04/25/starting-figwheel-in-emacs/

#+BEGIN_SRC emacs-lisp 

#+END_SRC

* TODO Flycheck

#+BEGIN_SRC emacs-lisp

    (use-package flycheck
     :init
     (global-flycheck-mode t))

#+END_SRC

* TODO Flyspell 

M-x RET ispell-change-dictionary RET (brasileiro/english/espanish/espanol/ etc...)

#+BEGIN_SRC emacs-lisp 

  (defun my-turn-spell-checking-on ()
    "Turn flyspell-mode on."
    (flyspell-mode 1))

  (add-hook 'text-mode-hook 'my-turn-spell-checking-on)

   ;; enable flyspell in text mode (and derived modes)
   ;; (add-hook 'text-mode-hook 'flyspell-mode)

#+END_SRC

* TODO Fountain-mode - Screenwriting - plays, films, sop-operas, etc  

 Screenwriting - plays, films, sop-operas, etc...

#+BEGIN_SRC emacs-lisp 

  ;; (require 'fountain-mode)

  (use-package fountain-mode
   :ensure t)

#+END_SRC

* TODO Gitlab

#+BEGIN_SRC emacs-lisp

      (use-package gitlab
       :ensure t)
	 (setq gitlab-host "https://gitlab.com"
	       gitlab-token-id "OrionRandD")

#+END_SRC

* TODO GGtags

 apt-get install global

#+BEGIN_SRC emacs-lisp

;; (use-package ggtags
 
;;  :config 
;;   (add-hook 'c-mode-common-hook
;;          (lambda ()
;;            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;              (ggtags-mode 1)))))

#+END_SRC

* TODO Google-contacts

#+BEGIN_SRC emacs-lisp 

  ;; (use-package plstore
  ;;     :defer t
  ;;     :config (setq plstore-cache-passphrase-for-symmetric-encryption t))
  
  ;; (require 'google-contacts)
  ;; (require 'google-contacts-gnus)
  ;; (require 'google-contacts-message)

  ;; shortcuts

  ;; n or p to go the next or previous record;
  ;; g to refresh the result, bypassing the cache;
  ;; m to send an e-mail to a contact;
  ;; s to make a new search;
  ;; q to quit.

  #+END_SRC

* TODO Ob-translate

#+BEGIN_SRC emacs-lisp

  ;; https://github.com/alphapapa/ob-translate  
  ;; M-x package-install RET ob-translate
  ;; enclose your code between source and call

  ;; #+BEGIN_SRC translate :dest il,el,it,fr,ru,en (etc.)
  ;; or
  ;; #+BEGIN_SRC translate :src il (or 'auto' for auto detection)
  ;; $ContentsHere
  ;; #+END_SRC
  ;; Example: 
  ;; #+BEGIN_SRC translate :src en  :dest he,el,la
  ;;   light
  ;; #+END_SRC
  ;; then you can hit "C-c C-v e" to execute the code
  ;; org-babel-execute-src-block

      (use-package ob-translate
       :ensure t)
      (define-key org-mode-map (kbd "C-c C-v e") 'org-babel-execute-src-block)

;; https://orgmode.org/manual/Evaluating-code-blocks.html#DOCF142
;; I don't want to execute code blocks with C-c C-c
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)

#+END_SRC

* DONE Google-translate
  CLOSED: [2019-05-21 ter 12:53]
  
  https://github.com/atykhonov/google-translate/issues/52#issuecomment-423870290
  Use /home/vagner/bin/tkk_gg_transl_emacs.sh to get the 
  ;; (list 427110 1469889687) <--> list tkk correct number

#+BEGIN_SRC emacs-lisp 

  (use-package google-translate
  :ensure t
  :config
    (bind-keys*
    ("C-c t" . google-translate-at-point)
    ("C-c T" . google-translate-at-point-reverse)))

  (defun google-translate--get-b-d1 ()
	(list 432928 274893998))

#+END_SRC

* DONE Grasp - org-capture 
  CLOSED: [2019-05-20 seg 10:25]

  Make a bash script to start the server
  and install the grasp addon on firefox
  https://addons.mozilla.org/en-US/firefox/addon/grasp/?src=search
  I already have it on chromium

  https://github.com/karlicoss/grasp
  git clone https://github.com/karlicoss/grasp.git
  cd /grap/
  npm install
  ANY_HOST=yes npm run build
  or
  TARGET=firefox npm run build    
  Then install the extensions - addons
  https://github.com/karlicoss/grasp/releases
  and start the server:
  Instructions are in /home/vagner/org~/grasp

  #+BEGIN_SRC emacs-lisp


  #+END_SRC

* DONE Hippie-expand
  CLOSED: [2019-05-20 seg 10:25]

#+BEGIN_SRC emacs-lisp 

    (fset 'my-complete-file-name
       (make-hippie-expand-function '(try-complete-file-name-partially
					    try-complete-file-name)))
       (global-set-key "\M-/" 'my-complete-file-name)
       (global-set-key "\M-\\" 'comint-dynamic-complete-filename)

#+END_SRC

* DONE Helm-mu
  CLOSED: [2019-05-20 seg 11:32]

 With helm-mu you can find contacts and
 write straight away to them

 Usage - prefix helm-mu
 Usage - prefix helm-mu-contacts

#+BEGIN_SRC emacs-lisp

      (use-package helm-mu
       :ensure t)

     (define-key mu4e-main-mode-map "s" 'helm-mu)
     (define-key mu4e-headers-mode-map "s" 'helm-mu)
     (define-key mu4e-view-mode-map "s" 'helm-mu)

  #+END_SRC

* Icicles

#+BEGIN_SRC emacs-lisp 

      (require 'icicles)
      (icy-mode 1) ;; turn on Icicle mode each time you start Emacs

#+END_SRC

* TODO Image-magick

 apt install imagemagick
 package-install RET eimp-mode

#+BEGIN_SRC emacs-lisp

  (autoload 'eimp-mode "eimp" "Emacs Image Manipulation Package." t)
	(add-hook 'image-mode-hook 'eimp-mode)

  (defun do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))
  (global-set-key (kbd "C-c C-x C v")
		  'do-org-show-all-inline-images)

    ;; apt install aview
    (defun asciiview (imagefile)
      ;; use asciiview (part of aatools) to render image file as text to buffer
      (interactive "fChoose image file: ")
      (save-excursion
	(with-current-buffer (pop-to-buffer (format "*asciiview %s*" imagefile))
	  (insert
	   (car (last (butlast
		   (split-string
		    (shell-command-to-string
		     (format
		      "echo q | asciiview -driver stdout -kbddriver stdin %s 2>/dev/null"
		      (shell-quote-argument imagefile)))
		    "^L")))))
	  (view-mode))))

     (autoload 'thumbs "thumbs" "Preview images in a directory." t)

     ;; then M-x thumbs

#+END_SRC

* DONE Imaxima
  CLOSED: [2019-05-20 seg 11:44]

 Options are: large, Large, huge, Huge

#+BEGIN_SRC emacs-lisp 

 (defvar imaxima-fnt-size "Large")
 (defvar imaxima-use-maxima-mode-flag t)

#+END_SRC

* TODO Indenting lisp code blocks

#+BEGIN_SRC emacs-lisp 

	(setq org-src-tab-acts-natively t)

	  (defun my/org-cleanup ()
	  (interactive)
	  (org-edit-special)
	  (indent-buffer)
	  (org-edit-src-exit))

	  (defun indent-buffer ()
	  (interactive)
	  (indent-region (point-min) (point-max)))

#+END_SRC

* Input method portuguese-prefix

 C-c C-m set-input-method RET portuguese-prefix
 You need to setup your keyboard to "English (international AltGr dead keys)"
 for typing cedilla
 and "C-\" to toogle between input-methods

 But for typing cedilla system-wide, you need  "English international with dead keys"

#+BEGIN_SRC emacs-lisp 

#+END_SRC

* TODO Iso-accents
 http://stommel.tamu.edu/~baum/linux/LDP/HOWTO/LinuxDoc+Emacs+Ispell-HOWTO-4.html

#+BEGIN_SRC emacs-lisp 

;; (load-library "iso-acc")

#+END_SRC

* TODO Jabber-chat-with

#+BEGIN_SRC emacs-lisp

      ;; (require 'jabber)

      (use-package jabber 
       :ensure t)

#+END_SRC

* TODO JavaScript

 Also install jdee-server for java
 https://github.com/jdee-emacs/jdee
 https://github.com/jdee-emacs/jdee-server

#+BEGIN_SRC emacs-lisp

  ;; js2-mode

;;     (use-package js2-mode
;;       :interpreter (("node" . js2-mode))
;;       :bind (:map js2-mode-map ("C-c C-p" . js2-print-json-path))
;;       :mode "\\.\\(js\\|json\\)$"
;;       :config
;;       (add-hook 'js-mode-hook 'js2-minor-mode)
;;       (setq js2-basic-offset 2
;;	     js2-highlight-level 3
;;	     js2-mode-show-parse-errors nil
;;	     js2-mode-show-strict-warnings nil))

  ;; js2-refactor

;;     (use-package js2-refactor
;;       :defer t
;;       :diminish js2-refactor-mode
;;       :commands js2-refactor-mode
;;       :init
;;       (add-hook 'js2-mode-hook #'js2-refactor-mode)
;;       :config
;;       (js2r-add-keybindings-with-prefix "C-c C-m"))

  ;; auto-complete and ac-js2

;;     (use-package auto-complete
;;       :diminish auto-complete-mode
;;       :config
;;       (use-package auto-complete-config)
;;       (ac-config-default)
;;       (add-to-list 'ac-modes 'html-mode)
;;       (setq ac-use-menu-map t)
;;       (ac-set-trigger-key "TAB")
;;       (ac-set-trigger-key "<tab>"))

;;     (use-package ac-js2
;;       :defer t

;;       :init
;;       (add-hook 'js2-mode-hook 'ac-js2-mode)
;;       (setq ac-js2-evaluate-calls t))

  ;; json-snatcher

;;     (use-package json-snatcher
;;       :after js2-mode
;;       :config
;;       (bind-key "C-c C-g" 'jsons-print-path js2-mode-map))

  ;; web-beautify

  ;; also do `npm install -g js-beautify' in your shell
 ;;    (use-package web-beautify
  ;;     :after js2-mode
   ;;    :config
    ;;   (bind-key "C-c C-b" 'web-beautify-js js2-mode-map))

  ;; tern (with auto-complete)
  ;; sudo npm install -g tern

;;     (use-package tern
;;       :defer t
;;       :diminish tern-mode
;;       :init
;;       (add-hook 'js2-mode-hook 'tern-mode))

  ;; auto-completion for Tern
;;     (use-package tern-auto-complete
;;       :after tern
;;       :config
;;       (tern-ac-setup))

  ;; skewer-mode

;;     (use-package skewer-mode
;;       :bind (("C-c K" . run-skewer))
;;       :diminish skewer-mode
;;       :init
;;       (add-hook 'js2-mode-hook 'skewer-mode)
;;       (add-hook 'css-mode-hook 'skewer-css-mode)
;;       (add-hook 'html-mode-hook 'skewer-html-mode))

  #+END_SRC

* TODO Key-chord 

#+BEGIN_SRC emacs-lisp 

  ;; (require 'key-chord)
  ;; (key-chord-mode 1)

  ;; (key-chord-define evil-insert-state-map "ee" 'evil-normal-state)

#+END_SRC

* TODO Languagetool

https://github.com/mhayashi1120/Emacs-langtool
Ctrl-x m package-install RET langtool

#+BEGIN_SRC emacs-lisp

 ;; (setq langtool-java-bin "/usr/bin/java")

;;    (require 'langtool)

;;    (setq langtool-language-tool-jar "/opt/LanguageTool-4.4/languagetool-commandline.jar")
;;    (setq langtool-default-language "en-GB")

 ;; (setq langtool-language-tool-jar "/opt//LanguageTool-4.4/languagetool-server.jar")
 ;; (setq langtool-server-user-arguments '("-p" "8082"))

 ;; keybindings

;;    (global-set-key "\C-x4w" 'langtool-check)
;;    (global-set-key "\C-x4W" 'langtool-check-done)
;;    (global-set-key "\C-x4l" 'langtool-switch-default-language)
;;    (global-set-key "\C-x44" 'langtool-show-message-at-point)
;;    (global-set-key "\C-x4c" 'langtool-correct-buffer)

  #+END_SRC

* Link-hint

  #+BEGIN_SRC emacs-lisp


  #+END_SRC

* Linum-mode

#+BEGIN_SRC emacs-lisp 

  ;; linum-mode

  ;; (require 'linum)

  ;; (setq linum-relative-current-symbol "")

  ;; (linum-relative-global-mode)
  ;; (eval-after-load "linum"
  ;;   '(set-face-attribute 'linum nil :height 100))

  ;; (autopair-global-mode)

  ;; (global-undo-tree-mode)

  ;; (global-set-key (kbd "C-x l") 'visual-line-mode)

  ;; (defun linum-update-window-scale-fix (win)
  ;;   "fix linum for scaled text"
  ;;   (set-window-margins win
  ;; 		      (ceiling (* (if (boundp 'text-scale-mode-step)
  ;; 				      (expt text-scale-mode-step
  ;; 					    text-scale-mode-amount) 1)
  ;; 				  (if (car (window-margins))
  ;; 				      (car (window-margins)) 1)
  ;; 				  ))))
  ;; (advice-add #'linum-update-window :after #'linum-update-window-scale-fix)

#+END_SRC

* DONE Lyrics
  CLOSED: [2019-05-20 seg 13:33]

  M-x package-install RET lyrics  
  M-x lyrics RET
  M-x emms-get-lyrics-current-song

#+BEGIN_SRC emacs-lisp

  (use-package lyrics
   :ensure t)

#+END_SRC

* DONE Lispy
  CLOSED: [2019-05-20 seg 13:33]

 Install lispy

#+BEGIN_SRC emacs-lisp 

   (use-package lispy
      :ensure t)

     (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))

     (defun conditionally-enable-lispy ()
       (when (eq this-command 'eval-expression)
         (lispy-mode 1)))
     (add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)

#+END_SRC

* TODO lorem ipsum 

#+BEGIN_SRC emacs-lisp 
   
    (use-package lorem-ipsum
      :ensure t)

  ;;(lorem-ipsum-use-default-bindings)

  ;;  (add-hook 'sgml-mode-hook (lambda ()
  ;;			    (setq Lorem-ipsum-paragraph-separator "<br><br>\n"
  ;;				  Lorem-ipsum-sentence-separator "&nbsp class="comment">;&nbsp;"
  ;;				  Lorem-ipsum-list-beginning "<ul>\n"
  ;;				  Lorem-ipsum-list-bullet "<li>"
  ;;				  Lorem-ipsum-list-item-end "</li>\n"
  ;;				  Lorem-ipsum-list-end "</ul>\n")))

#+END_SRC

* TODO Magit-setup 
 
#+BEGIN_SRC emacs-lisp 

  (use-package magit 
   :ensure t
   :config
  (global-set-key (kbd "C-c g") 'magit-status))

#+END_SRC

* TODO Mplayer-mode

 download Mplayer.el from here:
 https://github.com/markhepburn/mplayer-mode

#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/elpa/mplayer-mode/")
  (require 'mplayer-mode)

#+END_SRC

* DONE Maximise emacs on startup 
  CLOSED: [2019-05-20 seg 13:37]

#+BEGIN_SRC emacs-lisp 

  (custom-set-variables

   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.

   '(ansi-color-names-vector
     ["#272822" "#F92672" "#A6E22E" "#E6DB74" "#66D9EF" "#FD5FF0" "#A1EFE4" "#F8F8F2"])
   '(column-number-mode t)
   '(compilation-message-face (quote default))
   '(custom-enabled-themes (quote (brin)))
   '(custom-safe-themes
     (quote
      ("986e7e8e428decd5df9e8548a3f3b42afc8176ce6171e69658ae083f3c06211c" "f869a5d068a371532c82027cdf1feefdc5768757c78c48a7e0177e90651503ad" "cbd8e65d2452dfaed789f79c92d230aa8bdf413601b261dbb1291fb88605110c" "fec45178b55ad0258c5f68f61c9c8fd1a47d73b08fb7a51c15558d42c376083d" "250268d5c0b4877cc2b7c439687f8145a2c85a48981f7070a72c7f47a2d2dc13" "5a39d2a29906ab273f7900a2ae843e9aa29ed5d205873e1199af4c9ec921aaab" "527df6ab42b54d2e5f4eec8b091bd79b2fa9a1da38f5addd297d1c91aa19b616" "df21cdadd3f0648e3106338649d9fea510121807c907e2fd15565dde6409d6e9" "50b64810ed1c36dfb72d74a61ae08e5869edc554102f20e078b21f84209c08d1" "4bf5c18667c48f2979ead0f0bdaaa12c2b52014a6abaa38558a207a65caeb8ad" "9c4acf7b5801f25501f0db26ac3eee3dc263ed51afd01f9dcfda706a15234733" "a62f0662e6aa7b05d0b4493a8e245ab31492765561b08192df61c9d1c7e1ddee" "1263771faf6967879c3ab8b577c6c31020222ac6d3bac31f331a74275385a452" "b3775ba758e7d31f3bb849e7c9e48ff60929a792961a2d536edec8f68c671ca5" "3cd28471e80be3bd2657ca3f03fbb2884ab669662271794360866ab60b6cb6e6" "8543b328ed10bc7c16a8a35c523699befac0de00753824d7e90148bca583f986" "6271fc9740379f8e2722f1510d481c1df1fcc43e48fa6641a5c19e954c21cc8f" "ffe80c88e3129b2cddadaaf78263a7f896d833a77c96349052ad5b7753c0c5a5" "93268bf5365f22c685550a3cbb8c687a1211e827edc76ce7be3c4bd764054bad" "b3bcf1b12ef2a7606c7697d71b934ca0bdd495d52f901e73ce008c4c9825a3aa" "85e6bb2425cbfeed2f2b367246ad11a62fb0f6d525c157038a0d0eaaabc1bfee" "100eeb65d336e3d8f419c0f09170f9fd30f688849c5e60a801a1e6addd8216cb" "aea30125ef2e48831f46695418677b9d676c3babf43959c8e978c0ad672a7329" "3f67aee8f8d8eedad7f547a346803be4cc47c420602e19d88bdcccc66dba033b" "d9850d120be9d94dd7ae69053630e89af8767c36b131a3aa7b06f14007a24656" "d9dab332207600e49400d798ed05f38372ec32132b3f7d2ba697e59088021555" "34ed3e2fa4a1cb2ce7400c7f1a6c8f12931d8021435bad841fdc1192bd1cc7da" "85d609b07346d3220e7da1e0b87f66d11b2eeddad945cac775e80d2c1adb0066" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "78c1c89192e172436dbf892bd90562bc89e2cc3811b5f9506226e735a953a9c6" "3d5ef3d7ed58c9ad321f05360ad8a6b24585b9c49abcee67bdcbb0fe583a6950" "ffac21ab88a0f4603969a24b96993bd73a13fe0989db7ed76d94c305891fad64" "fc7fd2530b82a722ceb5b211f9e732d15ad41d5306c011253a0ba43aaf93dccc" "ccde32eaf485eb7579412cd756d10b0f20f89bff07696972d7ee46cb2e10b89d" "3e34e9bf818cf6301fcabae2005bba8e61b1caba97d95509c8da78cff5f2ec8e" "1d079355c721b517fdc9891f0fda927fe3f87288f2e6cc3b8566655a64ca5453" "04790c9929eacf32d508b84d34e80ad2ee233f13f17767190531b8b350b9ef22" "45a8b89e995faa5c69aa79920acff5d7cb14978fbf140cdd53621b09d782edcf" "542e6fee85eea8e47243a5647358c344111aa9c04510394720a3108803c8ddd1" "316d29f8cd6ca980bf2e3f1c44d3a64c1a20ac5f825a167f76e5c619b4e92ff4" "6fc0ae7cc2abd82d8add1140874ccf8773feaaae73a704981d52fdf357341038" "b747fb36e99bc7f497248eafd6e32b45613ee086da74d1d92a8da59d37b9a829" "7e376fb329a0e46a04e8285b0e45199a083f98c69b0e1039ec1cb1d366e66e9c" "3a69621a68c2d3550a4c777ffc000e1ea66f5bc2f61112814c591e1bda3f5704" "72c7c8b431179cbcfcea4193234be6a0e6916d04c44405fc87905ae16bed422a" "0c29db826418061b40564e3351194a3d4a125d182c6ee5178c237a7364f0ff12" "b9b1a8d2ec1d5c17700e1a09256f33c2520b26f49980ed9e217e444c381279a9" "987b709680284a5858d5fe7e4e428463a20dfabe0a6f2a6146b3b8c7c529f08b" "39fe48be738ea23b0295cdf17c99054bb439a7d830248d7e6493c2110bfed6f8" "7beac4a68f03662b083c9c2d4f1d7f8e4be2b3d4b0d904350a9edf3cf7ce3d7f" "77c65d672b375c1e07383a9a22c9f9fc1dec34c8774fe8e5b21e76dca06d3b09" "889a93331bc657c0f05a04b8665b78b3c94a12ca76771342cee27d6605abcd0e" "5b8eccff13d79fc9b26c544ee20e1b0c499587d6c4bfc38cabe34beaf2c2fc77" "c158c2a9f1c5fcf27598d313eec9f9dceadf131ccd10abc6448004b14984767c" "5cd0afd0ca01648e1fff95a7a7f8abec925bd654915153fb39ee8e72a8b56a1f" "47ac4658d9e085ace37e7d967ea1c7d5f3dfeb2f720e5dec420034118ba84e17" "4f2ede02b3324c2f788f4e0bad77f7ebc1874eff7971d2a2c9b9724a50fb3f65" "c5a886cc9044d8e6690a60f33db45506221aa0777a82ad1f7fe11a96d203fa44" "3cc2385c39257fed66238921602d8104d8fd6266ad88a006d0a4325336f5ee02" "e9776d12e4ccb722a2a732c6e80423331bcb93f02e089ba2a4b02e85de1cf00e" "58c6711a3b568437bab07a30385d34aacf64156cc5137ea20e799984f4227265" "72a81c54c97b9e5efcc3ea214382615649ebb539cb4f2fe3a46cd12af72c7607" "9b59e147dbbde5e638ea1cde5ec0a358d5f269d27bd2b893a0947c4a867e14c1" default)))
   '(default-input-method nil)
   '(fci-rule-color "#49483E")
   '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
   '(highlight-tail-colors
     (quote
      (("#49483E" . 0)
       ("#67930F" . 20)
       ("#349B8D" . 30)
       ("#21889B" . 50)
       ("#968B26" . 60)
       ("#A45E0A" . 70)
       ("#A41F99" . 85)
       ("#49483E" . 100))))
   '(initial-frame-alist (quote ((fullscreen . maximized))))
   '(magit-diff-use-overlays nil)
   '(nrepl-message-colors
     (quote
      ("#336c6c" "#205070" "#0f2050" "#806080" "#401440" "#6c1f1c" "#6b400c" "#23733c")))
   '(org-export-backends
     (quote
      (ascii beamer html icalendar latex md odt org texinfo)))
   '(org-file-apps
     (quote
      ((auto-mode . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . "google-chrome --new-tab %s")
       ("\\.pdf\\'" . "evince %s"))))
   '(org-odt-preferred-output-format "docx")
   '(package-selected-packages
     (quote
      (aggressive-indent engine-mode diatheke org-mac-link w3m poetry fountain-mode gnugol keyword-search solarized-theme ## org-ref notmuch zenburn-theme white-sand-theme w3 transpose-frame togetherly theme-changer synosaurus synonyms switch-window suscolors-theme sunny-day-theme sublime-themes ssh speechd-el soft-stone-theme soft-morning-theme smex silkworm-theme shell-here seoul256-theme rudel punpun-theme projectile professional-theme powerline popup-switcher popup-kill-ring popup-imenu popup-edit-menu popup-complete pastelmac-theme paren-completer paredit pandoc ox-textile ox-reveal ox-pandoc organic-green-theme org-ac oneonone omnisharp occidental-theme nlinum multiple-cursors moz monokai-theme minimap markdown-mode linum-relative lavender-theme latex-unicode-math-mode key-chord idomenu icicles hydandata-light-theme heroku-theme helm-swoop green-phosphor-theme gnugo evil-org evil-leader ensime dracula-theme dictionary default-text-scale company-shell column-enforce-mode clojurescript-mode clojure-snippets clojure-quick-repls clojure-mode-extra-font-locking bash-completion base16-theme autopair aumix-mode anti-zenburn-theme alpha ace-jump-mode ac-math ac-js2 ac-html-csswatcher)))
   '(pdf-view-midnight-colors (quote ("#232333" . "#c7c7c7")))
   '(pos-tip-background-color "#A6E22E")
   '(pos-tip-foreground-color "#272822")
   '(send-mail-function (quote mailclient-send-it))
   '(show-paren-mode t)
   '(tool-bar-mode nil)
   '(vc-annotate-background nil)
   '(vc-annotate-color-map
     (quote
      ((20 . "#F92672")
       (40 . "#CF4F1F")
       (60 . "#C26C0F")
       (80 . "#E6DB74")
       (100 . "#AB8C00")
       (120 . "#A18F00")
       (140 . "#989200")
       (160 . "#8E9500")
       (180 . "#A6E22E")
       (200 . "#729A1E")
       (220 . "#609C3C")
       (240 . "#4E9D5B")
       (260 . "#3C9F79")
       (280 . "#A1EFE4")
       (300 . "#299BA6")
       (320 . "#2896B5")
       (340 . "#2790C3")
       (360 . "#66D9EF"))))
   '(vc-annotate-very-old-color nil)
   '(weechat-color-list
     (unspecified "#272822" "#49483E" "#A20C41" "#F92672" "#67930F" "#A6E22E" "#968B26" "#E6DB74" "#21889B" "#66D9EF" "#A41F99" "#FD5FF0" "#349B8D" "#A1EFE4" "#F8F8F2" "#F8F8F0")))

#+END_SRC

* DONE Message-mode
  CLOSED: [2019-05-20 seg 13:38]

#+BEGIN_SRC emacs-lisp 

 ;; colorizing multiply-quoted lines

(add-hook 'message-mode-hook
          (lambda ()
            (font-lock-add-keywords nil
               '(("^[ \t]*>[ \t]*>[ \t]*>.*$"
                  (0 'message-multiply-quoted-text-face))
                 ("^[ \t]*>[ \t]*>.*$"
                  (0 'message-double-quoted-text-face))))))

 ;; email address
(setq user-mail-address "vagnerrener@gmail.com"
        user-full-name "Vagner Rener")

 ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")

 ;; postponed message is put in the following draft file
  (setq message-auto-save-directory "~/Mail/drafts")

 ;; send the current buffer to a email list address  

(defun message-send-current-buffer (addr)
  (interactive (list (ido-completing-read "To: " known-email-addresses)))
  (let ((orig-buffer (current-buffer)))
    (message-mail addr
                  (if (equal 'eww-mode major-mode)
                      eww-current-url
                    (buffer-name orig-buffer)))
    (message-goto-body)
    (insert (save-excursion (set-buffer orig-buffer)
                            (buffer-substring (point-min) (point-max))))
    (message-send-and-exit)))

 ;; attach the content of a folder to a message

(defun message-attach-all-files-from-folder(&optional disposition dir-to-attach)
     "create the mml code to attach all files found in a given directory"
     (interactive)
  
     (if (eq disposition nil)
         (setq disposition (completing-read "Enter default disposition to use: " '(("attachment" 1) ("inline" 2)) nil t)))
  
     (if (eq dir-to-attach nil)
         (setq dir-to-attach (read-directory-name "Select a folder to attach: ")))
  
     (if (not (string-match "/$" dir-to-attach))
         (setq dir-to-attach (concat dir-to-attach "/")))
  
     (dolist (file (directory-files dir-to-attach))
       (when (and (not (string= "." file)) (not (string= ".." file)))
         (let (full-file-path mime-type)
           (setq full-file-path (concat dir-to-attach file))
           (if (file-readable-p full-file-path)
               (if (file-directory-p full-file-path)
                   (message-attach-all-files-from-folder disposition full-file-path)
  
                 (setq mime-type (substring (shell-command-to-string (concat "file --mime-type --brief " (shell-quote-argument (expand-file-name full-file-path)))) 0 -1))
                 (insert-string (concat "<#part type=\"" mime-type "\" filename=\"" full-file-path "\" disposition=" disposition ">\n")))))))) 

 ;; shortcuts

 ;; C-x m	brings a message buffer
 ;; C-h m	browse the full list
 ;; C-c C-c	send the message and exit the message buffer
 ;; C-c C-a	add an attachment
 ;; C-c C-k	cancel the message
 ;; C-c C-d	postpone the message
 ;; C-c C-s	send the message but don't exit the message buffer
 ;; C-c C-b	go to the start of the message
 ;; C-c C-z	kill text from point until end of buffer

#+END_SRC

* DONE Mingus 
  CLOSED: [2019-05-20 seg 13:38]

#+BEGIN_SRC emacs-lisp 

  (use-package mingus
   :ensure t)

#+END_SRC

* DONE Misc-1
  CLOSED: [2019-05-20 seg 13:38]

  https://www.emacswiki.org/emacs/ChangingCursorDynamically

#+BEGIN_SRC emacs-lisp 

    ;; Tmux interaction
    (use-package emamux
      :ensure t
      :defer t)

    ;; Debian stuff
    (use-package debian-el
      :ensure t
      :defer t)

    ;;  (setq frame-title-format "emacs")
    ;;  (set-default 'cursor-type 'hbar)
    ;;  (ido-mode)
    ;;  (column-number-mode)
    ;;  (show-paren-mode)
    ;;  (global-hl-line-mode)

    ;;;; Uncomment up or down, but not the two parts

    (defun 1on1-set-cursor-type (cursor-type)
      "Set the cursor type of the selected frame to CURSOR-TYPE.
    When called interactively, prompt for the type to use.
    To get the frame's current cursor type, use `frame-parameters'."
      (interactive
       (list (intern (completing-read
		       "Cursor type: "
		       (mapcar 'list '("box" "hollow" "bar" "hbar" nil))))))
      (modify-frame-parameters (selected-frame) (list (cons 'cursor-type cursor-type))))

  #+END_SRC

* TODO Misc-2

#+BEGIN_SRC emacs-lisp

   ;; (global-set-key (kbd "C-x t") 'truncate-line-mode)

  (global-set-key (kbd "C-c .") 'org-time-stamp)

  (global-set-key (kbd "M-/") 'undo-tree-visualize)

  (global-set-key (kbd "C-M-z") 'switch-window)

  (global-set-key (kbd "C->") 'ace-jump-mode)

  (global-set-key (kbd "C-M-)") 'transparency-increase)
  (global-set-key (kbd "C-M-(") 'transparency-decrease)

  (global-set-key (kbd "C-M-}") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-M-{") 'mc/mark-previous-like-this)

#+END_SRC

* DONE Misc-3 
  CLOSED: [2019-05-20 seg 13:39]

#+BEGIN_SRC emacs-lisp 

  ;; Brent.Longborough's .emacs

  (scroll-bar-mode -1) ; Disable hide scroll-bar
  (global-visual-line-mode 1); Proper line wrapping
  (if (display-graphic-p) (global-hl-line-mode t))
  ;; (global-hl-line-mode 1); Highlight current row
  (show-paren-mode 1); Matches parentheses and such in every mode
  (set-fringe-mode '(0 . 0)); Disable fringe because I use visual-line-mode
  (set-face-background hl-line-face "#f2f1f0"); Same color as greyness in gtk
  (setq inhibit-splash-screen t); Disable splash screen
  (setq visible-bell t); Flashes on error
  (setq calendar-week-start-day 1); Calender should start on Monday
  (add-to-list 'default-frame-alist '(height . 59)); Default frame height.
  (mapc 'global-unset-key [[up] [down] [left] [right]])

#+END_SRC

* Multiple-cursors

#+BEGIN_SRC emacs-lisp 

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+END_SRC

* mu4e

 https://www.emacswiki.org/emacs/mu4e 
 https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/
 https://zmalltalker.com/linux/mu.html
 http://pragmaticemacs.com/mu4e-tutorials/
  http://tech.memoryimprintstudio.com/the-ultimate-emailing-agent-with-mu4e-and-emacs/

 apt install mu4e
 If you get sentinel error:
 "error in process sentinel: Database empty; try indexing some messages"
 do: 
 mbsync -V gmail
 mu index --maildir=(G)gmail
 C-x m	compose-mail
 C-x 5 m	compose-mail-other-frame
 C-x 4 m	compose-mail-other window
 mu4e-org-mode	opens mu4e-org-mode
 message-send	sends a message in  mu4e-org-mode
 message-send-and-exit	sends a message and exits in  mu4e-org-mode
 helm-mu-contacts	look for contacts to send an email
 See ~/anki_flashcards/mu4e_hto/
 mu4e keep its contacts in ~/.mu/cache/

#+BEGIN_SRC emacs-lisp

    ;;	(eval-when-compile
    ;;	      (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
    ;;	  (require 'use-package))

    ;;	  (use-package mu4e)

		 (global-set-key (kbd "C-<f10>") 'mu4e)

		 ;; install evil-mu4e
    ;;	      (require 'evil-mu4e)

		 ;; default
		 ;; (setq mu4e-maildir "~/Mail")
		 ;; (setq mu4e-drafts-folder "/[Gmail].Drafts")
		 ;; (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
		 ;; (setq mu4e-trash-folder  "/[Gmail].Trash")

		 ;; default
		    (setq mu4e-maildir "~/gmail/")
		    (setq mu4e-sent-folder "/Sent")
		    ;; (setq mu4e-drafts-folder "/Drafts")
		    (setq mu4e-trash-folder   "/Junk")
		    (setq mu4e-trash-folder  "/Queue")
		    (setq mu4e-inbox-folder  "/Inbox")

		 ;; don't save message to Sent Messages, Gmail/IMAP takes care of this

		    (setq mu4e-sent-messages-behavior 'delete)

		 ;; setup some handy shortcuts
		 ;; you can quickly switch to your Inbox -- press ``ji''
		 ;; then, when you want archive some messages, move them to
		 ;; the 'All Mail' folder by pressing ``ma''.

		 ;; (setq mu4e-maildir-shortcuts
		 ;;   '( ("/INBOX"               . ?i)
		;;       ("/[Gmail].Sent Mail"   . ?s)
		;;       ("/[Gmail].Trash"       . ?t)
		;;       ("/[Gmail].All Mail"    . ?a)))

		   (setq mu4e-maildir-shortcuts
			   '( ("/Inbox"               . ?i)
			   ;; ("/Drafts"              . ?d)
			      ("/Junk"                . ?j)
			      ("/Sent"                . ?s)
			      ("/Queue"               . ?q)))

		  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
		  (setq mu4e-sent-messages-behavior 'delete)

		;; allow for updating mail using 'U' in the main view:
		;; (setq mu4e-get-mail-command "offlineimap")
		;; (setq mu4e-get-mail-command "mbsync ~/gmail")

		(setq mu4e-get-mail-command "mbsync -aV ~/gmail")

		     ;; something about ourselves

		     (setq
		      user-mail-address "vagnerrener@gmail.com"
		      user-full-name  "Vagner Rener"
		      message-signature
		      (concat
		       ;;"任文山 (Ren Wenshan)\n"
		       ;;"Email: renws1990@gmail.com\n"
		       ;;"Blog: wenshanren.org\n"
		       ;;"Douban: www.douban.com/people/renws"
		       "\n"))

		     ;; sending mail -- replace USERNAME with your gmail username
		     ;; also, make sure the gnutls command line utils are installed
		     ;; package 'gnutls-bin' in Debian/Ubuntu

		     (require 'smtpmail)
		     ;; for sending a message, just hit "C-c C-s"

		     (setq message-send-mail-function 'smtpmail-send-it
			   starttls-use-gnutls t
			   smtpmail-stream-type 'starttls
			   smtpmail-starttls-credentials
			   '(("smtp.gmail.com" 587 nil nil))
			   smtpmail-auth-credentials
			   (expand-file-name "~/.authinfo.gpg")
			   smtpmail-default-smtp-server "smtp.gmail.com"
			   smtpmail-smtp-server "smtp.gmail.com"
			   smtpmail-smtp-service 587
			   smtpmail-debug-info t)

		     ;; alternatively, for emacs-24 you can use:
		     ;;(setq message-send-mail-function 'smtpmail-send-it
			 ;;smtpmail-stream-type 'starttls
			 ;;smtpmail-default-smtp-server "smtp.gmail.com"
			 ;;smtpmail-smtp-server "smtp.gmail.com"
			 ;;smtpmail-smtp-service 587)

		     ;; don't keep message buffers around
		     (setq message-kill-buffer-on-exit t)

			 ;; https://github.com/bandresen/mu4e-send-delay

		 (add-to-list 'load-path "/home/vagner/.emacs.d/elpa/mu4e-send-delay")

    ;;	     (require 'mu4e-send-delay)

    ;;		 (mu4e-send-delay-setup)

	    ;;	 (add-hook 'mu4e-main-mode-hook 'mu4e-send-delay-initialize-send-queue-timer) 

		     ;;    (prefer-coding-system 'utf-8) ;; uncomment this if you notice your mails arriving garbled despite looking okay in the Drafts

		     ;;    (set-language-environment "UTF-8") ;; uncomment this if you notice your mails arriving garbled despite looking okay in the Drafts

			 ;; Recommended settings

			 ;; Assigning the scheduled enabled send to C-c C-c

		 (add-hook 'mu4e-main-mode-hook (lambda ()
		  (define-key mu4e-compose-mode-map
		    (kbd "C-c C-c") 'mu4e-send-delay-send-and-exit)))

	      ;;Now you can C-c C-c every mail
	      ;;Defaults

	      ;; mu4e-send-delay-default-delay is set to “3m”
	      ;; mu4e-send-delay-timer is set to every 2 minutes
	      ;; mu4e-send-delay-include-header-in-draft is true
	      ;; mu4e-send-strip-header-before-send is true

	  (setq mu4e-org-contacts-file  "~/org~/contacts.org") 
	  (add-to-list 'mu4e-headers-actions
	  '("org-contact-add" . mu4e-action-add-org-contact) t)
	  (add-to-list 'mu4e-view-actions
	  '("org-contact-add" . mu4e-action-add-org-contact) t)

	     (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines -1)))

	      ;; I want my format=flowed thank you very much
	;; mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
	;; each paragraph is a single long line; at sending, emacs will add the
	;; special line continuation characters.
	(setq mu4e-compose-format-flowed t)

	;; every new email composition gets its own frame! (window)
	(setq mu4e-compose-in-new-frame t)

	;; give me ISO(ish) format date-time stamps in the header list
	(setq mu4e-headers-date-format "%d-%m-%Y %H:%M")

	;; show full addresses in view message (instead of just names)
	;; toggle per name with M-RET
	(setq mu4e-view-show-addresses 't)

  #+END_SRC

* My-save-word

#+BEGIN_SRC emacs-lisp

    (global-set-key (kbd "<f5>") 'my-save-word)
	 (defun my-save-word ()
	(interactive)
	(let ((current-location (point))
	       (word (flyspell-get-word)))
	  (when (consp word)    
	    (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))  

#+END_SRC

* Oauth2

#+BEGIN_SRC emacs-lisp

;;    (use-package oauth2 
    
;;	   :config
;;	(eval-when-compile
;;	     (defvar oauth--token-data ())))

#+END_SRC

* Org-agenda

#+BEGIN_SRC emacs-lisp

	(require 'org)
        (setq org-directory "~/~org/")
	(define-key global-map "\C-cl" 'org-store-link)
	(define-key global-map "\C-ca" 'org-agenda)
	(setq org-log-done t)

  (setq org-agenda-files (list "~/org~/appointments.org"
			       "~/org~/home.org"
			       "~/org~/studies.org"
			       "~/org~/work.org"))

#+END_SRC

* Org-brain

 For concept maps
 [[https://github.com/Kungsgeten/org-brain][github_org-brain]]
 [[ http://rwx.io/posts/org-brain/][rwx_org-brain_post]]
 [[ http://www.bobnewell.net/publish/35years/orgbrain.htmlexternal_link ][Bobnewell tuto]]
 [[https://github.com/Kungsgeten/org-brain][Org-brain wiki page]]
 [[ http://blogarchive.thebrain.com/thought-relationships/external_link ][thebrain]]

#+BEGIN_SRC emacs-lisp

;;  (use-package org-brain  
;;    :init
;;    (setq org-brain-path "/home/vagner/org~/brain")
;;    ;; For Evil users
;;    (with-eval-after-load 'evil
;;      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
;;    :config
;;    (setq org-id-track-globally t)
;;    (setq org-brain-file-entries-use-title nil)
   ;; (setq org-id-locations-file "/home/vagner/org~/brain/.org-id-locations")
   ;;  (push '("b" "Brain" plain (function org-brain-goto-end)
;;	     "* %i%?" :empty-lines 1)
;;	   org-capture-templates)
;;    (setq org-brain-visualize-default-choices 'all)
;;    (setq org-brain-title-max-length 12))

#+END_SRC

* Org-capture with W3m/EWW

http://www.bobnewell.net/publish/35years/webclipper.html

  #+BEGIN_SRC emacs-lisp
    ;; org-eww and org-w3m should be in your org distribution, but see
    ;; note below on patch level of org-eww.

    (require 'org-eww)
    (require 'org-w3m)
    (defvar org-website-page-archive-file "~/org~/capture.org")
    (defun org-website-clipper ()
      "When capturing a website page, go to the right place in capture file,
       but do sneaky things. Because it's a w3m or eww page, we go
       ahead and insert the fixed-up page content, as I don't see a
       good way to do that from an org-capture template alone. Requires
       Emacs 25 and the 2017-02-12 or later patched version of org-eww.el."
     (interactive)

      ;; Check for acceptable major mode (w3m or eww) and set up a couple of
      ;; browser specific values. Error if unknown mode.

      (cond
       ((eq major-mode 'w3m-mode)
	 (org-w3m-copy-for-org-mode))
       ((eq major-mode 'eww-mode)
	 (org-eww-copy-for-org-mode))
       (t
	 (error "Not valid -- must be in w3m or eww mode")))

      ;; Check if we have a full path to the archive file. 
      ;; Create any missing directories.

      (unless (file-exists-p org-website-page-archive-file)
	(let ((dir (file-name-directory org-website-page-archive-file)))
	  (unless (file-exists-p dir)
	    (make-directory dir))))

      ;; Open the archive file and yank in the content.
      ;; Headers are fixed up later by org-capture.
  
      (find-file org-website-page-archive-file)
      (goto-char (point-max))
      ;; Leave a blank line for org-capture to fill in
      ;; with a timestamp, URL, etc.
      (insert "\n\n")
      ;; Insert the web content but keep our place.
      (save-excursion (yank))
      ;; Don't keep the page info on the kill ring.
      ;; Also fix the yank pointer.
      (setq kill-ring (cdr kill-ring))
      (setq kill-ring-yank-pointer kill-ring)
      ;; Final repositioning.
      (forward-line -1))

  #+END_SRC

* Org-cliplink

  install org-cliplink
  M-x install RET org-cliplink

  #+BEGIN_SRC emacs-lisp

    (use-package org-cliplink
     :ensure t)

    (defun org-brain-cliplink-resource ()
      "Add a URL from the clipboard as an org-brain resource.
    Suggest the URL title as a description for resource."
      (interactive)
      (let ((url (org-cliplink-clipboard-content)))
	(org-brain-add-resource
	 url
	 (org-cliplink-retrieve-title-synchronously url)
	 t)))

    ;; (define-key org-brain-visualize-mode-map (kbd "L") #'org-brain-cliplink-resource)

  #+END_SRC

* DONE Origami folding
  CLOSED: [2019-05-13 seg 20:08]

#+BEGIN_SRC emacs-lisp

  ;; (use-package origami
  ;; :ensure t)

#+END_SRC

* Ascii-art-to-unicode 

  #+BEGIN_SRC emacs-lisp

(defface aa2u-face '((t . nil))
  "Face for aa2u box drawing characters")
(advice-add #'aa2u-1c :filter-return
            (lambda (str) (propertize str 'face 'aa2u-face)))
(defun aa2u-org-brain-buffer ()
  (let ((inhibit-read-only t))
    (make-local-variable 'face-remapping-alist)
    (add-to-list 'face-remapping-alist
                 '(aa2u-face . org-brain-wires))
    (ignore-errors (aa2u (point-min) (point-max)))))
(with-eval-after-load 'org-brain
  (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer))

  #+END_SRC

* Org-journal

#+BEGIN_SRC emacs-lisp

	;; https://github.com/bastibe/org-journal

	(customize-set-variable 'org-journal-dir "~/org~/journal/")
	(customize-set-variable 'org-journal-date-format "%A, %d %B %Y")

	;; (require 'org-journal)

	(customize-set-variable  'org-journal-enable-agenda-integration t)
	(customize-set-variable 'org-journal-carryover-items nil)
	(customize-set-variable 'org-journal-enable-agenda-integration t)

    (setq org-journal-enable-agenda-integration t
	  org-icalendar-store-UID t
	  org-icalendar-include-todo "all"
	  org-icalendar-combined-agenda-file "~/org~/org-journal.ics")

    (global-set-key (kbd "C-c C-v") 'org-journal-search)
    (global-set-key (kbd "C-c C-g") 'org-journal-open-next-entry)
    (global-set-key (kbd "C-c C-h") 'org-journal-open-previous-entry)
    (global-set-key (kbd "C-c j") 'org-journal-new-entry)

#+END_SRC

* Org-mac-link 

 org-mac-link
 M-x omlg-grab-link RET

#+BEGIN_SRC emacs-lisp 

(add-hook 'org-mode-hook (lambda () 
  (define-key org-mode-map (kbd "C-c g") 'omlg-grab-link)))

#+END_SRC

* TODO Org-protocol 

  https://github.com/alphapapa/org-protocol-capture-html
  http://www.mediaonfire.com/blog/2017_07_21_org_protocol_firefox.html
  open about:config in firefox and look for "foo" to edit or delete  
  that entry

  #+BEGIN_SRC emacs-lisp

    (require 'org-protocol)  

  #+END_SRC

* TODO Orca

  Install orca from here:
  https://github.com/abo-abo/orca
  https://oremacs.com/2017/10/28/orca/
  
  ORg-CApture lisp of recipes

  #+BEGIN_SRC emacs-lisp

;;    (require 'orca)

    (setq orca-handler-list
      '((orca-handler-match-url
	 "https://www.reddit.com/emacs/"
	 "~/Dropbox/org/wiki/emacs.org"
	 "Reddit")
	(orca-handler-match-url
	 "https://emacs.stackexchange.com/"
	 "~/Dropbox/org/wiki/emacs.org"
	 "\\* Questions")
	(orca-handler-current-buffer
	 "\\* Tasks")
	(orca-handler-file
	 "~/Dropbox/org/ent.org"
	 "\\* Articles")))

    (defcustom orca-handler-list
  ;; ...
  :type '(repeat
          (choice
           (list
            :tag "Current buffer"
            (const orca-handler-current-buffer)
            (string :tag "Heading"))
           (list
            :tag "URL matching regex"
            (const orca-handler-match-url)
            (string :tag "URL")
            (string :tag "File")
            (string :tag "Heading"))
           (list
            :tag "Default"
            (const orca-handler-file)
            (string :tag "File")
            (string :tag "Heading")))))

  #+END_SRC

* TODO Org-present

  #+begin_src emacs-lisp 

    (use-package org-present
     :ensure t
     :config
      (setq org-present-text-scale 15)
      (add-hook 'org-present-mode-hook
      (defun org-present/start ()
      (org-present-big)
      (org-present-read-only)))
      (add-hook 'org-present-mode-quit-hook
      (defun org-present/start ()
      (org-present-small)
      (org-present-read-write)))) 

  #+end_src

** Org-present-remote

  #+begin_src emacs-lisp 

    (use-package org-present-remote
     :ensure t)

  #+end_src

* Org reveal

 https://orgmode.org/worg/org-tutorials/non-beamer-presentations.html
 https://github.com/yjwen/org-reveal
 https://github.com/hakimel/reveal.js/
 http://scottnesbitt.io/2017/01/24/org-reveal/
 https://nwidger.github.io/blog/post/making-a-reveal.js-presentation-with-org-reveal/
 http://jr0cket.co.uk/slides/revealjs.html

 Reveal.js - for creating slides like Beamer 
   
#+BEGIN_SRC emacs-lisp 

  (require 'org)
  ;; (require 'ox-reveal)

  ;; (use-package ox-reveal
  ;; :ensure ox-reveal)

  ;; (use-package htmlize
   ;; )

  ;; if it does not load, do:
  ;; Alt-x load-library RET ox-reveal

    (setq org-reveal-root "file:/home/vagner/reveal-slides/reveal.js")

   ;; (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")

   (setq org-reveal-mathjax t)

      ;; To load Org-reveal, type “Alt-x load-library”, then type “ox-reveal”.

      ;; ~/reveal-slides/reveal.js$ npm start - you have to start the server

      ;; for viewing your slides and using the remote control

      ;; Now you can export this manual into Reveal.js presentation by typing “C-c C-e R R”.

      ;; Open the generated “Readme.html” in your browser and enjoy the cool slides.

#+END_SRC

* TODO Org-tree-slide
  
  https://wolfecub.github.io/dotfiles/#org90e980d
  https://orgmode.org/worg/org-tutorials/non-beamer-presentations.html
  
  Call:
  org-tree-slide-mode
  org-tree-slide-presentation-profile
  org-tree-slide-display-header-toggle
  org-insert-link	if you want to insert images
  org-toggle-inline-images	if you want to toogle them 

  #+begin_src emacs-lisp 

       (use-package org-tree-slide
         :ensure t
	 :config
	 (add-hook 'org-tree-slide-mode-hook
		   (lambda ()
		     (if org-tree-slide-mode
			 ;; When mode is enabled
			 (progn (setq wolfe--enable-transient-map t)
				(wolfe/org-tree-set-transient-map))
		       ;; When mode is disabled
		       (setq wolfe--enable-transient-map nil)))))

    (defun wolfe/org-tree-set-transient-map ()
	 (interactive)
	 (if wolfe--enable-transient-map
	     (let ((map (make-sparse-keymap)))
	       (define-key map (kbd "<right>") 'org-tree-slide-move-next-tree)
	       (define-key map (kbd "<left>")  'org-tree-slide-move-previous-tree)
	       (define-key map (kbd "<up>")    'org-tree-slide-content)
	       (define-key map (kbd "<down>")  'org-tree-slide-display-header-toggle)
	       (set-transient-map map nil 'wolfe/org-tree-set-transient-map))
	   (makeunbound wolfe--enable-transient-map)))

  #+end_src
  
* Persistent-soft

 https://github.com/rolandwalker/persistent-soft

#+BEGIN_SRC emacs-lisp

    (require 'persistent-soft)
    (persistent-soft-store 'hundred 100 "mydatastore")
    (persistent-soft-fetch 'hundred "mydatastore")    ; 100
    (persistent-soft-fetch 'thousand "mydatastore")   ; nil

    ;; quit and restart Emacs

    (persistent-soft-fetch 'hundred "mydatastore")    ; 100 

  #+END_SRC

* Polymode

 https://polymode.github.io/installation/ 
 for working with R code, Rstudio
 and Rmarkdown - ".Rmd" files
 For Academic papers
 Install from MELPA: polymode, poly-markdown and "ess*" packages

#+BEGIN_SRC emacs-lisp 

    (require 'poly-markdown)
    (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))

#+END_SRC

* Poetry-mode 

 http://www.bobnewell.net/filez/poetry.el

 Install w3m on debian and emacs
 Put poetry.el inside /home/vagner/.emacs.d/elpa/poetry/
 Byte compile it with:

 Instrall rhyme - ~/Downloads/rhyme 

 emacs --batch --eval '(byte-compile-file "/home/vagner/.emacs.d/elpa/poetry/poetry.el")'

#+BEGIN_SRC emacs-lisp 

  ;; (require 'poetry)

    (load-library "~/.emacs.d/elpa/poetry/poetry.el")

#+END_SRC

* People with nice emacs config files

 List of people with nice emacs dotfiles files
 and some video tutorials:

 https://github.com/valignatev/dotfiles
 https://invidio.us/latest_version?id=FYPE0dIoq1I&itag=43

 [[https://cestlaz.github.io/stories/emacs/]] 

 http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html

 https://zzamboni.org/post/my-emacs-configuration-with-commentary/

 https://github.com/caisah/emacs.dz
 https://github.com/DiegoVicen/my-emacs#my-blog-publishing-configuration
 https://github.com/myTerminal/super-emacs

#+BEGIN_SRC emacs-lisp 

#+END_SRC

* TODO Perspective
  https://github.com/nex3/perspective-el 
  call it with "persp-mode"

 #+begin_src emacs-lisp 

   ;; (use-package perspective
   ;;   :ensure t)

 #+end_src
 
* Powerline 

 #+BEGIN_SRC emacs-lisp 
   (use-package powerline 
    :ensure t
    :config
    (powerline-center-theme)
    (setq powerline-center-default-separator 'wave))

 #+END_SRC

* Prolog

#+BEGIN_SRC emacs-lisp

  (autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
  (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
  (autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)
  (setq prolog-system 'swi)
  (setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
				  ("\\.m$" . mercury-mode))
				 auto-mode-alist))

#+END_SRC

* Quelpa

#+BEGIN_SRC emacs-lisp

(use-package quelpa-use-package
    :ensure t
    :init
    (setq quelpa-update-melpa-p nil))

#+END_SRC

* Re-builder for Regexp

#+BEGIN_SRC emacs-lisp

  (use-package re-builder
   :ensure t
   :config
   (setq reb-re-syntax 'string))

#+END_SRC

* Slime

#+BEGIN_SRC emacs-lisp 

  ;; Set your lisp system and, optionally, some contribs

  (slime-setup '(slime-repl))
;; (setq inferior-lisp-program "/usr/bin/sbcl")
;; Install sbcl from github sources and NOT with apt
    (setq inferior-lisp-program "/usr/local/bin/sbcl")

  ;; update this path to the correct location.

  ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa-src/slime-2.23/")

  (add-to-list 'load-path "~/.emacs.d/elpa/slime-20190319.930")
  (require 'slime-autoloads)

  (defun cliki:start-slime ()
	(unless (slime-connected-p)
	  (save-excursion (slime))))
  (add-hook 'slime-mode-hook 'cliki:start-slime)

  (eval-after-load "slime"
    '(progn
      ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa-src/slime-2.23/contrib/")
      (add-to-list 'load-path "~/.emacs.d/elpa/slime-20190319.930/contrib")
       (slime-setup '(slime-fancy slime-banner))
      (setq slime-complete-symbol*-fancy t)
      (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)))

#+END_SRC

* Smex 
  
#+BEGIN_SRC emacs-lisp 

 ;;    (global-set-key (kbd "M-x") 'smex)
 ;;    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

#+END_SRC

* Speed directories and files

#+BEGIN_SRC emacs-lisp

   (defvar vagner-filelist nil "alist for files i need to open frequently. Key is a short abbrev string, Value is file path string.")

  (setq vagner-filelist
	'(
	  ("emacs.org" . "~/.emacs.d/emacs.org" )
	  ("Documents" . "~/Documents/" )
	  ("org~" . "~/org~/" )
	  ("Download" . "~/Downloads/" )
	  ("Music" . "~/Music/")
	  ("Pictures" . "~/Pictures/" )
	  ;; more here
	  ) )

  (defun vagner-open-file-fast ()
    "Prompt to open a file from `vagner-filelist'.
  URL 'http://ergoemacs.org/emacs/emacs_hotkey_open_file_fast.html'
  Version 2015-04-23"
    (interactive)
    (let ((ξabbrevCode
	   (ido-completing-read "Open:" (mapcar (lambda (ξx) (car ξx)) vagner-filelist))))
      (find-file (cdr (assoc ξabbrevCode vagner-filelist)))))

#+END_SRC

* Splash-screen

 https://github.com/rakanalh/emacs-dashboard

#+BEGIN_SRC emacs-lisp 


  ;;(display-splash-screen)
       
       (use-package dashboard
        :ensure t
        :config
       (dashboard-setup-startup-hook))

       ;; Set the title

       ;;(setq dashboard-banner-logo-title "*Welcome to vagner@lea-pet.local Emacs Dashboard*")
       ;;(setq dashboard-banner-logo-title "*Welcome to lea@lea-pet.local Emacs Dashboard*")
       (setq dashboard-banner-logo-title "*Welcome to vagner@Cyberwarrior.local Emacs Dashboard*")
       ;;(setq dashboard-banner-logo-title "*Welcome to lea@Cyberwarrior.local Emacs Dashboard*")

       ;; Set the banner
       ;; (setq dashboard-startup-banner [VALUE])
       (setq dashboard-startup-banner 'official)
       ;; Value can be
       ;; 'official which displays the official emacs logo
       ;; 'logo which displays an alternative emacs logo
       ;; 1, 2 or 3 which displays one of the text banners
       ;; "path/to/your/image.png which displays whatever image you would prefer
       (setq dashboard-items '((recents  . 10)
			     (bookmarks . 5)
			     (projects . 5)
			     (agenda . 5)))

   ;;  You can use any of the following shortcuts inside Dashboard

   ;;  Shortcut	Function
   ;;  Tab Or C-i	Next Item
   ;;  Shift-Tab	Previous Item
   ;;  Return / Mouse Click / C-m	Open
   ;;  r	Recent files
   ;;  m	Bookmarks
   ;;  p	Projects
   ;;  a	Org-Mode Agenda
   ;;  g	Refresh contents
   ;;  {	Previous section
   ;;  }	Next section

#+END_SRC

* Scheme 

 Set the Scheme environment in emacs

 1. apt install racket guile
 2. Alt-x package-install RET geiser
 3. Alt-x package-install RET scheme-complete

 Then in emacs to get the REPL, do: 

 Alt-x run-geiser

 you can save scheme files as: $file.ss our $file.scm

  #+BEGIN_SRC emacs-lisp 

  #+END_SRC

* Shackle

#+BEGIN_SRC emacs-lisp

  (setq shackle-rules
       '(((svg-2048-mode circe-query-mode) :same t)
	 ("*Help*" :align t :select t)
	 ("\\`\\*helm.*?\\*\\'" :regexp t :align t)
	 ((compilation-mode "\\`\\*firestarter\\*\\'"
	   "\\`\\*magit-diff: .*?\\'") :regexp t :noselect t)
	 ("\\`\\*cider-repl .*" :regexp t :align t :size 0.2)
	 ((inferior-scheme-mode "*shell*" "*eshell*") :popup t))
	shackle-default-rule '(:select t)
	shackle-default-size 0.4
	shackle-inhibit-window-quit-on-same-windows t) 

#+END_SRC

* Synonyms and Thesaurus

#+BEGIN_SRC emacs-lisp 

  (use-package synonyms
    :disabled
    :ensure t
    :init
    :config
    (setq synonyms-file "~/thesaurus/mthesaur.txt")
    (setq synonyms-file "~/thesaurus/brazilian-synonyms.txt")
    (setq synonyms-cache-file "~/thesaurus/thes.cache")

    (evil-leader/set-key "sy" 'synonyms))

  (use-package powerthesaurus
    :ensure t
    :config
    (defun powerthesaurus-lookup-word-at-point ()
      "Find the word at point synonyms at powerthesaurus.org."
      (interactive)
      (if (region-active-p)
	  (powerthesaurus-lookup-word (region-beginning) (region-end))
	(save-mark-and-excursion
	  (when (not (looking-at "\\<"))
	    (backward-word))
	  (set-mark (point))
	  (forward-word)
	  (activate-mark)
	  (powerthesaurus-lookup-word (region-beginning) (region-end)))))

    (evil-leader/set-key "s" 'powerthesaurus-lookup-word-at-point)
    (evil-leader/set-key "S" 'powerthesaurus-lookup-word))

#+END_SRC

* Sword-to-org

 https://github.com/alphapapa/sword-to-org

#+BEGIN_SRC emacs-lisp

    (add-to-list 'load-path "~/.emacs.d/elpa/sword-to-org/")
    (require 'sword-to-org)

#+END_SRC

* Telega

   telega.el requires at least GNU emacs 26.1 with imagemagick and svg support

   https://github.com/zevlg/telega.el

  #+begin_src emacs-lisp

    ;; (add-to-list 'load-path "~/.emacs.d/elpa/telega.el")
    ;; (require 'telega)

    ;; This is the receipt to install telega
    ;; After installation, comment it
  
     (use-package telega
          :quelpa (telega
          :fetcher github
          :repo "zevlg/telega.el"
          :branch "telega-with-inserters"))

    ;; (add-to-list 'load-path "~/.emacs.d/quelpa/build/telega")

    (use-package telega
      :quelpa (telega
	       :fetcher github
	       :repo "zevlg/telega.el"
	       :branch "master"
	       :files (:defaults "README.md" "etc" "server" "Makefile"
				 "test.el"))
      :load-path "~/.emacs.d/quelpa/build/telega"
      :bind 
      (:map telega-msg-button-map
	    ("j" . nil)
	    ("k" . nil)
	    ("h" . nil)
	    ("l" . nil))
      :custom (telega-use-notifications t))  

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;     :custom								    ;;
    ;; (telega-use-notifications t)						    ;;
    ;; (telega-completing-read-function #'ivy-completing-read)			    ;;
    ;; (telega-symbol-msg-succeeded "○")						    ;;
    ;; (telega-symbol-msg-viewed "●")						    ;;
    ;; :custom-face								    ;;
    ;; (telega-chat-inline-reply ((t (:inherit 'font-lock-comment-face))))	    ;;
    ;; (telega-chat-user-title ((t (:inherit 'font-lock-function-name-face))))	    ;;
    ;; (telega-chat-timestamp ((t (:inherit 'org-agenda-date))))			    ;;
    ;; (telega-msg-status ((t (:inherit 'font-lock-constant-face))))		    ;;
    ;; :hook									    ;;
    ;; (telega-root-mode . telega-notifications-mode)				    ;;
    ;; :config									    ;;
    ;; (setenv "LD_LIBRARY_PATH"							    ;;
    ;; 	  (concat								    ;;
    ;; 	   (expand-file-name "~/.telega/:")					    ;;
    ;; 	   (getenv "LD_LIBRARY_PATH")))						    ;;
    ;; (require 'telega-notifications)						    ;;
    ;; :commands (telega)								    ;;
    ;; :defer t)									    ;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  #+end_src

* Text-translation

 https://www.emacswiki.org/emacs/TextTranslator

 bzr branch lp:~khiker/+junk/text-translator

#+BEGIN_SRC emacs-lisp 

  (add-to-list 'load-path "~/.emacs.d/elpa/text-translator/")
  (require 'text-translator)
  (require 'text-translator-load)
  (require 'text-translator-vars)

  (global-set-key "\C-x\M-t" 'text-translator)

  #+END_SRC

* Text-scale 

#+BEGIN_SRC emacs-lisp 

  ;; Text-scale

  (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
  (global-set-key (kbd "C-M--") 'default-text-scale-decrease)

#+END_SRC

* TODO Tramp

https://www.gnu.org/software/tramp/

Quick-start tramp

Faster than the default scp

C-x C-f /remotehost:filename  RET (or /method:user@remotehost:filename)
C-x C-f /[method/user@remotehost]/filename

You can also edit local files as root with either of the following 
(note the double colon, which is required)

C-x C-f /su::/etc/hosts
C-x C-f /sudo::/etc/hosts

Also trump now integrates well with eShell

Windows with Cygwin tools installed, assuming no password is required

(setq tramp-default-method "sshx")

#+BEGIN_SRC emacs-lisp

  (custom-set-variables
   '(tramp-default-method "ssh")
   '(tramp-default-user "vagner")
   '(tramp-default-host "lea-pet.local:2401"))

#+END_SRC

* Treemacs
  
  Treemacs requires at leaste emacs 25.2

#+BEGIN_SRC emacs-lisp

  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
	    treemacs-width                      25
	    treemacs-indentation                2
	    treemacs-git-integration            t
	    treemacs-collapse-dirs              3
	    treemacs-silent-refresh             nil
	    treemacs-change-root-without-asking nil
	    treemacs-sorting                    'alphabetic-desc
	    treemacs-show-hidden-files          t
	    treemacs-never-persist              nil
	    treemacs-is-never-other-window      nil
	    treemacs-goto-tag-strategy          'refetch-index)))

#+END_SRC

* TODO Trident convert lisp 2 javascript

 https://github.com/johnmastro/trident-mode.el

 Install packages dash, slime and trident  

#+BEGIN_SRC emacs-lisp

	  (add-to-list 'auto-mode-alist (cons "\\.paren\\'" 'lisp-mode))
      (add-hook 'lisp-mode-hook
		#'(lambda ()
		    (when (and buffer-file-name
			       (string-match-p "\\.paren\\>" buffer-file-name))
		      (unless (slime-connected-p)
			(save-excursion (slime)))
		      (trident-mode +1))))

	  ;; (use-package :parenscript)

	  ;; issue this command in the REPl:
	  ;; (ql:quickload :parenscript)
	  ;; Then you can use "trident-expand-buffer" 
          ;; etc...

#+END_SRC

* Unicode-fonts
  
#+BEGIN_SRC emacs-lisp

  (use-package unicode-fonts
   :ensure t
   :config
   (unicode-fonts-setup))

#+END_SRC

* Visual-regexp-steroids

#+BEGIN_SRC emacs-lisp

  ;; you have to issue: Ctrl-x m RET vr/  to see the command
  ;; if the files are not already in the load path

  (add-to-list 'load-path "/home/vagner/.emacs.d/elpa/visual-regexp-20170301.116/")
  (add-to-list 'load-path "/home/vagner/.emacs.d/elpa/visual-regexp-steroids-20170222.253")
  (require 'visual-regexp)
  (require 'visual-regexp-steroids)
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (define-key global-map (kbd "C-c m") 'vr/mc-mark)
  ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
  (define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
  (define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s  

#+END_SRC

* Emacs-w3m

 http://emacs-w3m.namazu.org/#requirements
 Install it with cvs -> autoconf && ./configure && sudo make install

 or github -> https://github.com/emacs-w3m/emacs-w3m
 https://www.emacswiki.org/emacs/emacs-w3m
 Install apel --> with package-install
 Install flim --> with package-install
 http://emacs-w3m.namazu.org/info/emacs-w3m.html#SEC_Top
 Just type Alt-x w3m, and you can use emacs-w3m
 
#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/elpa/emacs-w3m/")

    (require 'w3m-load)
    (require 'mime-w3m)

    ;; (setq w3m-display-inline-images t) 
       (setq w3m-default-display-inline-images t) 
       (setq w3m-default-save-directory "~/Downloads")

#+END_SRC

* Wanderlust email-client

#+BEGIN_SRC emacs-lisp 

  (autoload 'wl "wl" "Wanderlust" t)

  ;; apt install bbdb 

  (require 'bbdb) 

  ;; wanderlust email-client

  ;; (autoload 'wl "wl" "Wanderlust" t)

  ;;; bbbd for managing address book on wanderlust
  ;;; https://emacs-fu.blogspot.com.br/2009/08/managing-e-mail-addresses-with-bbdb.html

  (setq bbdb-file "~/.emacs.d/bbdb")           ;; keep ~/ clean; set before loading
  (require 'bbdb) 
  (bbdb-initialize)
  (setq 
      bbdb-offer-save 1                        ;; 1 means save-without-asking

  bbdb-use-pop-up t                        ;; allow popups for addresses
  ;; bbdb-electric-p t                        ;; be disposable with SPC
  bbdb-popup-target-lines  1               ;; very small

  bbdb-dwim-net-address-allow-redundancy t ;; always use full name
  bbdb-quiet-about-name-mismatches 2       ;; show name-mismatches 2 secs

  bbdb-always-add-address t                ;; add new addresses to existing...
					   ;; ...contacts automatically
  bbdb-canonicalize-redundant-nets-p t     ;; x@foo.bar.cx => x@bar.cx

  bbdb-completion-type nil                 ;; complete on anything

  bbdb-complete-name-allow-cycling t       ;; cycle through matches
					   ;; this only works partially

  bbbd-message-caching-enabled t           ;; be fast
  bbdb-use-alternate-names t               ;; use AKA

  bbdb-elided-display t                    ;; single-line addresses

  ;; auto-create addresses from mail
  bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook   
  bbdb-ignore-some-messages-alist ;; don't ask about fake addresses
  ;; NOTE: there can be only one entry per header (such as To, From)
  ;; http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html

  '(( "From" . "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter"))
  )

   (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)

#+END_SRC

* Winner-mode

#+BEGIN_SRC emacs-lisp 

  (when (fboundp 'winner-mode)
       (winner-mode 1))

#+END_SRC

* Wrap lines 

#+BEGIN_SRC emacs-lisp 

;; Wrap lines without breaking the last word
(add-hook 'org-mode-hook #'toggle-word-wrap)

#+END_SRC

* Youtube-dl

 This youtube-dl is different from the CLI one
 Because only downloads videos from YT site itself
 gitc https://github.com/skeeto/youtube-dl-emacs.git
 https://next.atlas.engineer/article/emacs-hacks.org

#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/elpa/youtube-dl-emacs")
  (require 'youtube-dl)

#+END_SRC

* Elisp
  
  https://github.com/a13/emacs.d

  #+BEGIN_SRC emacs-lisp 

    ;;    (use-package elisp
    ;;      :hook
    ;;      (after-save . check-parens)
    ;;      )

	(use-package highlight-defined
	  :ensure t
	  :custom
	  (highlight-defined-face-use-itself t)
	  :hook
	  (emacs-lisp-mode . highlight-defined-mode))

	(use-package highlight-quoted
	  :ensure t
	  :hook
	  (emacs-lisp-mode . highlight-quoted-mode))

	(use-package eros
	  :ensure t
	  :hook
	  (emacs-lisp-mode . eros-mode))

	(use-package suggest
	  :ensure t
	  :defer t)

	(use-package ipretty
	  :ensure t
	  :config
	  (ipretty-mode 1))

	(use-package nameless
	  :ensure t
	  :hook
	  (emacs-lisp-mode .  nameless-mode)
	  :custom
	  (nameless-global-aliases '())
	  (nameless-private-prefix t))

	;; bind-key can't bind to keymaps
	(use-package erefactor
	  :ensure t
	  :defer t)

	(use-package flycheck-package
	  :ensure t
	  :defer t
	  :after flycheck
	  (flycheck-package-setup))


      ;; If emacs does not work because of 
      ;; Dash package complaint, install it with
      ;; apt install dash-el - then install it with
      ;; Alt-x package-reinstall RET dash RET and remove 
      ;; it again with "apt purge dash" 

	 (use-package dash
         :ensure t
	   :custom
	   (dash-enable-fontlock t))

  #+END_SRC

* Network 

  #+BEGIN_SRC emacs-lisp 
    (use-package net-utils
      :ensure-system-package traceroute
      :bind
      (:map mode-specific-map
	    :prefix-map net-utils-prefix-map
	    :prefix "n"
	    ("p" . ping)
	    ("i" . ifconfig)
	    ("w" . iwconfig)
	    ("n" . netstat)
	    ("p" . ping)
	    ("a" . arp)
	    ("r" . route)
	    ("h" . nslookup-host)
	    ("d" . dig)
	    ("s" . smbclient)
	    ("t" . traceroute)))

  #+END_SRC

* Save-place

#+BEGIN_SRC emacs-lisp

  ;; Keep point position between re-opening files with recentf/ido  

     (require 'saveplace)
     (save-place-mode 1)

#+END_SRC

* shell-pop 

#+BEGIN_SRC emacs-lisp

  (use-package shell-pop
  :ensure t
    :bind (("C-t" . shell-pop))
    :config
    (setq shell-pop-shell-type (quote ("ehell" "eshell" (lambda nil (eshell)))))
    (setq shell-pop-term-shell "eshell")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))

#+END_SRC

* Simple-mpc

#+BEGIN_SRC emacs-lisp

  (use-package simple-mpc
   :ensure t)

#+END_SRC

* Command-log-mode 
  
  You can also use screenkey for emacs and vim

#+BEGIN_SRC emacs-lisp

 (use-package command-log-mode
    :commands (command-log-mode global-command-log-mode)
    :bind ("C-c o" . clm/toggle-command-log-buffer))

#+END_SRC

* Circe

#+BEGIN_SRC emacs-lisp  

    (use-package circe
      :ensure t
      :bind ("<S-f2>" . circe-init))

	(use-package sauron-circe
      :ensure quelpa
      :quelpa (sauron-circe :repo "seblemaguer/sauron-circe" :fetcher github)
      :after sauron
      :config
      (sauron-circe-start))

  (setq auth-sources '("~/.authinfo.gpg"))

  (defun my-fetch-password (&rest params)
    (require 'auth-source)
    (let ((match (car (apply 'auth-source-search params))))
      (if match
	  (let ((secret (plist-get match :secret)))
	    (if (functionp secret)
		(funcall secret)
	      secret))
	(error "Password not found for %S" params))))

  (defun my-nickserv-password (server)
    (my-fetch-password :login "Achylles" :machine "irc.freenode.net"))

  (setq circe-network-options
      '(("Freenode"
	 :nick "Achylles"

       ;;  :channels ("#alsa" "#bash" "#badrock" "#c" "#clnoobs" "#clojure" "#clojure-beginners" "#clschool" "#coreboot" "#debian" "#debian-offtopic" "#devuan" "#emacs" "#emacs-es" "#erc" "#evil-mode" "#filmsbykris" "#freebsd" "#freedos" "#git" "#gitlab" "#guix" "#hardware" "#haskell" "#i3" "#javascript" "#julia" "#latex" "#libreoffice" "#lisp" "#lisp-es" "#lispcafe" "#lispweb" "#maria" "#math" "#matrix"  "#maxima" "#mpd" "#mysql" "#neomutt" "#oauth" "#org-mode" "#pcbsd" "#physics" "#plasma" "#prolog" "#python" "#qtox" "#ranger" "#regex" "#ring" "#sbcl" "#scala" "#slime" "#startups" "#sword" "#tmux" "#trueos" "#vim" "#vimus" "#wanderlust" "#weechat" "#xfce" "#xiphos")

	 :nickserv-password my-nickserv-password)))

#+END_SRC

* Emms-get-lyrics 

  #+BEGIN_SRC emacs-lisp
   
    (use-package emms
     :ensure t)

    (add-to-list 'load-path "~/.emacs.d/elpa/emms-get-lyrics/")
    (require 'emms-get-lyrics)

  #+END_SRC

* TODO MPV as a player

#+BEGIN_SRC emacs-lisp

    (use-package emms-player-simple-mpv
      :ensure t
      :after emms
      :config

     ;; Subpackages
   ;;  (use-package emms-player-simple-mpv-e.g.time-display)
   ;;  (use-package emms-player-simple-mpv-e.g.playlist-fname)
   ;;  (use-package emms-player-simple-mpv-e.g.hydra)
   ;;  (use-package emms-player-simple-mpv)
   ;;  (use-package emms-player-simple-mpv-control-functions)

     (define-emms-simple-player-mpv my-mpv '(file url streamlist playlist)
       (concat "\\`\\(http[s]?\\|mms\\)://\\|"
		(apply #'emms-player-simple-regexp
		       "aac" "pls" "m3u"
		       emms-player-base-format-list))
       "mpv" "--no-terminal" "--force-window=no" "--audio-display=no")

     (emms-player-simple-mpv-add-to-converters
      'emms-player-my-mpv "." '(playlist)
      (lambda (track-name) (format "--playlist=%s" track-name)))

     (add-to-list 'emms-player-list 'emms-player-my-mpv))

     (use-package emms-mark-ext :ensure t)

#+END_SRC

* TODO memacs

  sudo pip install memacs

  #+BEGIN_SRC emacs-lisp
   
  #+END_SRC

* TODO Genealogy

  http://lifelines.sourceforge.net/faq.html 
  Lifelines ->
  apt install lifelines lifelines-doc lifelines-report
  seek for lines-mode.el 

  https://homepages.rootsweb.com/~pmcbride/gedcom/55gctoc.htm
  Gedcom
  https://github.com/benanhalt/gedcom
  http://lifelines.wikidot.com/editing-gedcom
  https://www.rootsweb.com/
  https://medium.com/or%C3%ADgenes-online/qu%C3%A9-es-un-archivo-gedcom-y-c%C3%B3mo-se-utiliza-6a6da7c78ac
  http://wiki-en.genealogy.net/Gedcom_5.5EL
  https://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm
  
  See: gramps as well
  https://gramps-project.org/introduction-WP/
  https://www.gramps-project.org/wiki/index.php/GEDCOM_Extensions

  #+BEGIN_SRC emacs-lisp

    (add-to-list 'load-path "~/.emacs.d/elpa/gedcom")

    (autoload 'gedcom-mode "gedcom")
    (setq auto-mode-alist (cons '("\\.ged$" . gedcom-mode) auto-mode-alist))

  #+END_SRC

* DONE Defaults apps  
  CLOSED: [2019-05-26 dom 11:33]

#+BEGIN_SRC emacs-lisp

  (setcdr (assq 'system org-file-apps-defaults-gnu ) "xdg-open %s")

#+END_SRC

* DONE org-chef 
  CLOSED: [2019-05-27 seg 12:49]
   
  https://github.com/Chobbes/org-chef
  
  Supported sites

  http://allrecipes.com/
  http://www.geniuskitchen.com/
  https://www.simplyrecipes.com/
  https://www.marthastewart.com/
  https://www.budgetbytes.com/
  https://www.culturesforhealth.com/
  https://www.seriouseats.com/
  http://www.marmiton.org/ (french)
  https://www.reluctantgourmet.com/
  https://www.chefkoch.de/
  https://steamykitchen.com/
  https://showmetheyummy.com/
  https://nytimes.com/
  http://www.xiachufang.com/ (下厨房 Chinese)
  https://www.finecooking.com/
  
#+BEGIN_SRC emacs-lisp

  (use-package org-chef
    :ensure t)

#+END_SRC

* TODO Blogging with emacs

https://diego.codes/post/blogging-with-org/
https://github.com/DiegoVicen/my-emacs#my-blog-publishing-configuration
https://ambrevar.xyz/blog-architecture/

  #+BEGIN_SRC emacs-lisp

  #+END_SRC

** TODO Org2blog
  
 Hugo is better than org2blog
 
 Blogging to WordPress, using emacs

 https://arenzana.org/2019/04/blogging-with-org-mode/
 https://github.com/org2blog/org2blog
 https://happytowander.com/create-self-hosted-wordpress-blog-free/

 #+BEGIN_SRC emacs-lisp

 #+END_SRC

** TODO Ox-hugo 

   Hugo is better than org2blog
   https://gohugo.io/getting-started/quick-start/
   https://zzamboni.org/post/my-emacs-configuration-with-commentary/
   How to set up hugo:
   apt install hugo
   then:
   cd ~/org~/ and issue
   hugo new site blog
   cd ~/org~/blog
   git init
   Then add a theme:
   cd ~/org~/blog/themes/
   git submodule add https://github.com/budparr/gohugo-theme-ananke.git ananke
   cd .. 
   echo 'theme = "ananke"' >> config.toml 
   hugo new posts/my-first-post.md 
   Edit the my-first-post.md
   cd ~/org~/blog
   then start the server
   hugo server -D
   open it in:
   http://localhost:1313/
   in emacs it is "org-hugo"

   https://gohugo.io/hosting-and-deployment/hosting-on-gitlab/
   https://gohugo.io/hosting-and-deployment/hosting-on-netlify/

 #+BEGIN_SRC emacs-lisp

    (use-package ox-hugo
     :ensure t   
     :after ox)

    (require 'ox-hugo)
    (require 'org-hugo-auto-export-mode)

   ;;  (use-package org-capture
   ;;    :ensure nil
   ;;    :config
   ;;     (defun org-hugo-new-subtree-post-capture-template ()
   ;; ;;      "Returns `org-capture' template string for new Hugo post.
   ;; ;;    See `org-capture-templates' for more information."

   ;;      (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
   ;; 	 (fname (org-hugo-slug title)))
   ;;        (mapconcat #'identity
   ;; 	       `(,(concat "* TODO " title)
   ;; 		 ":PROPERTIES:"
   ;; 		 ,(concat ":EXPORT_HUGO_BUNDLE: " fname)
   ;; 		 ":EXPORT_FILE_NAME: index"
   ;; 		 ":END:"
   ;; 		 "%?\n")                ;Place the cursor here finally
   ;; 	       "\n")))
   ;;    (add-to-list 'org-capture-templates
   ;; 	     '("o"                ;`org-capture' binding + o
   ;; 	       "Post"
   ;; 	       entry
   ;; 	       ;; It is assumed that below file is present in `org-directory'
   ;; 	       ;; and that it has an "Ideas" heading. It can even be a
   ;; 	       ;; symlink pointing to the actual location of all-posts.org!
   ;; 	       (file+datetree (concat org-directory "~/blog/content/posts/my-post.org")
   ;; "* TODO %^{Description}  %^g\n%?\nAdded: %U")
   ;; 	       (function org-hugo-new-subtree-post-capture-template))))

 #+END_SRC

** TODO Easy-hugo
  
 https://github.com/masasam/emacs-easy-hugo
 https://gohugo.io/tools/editors/#emacs
 https://ox-hugo.scripter.co/

 #+BEGIN_SRC emacs-lisp

   ;; (use-package easy-hugo
   ;;   :custom
   ;;   (easy-hugo-basedir "~/Personal/devel/zzamboni.org/zzamboni.org/")
   ;;   (easy-hugo-url "http://zzamboni.org/")
   ;;   (easy-hugo-previewtime "300")
   ;;   ;;(define-key global-map (kbd "C-c C-e") 'easy-hugo)
   ;;   )

 #+END_SRC

** TODO Lazyblorg

   https://github.com/novoid/lazyblorg
   ~/Downloads/lazyblorg/ 
  
    Installing:

    sudo pip install memacs
    sudo apt install python3-werkzeug
    sudo apt install pandoc
    sudo pip install python3-pypandoc
    sudo apt install python3-opencv
    sudo npm install -g sass
    git clone https://github.com/novoid/lazyblorg.git
    cd ~/Downloads/lazyblorg/
    ./example_invocation.sh

   #+BEGIN_SRC emacs-lisp

   #+END_SRC
  
* TODO Org-refile
  
https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/
  
  #+BEGIN_SRC emacs-lisp

(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling

  #+END_SRC

* TODO Org-capture

Download the org-capture addon for
Firefox and Chromium
[[http://chadok.info/firefox-org-capture/][org-capture.xpi]]

You have to install org-plus-contrib

#+BEGIN_SRC emacs-lisp 

    ;; https://cestlaz.github.io/posts/using-emacs-24-capture-2/
    ;; This function pops up Capture templates options in a new emacs frame
    ;; You have to bound it to a desktop key to make it pops up wherever you 
    ;; need 

    (defun org-capture-popup ()
      "Create a new frame and run `org-capture'."
      (interactive)
      (select-frame (make-frame '((org-capture-popup . t))))
      (delete-other-windows)
      (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
	(condition-case err
	    (org-capture)
	  ;; `org-capture' signals (error "Abort") when "q" is typed, so
	  ;; delete the newly-created frame in this scenario.
	  (error (when (equal err '(error "Abort"))
		   (delete-frame))))))

    (defadvice org-capture-finalize (after my-delete-capture-frame activate)
      "Delete the frame after `capture-finalize'."
      (when (frame-parameter nil 'org-capture-popup)
	(delete-frame)))

    (defadvice org-capture-destroy (after my-delete-capture-frame activate)
      "Delete the frame after `capture-destroy'."
      (when (frame-parameter nil 'org-capture-popup)
	(delete-frame)))

  ;; Capture templates start from here

	(global-set-key (kbd "C-c c") 'org-capture)

	(setq org-capture-templates

	  '(

    ("a" "Appointments" entry (file+headline "~/org~/my-appointments.org" "Calendar")
     "* APPT %^{Description} %^g\n%?\nAdded: %U")

       ("b" "Books" entry (file+headline "~/org~/books.org" "books to read")
     "* TODO %\\1 - %\\2%?\n%U\n:PROPERTIES:\n:NAME: %^{NAME}\n:TITLE: %^{TITLE}\n:END:\n")

      ;; you have to set up a template for this 
      ;; ("c" "Contacts" entry (file+headline "~/org~/contacts.org" "Contacts"), my/org-contacts-template :empty-lines 1)

       ("d" "Dreams" entry (file+datetree "~/org~/my-dreams.org") "* %^{Description} %^g %?\nAdded: %U")

       ("e" "Cookbook" entry (file "~/org~/cookbook.org")
	   "%(org-chef-get-recipe-from-url)"
	   :empty-lines 1)

       ("f" "Manual Cookbook" entry (file "~/org~/cookbook.org")
	   "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")

       ("j" "Journal" entry (file+datetree "~/org~/journal.org") "* %?\nEntered on %U\n  %i\n  %a")

       ("l" "Log Time" entry (file+datetree "~/org~/timelog.org") "** %U - %^{Activity}  :TIME:")

       ("m" "Brain" entry (function org-brain-goto-end) "* %i%?" :empty-lines 1)

       ("n" "Notes" entry (file+datetree "~/org~/my-notes.org") "* %^{Description} %^g %?\nAdded: %U")

       ;; you have to set hugo up for this
       ;; ("o" "Posts" (file+datetree "~/org~/my-post.org") "* TODO %^{Description} %^g\n%?\nAdded: %U")

       ("t" "Tasks" entry (file+datetree "~/org~/tasks.org")
     "* TODO %^{Description} %^g\n%?\nAdded: %U")

       ;; example is in:
       ;; /home/vagner/.emacs.d/elpa/org-plus-contrib-20190520/org-contacts.el
       ("c" "Contacts" entry (file "~/org~/contacts.org")
	  "* %(org-contacts-template-name)

       :PROPERTIES:
       :WEBADDRESS:
       :EMAIL: 
       :PHONE:
       :FAX:
       :MOBILE:
       :BIRTHDAY:
       :ADDRESS:
       :NAME:
       :NICKNAME:
       :ALIAS:
       :ICON:
       :IGNORE:
       :NOTE:
       :END:")

       ("w" "Website" plain (function org-website-clipper) "* %a\n%T\n" :immediate-finish t)))

  #+END_SRC

* Hyperbole

#+BEGIN_SRC emacs-lisp 

  (unless (package-installed-p 'hyperbole)
    (package-refresh-contents)	
    (package-install 'hyperbole))
  (require 'hyperbole)

#+END_SRC

* Eww

#+BEGIN_SRC emacs-lisp 
  
#+END_SRC

* Printer
  
  Use Alt-x lpr-* and Alt-x pr-*
  Commands for printing 

 #+BEGIN_SRC emacs-lisp 

   (setq lpr-command "gtklp")
   (setq ps-lpr-command "gtklp")

 #+END_SRC 

* Emacs server

#+BEGIN_SRC emacs-lisp 

  (load "server")
   (unless (server-running-p)
   (server-start))

#+END_SRC

* epg-gpg2
   
  you have to Alt-x package-install RET pinentry

  #+begin_src emacs-lisp

(setq epg-gpg-program "usr/bin/gpg2")
(require 'epa-file)
(epa-file-enable)
(setq epa-file-select-keys nil)
(setq epa-pinentry-mode 'loopback)
(pinentry-start)

  #+end_src

* bbdb-database

  #+begin_src emacs-lisp

    (require 'bbdb)
      (bbdb-initialize 'gnus 'message 'mu4e 'w3)
    ;; (bbdb-initialize 'gnus 'message 'reportmail 'sc 'sendmail 'w3)
    (setq bbdb-north-american-phone-numbers-p nil)
(bbdb-insinuate-message)
    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
    (setq bbdb-file "~/.emacs.d/bbdb")
    (setq bbdb-send-mail-style 'gnus)
    (setq bbdb-complete-name-full-completion t)
    (setq bbdb-completion-type 'primary-or-name)
    (setq bbdb-complete-name-allow-cycling t)
    (setq
    bbdb-offer-save 1
    bbdb-use-pop-up t
    bbdb-electric-p t
    bbdb-popup-target-lines  1
    )

  #+end_src

* ipp Printer

#+BEGIN_SRC emacs-lisp 

   (add-to-list 'load-path "/home/vagner/.emacs.d/elpa/ipp")

   (require 'ipp)

#+END_SRC

* Linguistics  

  #+BEGIN_SRC emacs-lisp 

   (use-package linguistic 
    :ensure t)

  #+END_SRC

* Org-drill 

  #+begin_src emacs-lisp 

  (use-package org-drill
    :ensure t)

  #+end_src

* Org-drill-table 

  #+begin_src emacs-lisp 

  (use-package org-drill-table
    :ensure t)

  #+end_src

* Memrise 
  
#+begin_src emacs-lisp 

  (use-package memrise
    :quelpa (memrise
	     :fetcher github
	     :repo "SavchenkoValeriy/memrise.el"))

  (setq memrise-sync-requests t)

#+end_SEC

* Gnutls-fix-bug 

 fix the gnutls bug for emacs26.1 

#+BEGIN_SRC emacs-lisp 

;;   (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3/")
     (setq gnutls-verify-error t)
     (setq tls-checktrust t)

 #+END_SRC

* emacs-wget

  https://github.com/ataka/emacs-wget
  see also the file $HOME/.wgetrc

 #+begin_src emacs-lisp 

  ;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/emacs-wget")

  ;; (require 'w3m-wget)
;;   (load "w3m-wget")
;;  (autoload 'wget "wget" "wget interface for Emacs." t)
;;  (autoload 'wget-web-page "wget" "wget interface to download whole web page." t)
;;  (autoload 'w3-wget "w3-wget" "wget interface for Emacs/W3." t)
;;  (setq wget-basic-options (cons "-equiet=off" wget-basic-options))
;;  (setq wget-basic-options (cons "-P." wget-basic-options))
;;  (setq wget-process-buffer nil)
;;  (setq wget-command "/usr/bin/wget")

 #+end_src
* More niceties 

 More nice stuff
 Configuring Emacs from scratch part 1
 https://invidio.us/latest_version?id=FYPE0dIoq1I&itag=43

#+BEGIN_SRC emacs-lisp

  ;; Mouse scrolling
    (setq mouse-wheel-scroll-amount '(1)
	  mouse-wheel-progressive-speed nil 
	  scroll-conservatively 101
	  hscroll-margin 1
	  hscroll-step 1
	  scroll-preserve-screen-position t) 

    (defalias 'yes-or-no-p 'y-or-n-p)
    (setq confirm-kill-processes nil)

  ;; gtk-tooltipos
	(setq x-gtk-use-system-tooltips nil
	      use-dialog-box nil)

     ;; Desktop mode
     ;; (desktop-save-mode t)

      ;; Save minibuffer history.
      (savehist-mode 1)

      ;; Each file in a new window.
      ;; (setq pop-up-frames t)

    ;; Disk space is cheap. Save lots. (c) Sacha Chua
    ;; Backups

    (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
	  delete-old-versions -1
	  version-control t
	  vc-make-backup-files t
	  auto-save-list-file-prefix "~/.emacs.d/autosave/"
	  auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t))
	  undo-tree-auto-save-history t
	  undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo/")))

    ;; But don't create stupid lockfiles
    (setq create-lockfiles nil)

    ;; History
    (setq savehist-file "~/.emacs.d/history"
	  history-length t
	  history-delete-duplicates t
	  savehist-save-minibuffer-history 1
	  savehist-additional-variables
	  '(kill-ring
	    search-ring
	    regexp-search-ring)
	  recentf-max-saved-items 50)
    (savehist-mode 1)
    (recentf-mode 1)

  ;; Which-key
  ;; C-x to access it

      (use-package which-key
       :ensure t
       :config
	(which-key-mode t))

#+END_SRC
